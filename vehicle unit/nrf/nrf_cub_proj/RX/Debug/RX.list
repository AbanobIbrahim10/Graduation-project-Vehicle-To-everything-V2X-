
RX.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002530  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000003c  0800263c  0800263c  0001263c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002678  08002678  00020014  2**0
                  CONTENTS
  4 .ARM          00000000  08002678  08002678  00020014  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002678  08002678  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002678  08002678  00012678  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800267c  0800267c  0001267c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  08002680  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000114  20000014  08002694  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000128  08002694  00020128  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008f1b  00000000  00000000  0002003d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000016c7  00000000  00000000  00028f58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000878  00000000  00000000  0002a620  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000007f0  00000000  00000000  0002ae98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016900  00000000  00000000  0002b688  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009647  00000000  00000000  00041f88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00080a04  00000000  00000000  0004b5cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000cbfd3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000021ac  00000000  00000000  000cc024  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000014 	.word	0x20000014
 8000128:	00000000 	.word	0x00000000
 800012c:	08002624 	.word	0x08002624

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000018 	.word	0x20000018
 8000148:	08002624 	.word	0x08002624

0800014c <CS_Select>:
#define NRF24_CSN_PIN    GPIO_PIN_2



void CS_Select (void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(NRF24_CSN_PORT, NRF24_CSN_PIN, GPIO_PIN_RESET);
 8000150:	2200      	movs	r2, #0
 8000152:	2104      	movs	r1, #4
 8000154:	4802      	ldr	r0, [pc, #8]	; (8000160 <CS_Select+0x14>)
 8000156:	f000 ffab 	bl	80010b0 <HAL_GPIO_WritePin>
}
 800015a:	bf00      	nop
 800015c:	bd80      	pop	{r7, pc}
 800015e:	bf00      	nop
 8000160:	40010800 	.word	0x40010800

08000164 <CS_UnSelect>:

void CS_UnSelect (void)
{
 8000164:	b580      	push	{r7, lr}
 8000166:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(NRF24_CSN_PORT, NRF24_CSN_PIN, GPIO_PIN_SET);
 8000168:	2201      	movs	r2, #1
 800016a:	2104      	movs	r1, #4
 800016c:	4802      	ldr	r0, [pc, #8]	; (8000178 <CS_UnSelect+0x14>)
 800016e:	f000 ff9f 	bl	80010b0 <HAL_GPIO_WritePin>
}
 8000172:	bf00      	nop
 8000174:	bd80      	pop	{r7, pc}
 8000176:	bf00      	nop
 8000178:	40010800 	.word	0x40010800

0800017c <CE_Enable>:


void CE_Enable (void)
{
 800017c:	b580      	push	{r7, lr}
 800017e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(NRF24_CE_PORT, NRF24_CE_PIN, GPIO_PIN_SET);
 8000180:	2201      	movs	r2, #1
 8000182:	2108      	movs	r1, #8
 8000184:	4802      	ldr	r0, [pc, #8]	; (8000190 <CE_Enable+0x14>)
 8000186:	f000 ff93 	bl	80010b0 <HAL_GPIO_WritePin>
}
 800018a:	bf00      	nop
 800018c:	bd80      	pop	{r7, pc}
 800018e:	bf00      	nop
 8000190:	40010800 	.word	0x40010800

08000194 <CE_Disable>:

void CE_Disable (void)
{
 8000194:	b580      	push	{r7, lr}
 8000196:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(NRF24_CE_PORT, NRF24_CE_PIN, GPIO_PIN_RESET);
 8000198:	2200      	movs	r2, #0
 800019a:	2108      	movs	r1, #8
 800019c:	4802      	ldr	r0, [pc, #8]	; (80001a8 <CE_Disable+0x14>)
 800019e:	f000 ff87 	bl	80010b0 <HAL_GPIO_WritePin>
}
 80001a2:	bf00      	nop
 80001a4:	bd80      	pop	{r7, pc}
 80001a6:	bf00      	nop
 80001a8:	40010800 	.word	0x40010800

080001ac <nrf24_WriteReg>:



// write a single byte to the particular register
void nrf24_WriteReg (uint8_t Reg, uint8_t Data)
{
 80001ac:	b580      	push	{r7, lr}
 80001ae:	b084      	sub	sp, #16
 80001b0:	af00      	add	r7, sp, #0
 80001b2:	4603      	mov	r3, r0
 80001b4:	460a      	mov	r2, r1
 80001b6:	71fb      	strb	r3, [r7, #7]
 80001b8:	4613      	mov	r3, r2
 80001ba:	71bb      	strb	r3, [r7, #6]
	uint8_t buf[2];
	buf[0] = Reg|1<<5;
 80001bc:	79fb      	ldrb	r3, [r7, #7]
 80001be:	f043 0320 	orr.w	r3, r3, #32
 80001c2:	b2db      	uxtb	r3, r3
 80001c4:	733b      	strb	r3, [r7, #12]
	buf[1] = Data;
 80001c6:	79bb      	ldrb	r3, [r7, #6]
 80001c8:	737b      	strb	r3, [r7, #13]

	// Pull the CS Pin LOW to select the device
	CS_Select();
 80001ca:	f7ff ffbf 	bl	800014c <CS_Select>

	HAL_SPI_Transmit(NRF24_SPI, buf, 2, 1000);
 80001ce:	f107 010c 	add.w	r1, r7, #12
 80001d2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80001d6:	2202      	movs	r2, #2
 80001d8:	4804      	ldr	r0, [pc, #16]	; (80001ec <nrf24_WriteReg+0x40>)
 80001da:	f001 fc15 	bl	8001a08 <HAL_SPI_Transmit>

	// Pull the CS HIGH to release the device
	CS_UnSelect();
 80001de:	f7ff ffc1 	bl	8000164 <CS_UnSelect>
}
 80001e2:	bf00      	nop
 80001e4:	3710      	adds	r7, #16
 80001e6:	46bd      	mov	sp, r7
 80001e8:	bd80      	pop	{r7, pc}
 80001ea:	bf00      	nop
 80001ec:	20000030 	.word	0x20000030

080001f0 <nrf24_WriteRegMulti>:

//write multiple bytes starting from a particular register
void nrf24_WriteRegMulti (uint8_t Reg, uint8_t *data, int size)
{
 80001f0:	b580      	push	{r7, lr}
 80001f2:	b086      	sub	sp, #24
 80001f4:	af00      	add	r7, sp, #0
 80001f6:	4603      	mov	r3, r0
 80001f8:	60b9      	str	r1, [r7, #8]
 80001fa:	607a      	str	r2, [r7, #4]
 80001fc:	73fb      	strb	r3, [r7, #15]
	uint8_t buf[2];
	buf[0] = Reg|1<<5;
 80001fe:	7bfb      	ldrb	r3, [r7, #15]
 8000200:	f043 0320 	orr.w	r3, r3, #32
 8000204:	b2db      	uxtb	r3, r3
 8000206:	753b      	strb	r3, [r7, #20]
//	buf[1] = Data;

	// Pull the CS Pin LOW to select the device
	CS_Select();
 8000208:	f7ff ffa0 	bl	800014c <CS_Select>

	HAL_SPI_Transmit(NRF24_SPI, buf, 1, 100);
 800020c:	f107 0114 	add.w	r1, r7, #20
 8000210:	2364      	movs	r3, #100	; 0x64
 8000212:	2201      	movs	r2, #1
 8000214:	4808      	ldr	r0, [pc, #32]	; (8000238 <nrf24_WriteRegMulti+0x48>)
 8000216:	f001 fbf7 	bl	8001a08 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(NRF24_SPI, data, size, 1000);
 800021a:	687b      	ldr	r3, [r7, #4]
 800021c:	b29a      	uxth	r2, r3
 800021e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000222:	68b9      	ldr	r1, [r7, #8]
 8000224:	4804      	ldr	r0, [pc, #16]	; (8000238 <nrf24_WriteRegMulti+0x48>)
 8000226:	f001 fbef 	bl	8001a08 <HAL_SPI_Transmit>

	// Pull the CS HIGH to release the device
	CS_UnSelect();
 800022a:	f7ff ff9b 	bl	8000164 <CS_UnSelect>
}
 800022e:	bf00      	nop
 8000230:	3718      	adds	r7, #24
 8000232:	46bd      	mov	sp, r7
 8000234:	bd80      	pop	{r7, pc}
 8000236:	bf00      	nop
 8000238:	20000030 	.word	0x20000030

0800023c <nrf24_ReadReg>:


uint8_t nrf24_ReadReg (uint8_t Reg)
{
 800023c:	b580      	push	{r7, lr}
 800023e:	b084      	sub	sp, #16
 8000240:	af00      	add	r7, sp, #0
 8000242:	4603      	mov	r3, r0
 8000244:	71fb      	strb	r3, [r7, #7]
	uint8_t data=0;
 8000246:	2300      	movs	r3, #0
 8000248:	73fb      	strb	r3, [r7, #15]

	// Pull the CS Pin LOW to select the device
	CS_Select();
 800024a:	f7ff ff7f 	bl	800014c <CS_Select>

	HAL_SPI_Transmit(NRF24_SPI, &Reg, 1, 100);
 800024e:	1df9      	adds	r1, r7, #7
 8000250:	2364      	movs	r3, #100	; 0x64
 8000252:	2201      	movs	r2, #1
 8000254:	4808      	ldr	r0, [pc, #32]	; (8000278 <nrf24_ReadReg+0x3c>)
 8000256:	f001 fbd7 	bl	8001a08 <HAL_SPI_Transmit>
	HAL_SPI_Receive(NRF24_SPI, &data, 1, 100);
 800025a:	f107 010f 	add.w	r1, r7, #15
 800025e:	2364      	movs	r3, #100	; 0x64
 8000260:	2201      	movs	r2, #1
 8000262:	4805      	ldr	r0, [pc, #20]	; (8000278 <nrf24_ReadReg+0x3c>)
 8000264:	f001 fd13 	bl	8001c8e <HAL_SPI_Receive>

	// Pull the CS HIGH to release the device
	CS_UnSelect();
 8000268:	f7ff ff7c 	bl	8000164 <CS_UnSelect>

	return data;
 800026c:	7bfb      	ldrb	r3, [r7, #15]
}
 800026e:	4618      	mov	r0, r3
 8000270:	3710      	adds	r7, #16
 8000272:	46bd      	mov	sp, r7
 8000274:	bd80      	pop	{r7, pc}
 8000276:	bf00      	nop
 8000278:	20000030 	.word	0x20000030

0800027c <nrf24_ReadReg_Multi>:


/* Read multiple bytes from the register */
void nrf24_ReadReg_Multi (uint8_t Reg, uint8_t *data, int size)
{
 800027c:	b580      	push	{r7, lr}
 800027e:	b084      	sub	sp, #16
 8000280:	af00      	add	r7, sp, #0
 8000282:	4603      	mov	r3, r0
 8000284:	60b9      	str	r1, [r7, #8]
 8000286:	607a      	str	r2, [r7, #4]
 8000288:	73fb      	strb	r3, [r7, #15]
	// Pull the CS Pin LOW to select the device
	CS_Select();
 800028a:	f7ff ff5f 	bl	800014c <CS_Select>

	HAL_SPI_Transmit(NRF24_SPI, &Reg, 1, 100);
 800028e:	f107 010f 	add.w	r1, r7, #15
 8000292:	2364      	movs	r3, #100	; 0x64
 8000294:	2201      	movs	r2, #1
 8000296:	4808      	ldr	r0, [pc, #32]	; (80002b8 <nrf24_ReadReg_Multi+0x3c>)
 8000298:	f001 fbb6 	bl	8001a08 <HAL_SPI_Transmit>
	HAL_SPI_Receive(NRF24_SPI, data, size, 1000);
 800029c:	687b      	ldr	r3, [r7, #4]
 800029e:	b29a      	uxth	r2, r3
 80002a0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80002a4:	68b9      	ldr	r1, [r7, #8]
 80002a6:	4804      	ldr	r0, [pc, #16]	; (80002b8 <nrf24_ReadReg_Multi+0x3c>)
 80002a8:	f001 fcf1 	bl	8001c8e <HAL_SPI_Receive>

	// Pull the CS HIGH to release the device
	CS_UnSelect();
 80002ac:	f7ff ff5a 	bl	8000164 <CS_UnSelect>
}
 80002b0:	bf00      	nop
 80002b2:	3710      	adds	r7, #16
 80002b4:	46bd      	mov	sp, r7
 80002b6:	bd80      	pop	{r7, pc}
 80002b8:	20000030 	.word	0x20000030

080002bc <nrfsendCmd>:


// send the command to the NRF
void nrfsendCmd (uint8_t cmd)
{
 80002bc:	b580      	push	{r7, lr}
 80002be:	b082      	sub	sp, #8
 80002c0:	af00      	add	r7, sp, #0
 80002c2:	4603      	mov	r3, r0
 80002c4:	71fb      	strb	r3, [r7, #7]
	// Pull the CS Pin LOW to select the device
	CS_Select();
 80002c6:	f7ff ff41 	bl	800014c <CS_Select>

	HAL_SPI_Transmit(NRF24_SPI, &cmd, 1, 100);
 80002ca:	1df9      	adds	r1, r7, #7
 80002cc:	2364      	movs	r3, #100	; 0x64
 80002ce:	2201      	movs	r2, #1
 80002d0:	4804      	ldr	r0, [pc, #16]	; (80002e4 <nrfsendCmd+0x28>)
 80002d2:	f001 fb99 	bl	8001a08 <HAL_SPI_Transmit>

	// Pull the CS HIGH to release the device
	CS_UnSelect();
 80002d6:	f7ff ff45 	bl	8000164 <CS_UnSelect>
}
 80002da:	bf00      	nop
 80002dc:	3708      	adds	r7, #8
 80002de:	46bd      	mov	sp, r7
 80002e0:	bd80      	pop	{r7, pc}
 80002e2:	bf00      	nop
 80002e4:	20000030 	.word	0x20000030

080002e8 <nrf24_reset>:

void nrf24_reset(uint8_t REG)
{
 80002e8:	b580      	push	{r7, lr}
 80002ea:	b088      	sub	sp, #32
 80002ec:	af00      	add	r7, sp, #0
 80002ee:	4603      	mov	r3, r0
 80002f0:	71fb      	strb	r3, [r7, #7]
	if (REG == STATUS)
 80002f2:	79fb      	ldrb	r3, [r7, #7]
 80002f4:	2b07      	cmp	r3, #7
 80002f6:	d104      	bne.n	8000302 <nrf24_reset+0x1a>
	{
		nrf24_WriteReg(STATUS, 0x00);
 80002f8:	2100      	movs	r1, #0
 80002fa:	2007      	movs	r0, #7
 80002fc:	f7ff ff56 	bl	80001ac <nrf24_WriteReg>
	nrf24_WriteReg(RX_PW_P5, 0);
	nrf24_WriteReg(FIFO_STATUS, 0x11);
	nrf24_WriteReg(DYNPD, 0);
	nrf24_WriteReg(FEATURE, 0);
	}
}
 8000300:	e090      	b.n	8000424 <nrf24_reset+0x13c>
	else if (REG == FIFO_STATUS)
 8000302:	79fb      	ldrb	r3, [r7, #7]
 8000304:	2b17      	cmp	r3, #23
 8000306:	d104      	bne.n	8000312 <nrf24_reset+0x2a>
		nrf24_WriteReg(FIFO_STATUS, 0x11);
 8000308:	2111      	movs	r1, #17
 800030a:	2017      	movs	r0, #23
 800030c:	f7ff ff4e 	bl	80001ac <nrf24_WriteReg>
}
 8000310:	e088      	b.n	8000424 <nrf24_reset+0x13c>
	nrf24_WriteReg(CONFIG, 0x08);
 8000312:	2108      	movs	r1, #8
 8000314:	2000      	movs	r0, #0
 8000316:	f7ff ff49 	bl	80001ac <nrf24_WriteReg>
	nrf24_WriteReg(EN_AA, 0x3F);
 800031a:	213f      	movs	r1, #63	; 0x3f
 800031c:	2001      	movs	r0, #1
 800031e:	f7ff ff45 	bl	80001ac <nrf24_WriteReg>
	nrf24_WriteReg(EN_RXADDR, 0x03);
 8000322:	2103      	movs	r1, #3
 8000324:	2002      	movs	r0, #2
 8000326:	f7ff ff41 	bl	80001ac <nrf24_WriteReg>
	nrf24_WriteReg(SETUP_AW, 0x03);
 800032a:	2103      	movs	r1, #3
 800032c:	2003      	movs	r0, #3
 800032e:	f7ff ff3d 	bl	80001ac <nrf24_WriteReg>
	nrf24_WriteReg(SETUP_RETR, 0x03);
 8000332:	2103      	movs	r1, #3
 8000334:	2004      	movs	r0, #4
 8000336:	f7ff ff39 	bl	80001ac <nrf24_WriteReg>
	nrf24_WriteReg(RF_CH, 0x02);
 800033a:	2102      	movs	r1, #2
 800033c:	2005      	movs	r0, #5
 800033e:	f7ff ff35 	bl	80001ac <nrf24_WriteReg>
	nrf24_WriteReg(RF_SETUP, 0x0E);
 8000342:	210e      	movs	r1, #14
 8000344:	2006      	movs	r0, #6
 8000346:	f7ff ff31 	bl	80001ac <nrf24_WriteReg>
	nrf24_WriteReg(STATUS, 0x00);
 800034a:	2100      	movs	r1, #0
 800034c:	2007      	movs	r0, #7
 800034e:	f7ff ff2d 	bl	80001ac <nrf24_WriteReg>
	nrf24_WriteReg(OBSERVE_TX, 0x00);
 8000352:	2100      	movs	r1, #0
 8000354:	2008      	movs	r0, #8
 8000356:	f7ff ff29 	bl	80001ac <nrf24_WriteReg>
	nrf24_WriteReg(CD, 0x00);
 800035a:	2100      	movs	r1, #0
 800035c:	2009      	movs	r0, #9
 800035e:	f7ff ff25 	bl	80001ac <nrf24_WriteReg>
	uint8_t rx_addr_p0_def[5] = {0xE7, 0xE7, 0xE7, 0xE7, 0xE7};
 8000362:	4a32      	ldr	r2, [pc, #200]	; (800042c <nrf24_reset+0x144>)
 8000364:	f107 0318 	add.w	r3, r7, #24
 8000368:	e892 0003 	ldmia.w	r2, {r0, r1}
 800036c:	6018      	str	r0, [r3, #0]
 800036e:	3304      	adds	r3, #4
 8000370:	7019      	strb	r1, [r3, #0]
	nrf24_WriteRegMulti(RX_ADDR_P0, rx_addr_p0_def, 5);
 8000372:	f107 0318 	add.w	r3, r7, #24
 8000376:	2205      	movs	r2, #5
 8000378:	4619      	mov	r1, r3
 800037a:	200a      	movs	r0, #10
 800037c:	f7ff ff38 	bl	80001f0 <nrf24_WriteRegMulti>
	uint8_t rx_addr_p1_def[5] = {0xC2, 0xC2, 0xC2, 0xC2, 0xC2};
 8000380:	4a2b      	ldr	r2, [pc, #172]	; (8000430 <nrf24_reset+0x148>)
 8000382:	f107 0310 	add.w	r3, r7, #16
 8000386:	e892 0003 	ldmia.w	r2, {r0, r1}
 800038a:	6018      	str	r0, [r3, #0]
 800038c:	3304      	adds	r3, #4
 800038e:	7019      	strb	r1, [r3, #0]
	nrf24_WriteRegMulti(RX_ADDR_P1, rx_addr_p1_def, 5);
 8000390:	f107 0310 	add.w	r3, r7, #16
 8000394:	2205      	movs	r2, #5
 8000396:	4619      	mov	r1, r3
 8000398:	200b      	movs	r0, #11
 800039a:	f7ff ff29 	bl	80001f0 <nrf24_WriteRegMulti>
	nrf24_WriteReg(RX_ADDR_P2, 0xC3);
 800039e:	21c3      	movs	r1, #195	; 0xc3
 80003a0:	200c      	movs	r0, #12
 80003a2:	f7ff ff03 	bl	80001ac <nrf24_WriteReg>
	nrf24_WriteReg(RX_ADDR_P3, 0xC4);
 80003a6:	21c4      	movs	r1, #196	; 0xc4
 80003a8:	200d      	movs	r0, #13
 80003aa:	f7ff feff 	bl	80001ac <nrf24_WriteReg>
	nrf24_WriteReg(RX_ADDR_P4, 0xC5);
 80003ae:	21c5      	movs	r1, #197	; 0xc5
 80003b0:	200e      	movs	r0, #14
 80003b2:	f7ff fefb 	bl	80001ac <nrf24_WriteReg>
	nrf24_WriteReg(RX_ADDR_P5, 0xC6);
 80003b6:	21c6      	movs	r1, #198	; 0xc6
 80003b8:	200f      	movs	r0, #15
 80003ba:	f7ff fef7 	bl	80001ac <nrf24_WriteReg>
	uint8_t tx_addr_def[5] = {0xE7, 0xE7, 0xE7, 0xE7, 0xE7};
 80003be:	4a1b      	ldr	r2, [pc, #108]	; (800042c <nrf24_reset+0x144>)
 80003c0:	f107 0308 	add.w	r3, r7, #8
 80003c4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80003c8:	6018      	str	r0, [r3, #0]
 80003ca:	3304      	adds	r3, #4
 80003cc:	7019      	strb	r1, [r3, #0]
	nrf24_WriteRegMulti(TX_ADDR, tx_addr_def, 5);
 80003ce:	f107 0308 	add.w	r3, r7, #8
 80003d2:	2205      	movs	r2, #5
 80003d4:	4619      	mov	r1, r3
 80003d6:	2010      	movs	r0, #16
 80003d8:	f7ff ff0a 	bl	80001f0 <nrf24_WriteRegMulti>
	nrf24_WriteReg(RX_PW_P0, 0);
 80003dc:	2100      	movs	r1, #0
 80003de:	2011      	movs	r0, #17
 80003e0:	f7ff fee4 	bl	80001ac <nrf24_WriteReg>
	nrf24_WriteReg(RX_PW_P1, 0);
 80003e4:	2100      	movs	r1, #0
 80003e6:	2012      	movs	r0, #18
 80003e8:	f7ff fee0 	bl	80001ac <nrf24_WriteReg>
	nrf24_WriteReg(RX_PW_P2, 0);
 80003ec:	2100      	movs	r1, #0
 80003ee:	2013      	movs	r0, #19
 80003f0:	f7ff fedc 	bl	80001ac <nrf24_WriteReg>
	nrf24_WriteReg(RX_PW_P3, 0);
 80003f4:	2100      	movs	r1, #0
 80003f6:	2014      	movs	r0, #20
 80003f8:	f7ff fed8 	bl	80001ac <nrf24_WriteReg>
	nrf24_WriteReg(RX_PW_P4, 0);
 80003fc:	2100      	movs	r1, #0
 80003fe:	2015      	movs	r0, #21
 8000400:	f7ff fed4 	bl	80001ac <nrf24_WriteReg>
	nrf24_WriteReg(RX_PW_P5, 0);
 8000404:	2100      	movs	r1, #0
 8000406:	2016      	movs	r0, #22
 8000408:	f7ff fed0 	bl	80001ac <nrf24_WriteReg>
	nrf24_WriteReg(FIFO_STATUS, 0x11);
 800040c:	2111      	movs	r1, #17
 800040e:	2017      	movs	r0, #23
 8000410:	f7ff fecc 	bl	80001ac <nrf24_WriteReg>
	nrf24_WriteReg(DYNPD, 0);
 8000414:	2100      	movs	r1, #0
 8000416:	201c      	movs	r0, #28
 8000418:	f7ff fec8 	bl	80001ac <nrf24_WriteReg>
	nrf24_WriteReg(FEATURE, 0);
 800041c:	2100      	movs	r1, #0
 800041e:	201d      	movs	r0, #29
 8000420:	f7ff fec4 	bl	80001ac <nrf24_WriteReg>
}
 8000424:	bf00      	nop
 8000426:	3720      	adds	r7, #32
 8000428:	46bd      	mov	sp, r7
 800042a:	bd80      	pop	{r7, pc}
 800042c:	0800263c 	.word	0x0800263c
 8000430:	08002644 	.word	0x08002644

08000434 <NRF24_Init>:




void NRF24_Init (void)
{
 8000434:	b580      	push	{r7, lr}
 8000436:	af00      	add	r7, sp, #0
	// disable the chip before configuring the device
	CE_Disable();
 8000438:	f7ff feac 	bl	8000194 <CE_Disable>


	// reset everything
	nrf24_reset (0);
 800043c:	2000      	movs	r0, #0
 800043e:	f7ff ff53 	bl	80002e8 <nrf24_reset>

	nrf24_WriteReg(CONFIG, 0);  // will be configured later
 8000442:	2100      	movs	r1, #0
 8000444:	2000      	movs	r0, #0
 8000446:	f7ff feb1 	bl	80001ac <nrf24_WriteReg>

	nrf24_WriteReg(EN_AA, 0);  // No Auto ACK
 800044a:	2100      	movs	r1, #0
 800044c:	2001      	movs	r0, #1
 800044e:	f7ff fead 	bl	80001ac <nrf24_WriteReg>

	nrf24_WriteReg (EN_RXADDR, 0);  // Not Enabling any data pipe right now
 8000452:	2100      	movs	r1, #0
 8000454:	2002      	movs	r0, #2
 8000456:	f7ff fea9 	bl	80001ac <nrf24_WriteReg>

	nrf24_WriteReg (SETUP_AW, 0x03);  // 5 Bytes for the TX/RX address
 800045a:	2103      	movs	r1, #3
 800045c:	2003      	movs	r0, #3
 800045e:	f7ff fea5 	bl	80001ac <nrf24_WriteReg>

	nrf24_WriteReg (SETUP_RETR, 0);   // No retransmission
 8000462:	2100      	movs	r1, #0
 8000464:	2004      	movs	r0, #4
 8000466:	f7ff fea1 	bl	80001ac <nrf24_WriteReg>

	nrf24_WriteReg (RF_CH, 0);  // will be setup during Tx or RX
 800046a:	2100      	movs	r1, #0
 800046c:	2005      	movs	r0, #5
 800046e:	f7ff fe9d 	bl	80001ac <nrf24_WriteReg>

	nrf24_WriteReg (RF_SETUP, 0x0E);   // Power= 0db, data rate = 2Mbps
 8000472:	210e      	movs	r1, #14
 8000474:	2006      	movs	r0, #6
 8000476:	f7ff fe99 	bl	80001ac <nrf24_WriteReg>

	// Enable the chip after configuring the device
	CE_Enable();
 800047a:	f7ff fe7f 	bl	800017c <CE_Enable>

}
 800047e:	bf00      	nop
 8000480:	bd80      	pop	{r7, pc}

08000482 <NRF24_RxMode>:
	return 0;
}


void NRF24_RxMode (uint8_t *Address, uint8_t channel)
{
 8000482:	b580      	push	{r7, lr}
 8000484:	b084      	sub	sp, #16
 8000486:	af00      	add	r7, sp, #0
 8000488:	6078      	str	r0, [r7, #4]
 800048a:	460b      	mov	r3, r1
 800048c:	70fb      	strb	r3, [r7, #3]
	// disable the chip before configuring the device
	CE_Disable();
 800048e:	f7ff fe81 	bl	8000194 <CE_Disable>

	nrf24_reset (STATUS);
 8000492:	2007      	movs	r0, #7
 8000494:	f7ff ff28 	bl	80002e8 <nrf24_reset>

	nrf24_WriteReg (RF_CH, channel);  // select the channel
 8000498:	78fb      	ldrb	r3, [r7, #3]
 800049a:	4619      	mov	r1, r3
 800049c:	2005      	movs	r0, #5
 800049e:	f7ff fe85 	bl	80001ac <nrf24_WriteReg>

	// select data pipe 2
	uint8_t en_rxaddr = nrf24_ReadReg(EN_RXADDR);
 80004a2:	2002      	movs	r0, #2
 80004a4:	f7ff feca 	bl	800023c <nrf24_ReadReg>
 80004a8:	4603      	mov	r3, r0
 80004aa:	73fb      	strb	r3, [r7, #15]
	en_rxaddr = en_rxaddr | (1<<2);
 80004ac:	7bfb      	ldrb	r3, [r7, #15]
 80004ae:	f043 0304 	orr.w	r3, r3, #4
 80004b2:	73fb      	strb	r3, [r7, #15]
	nrf24_WriteReg (EN_RXADDR, en_rxaddr);
 80004b4:	7bfb      	ldrb	r3, [r7, #15]
 80004b6:	4619      	mov	r1, r3
 80004b8:	2002      	movs	r0, #2
 80004ba:	f7ff fe77 	bl	80001ac <nrf24_WriteReg>
	 * Pipe 1 ADDR = 0xAABBCCDD11
	 * Pipe 2 ADDR = 0xAABBCCDD22
	 * Pipe 3 ADDR = 0xAABBCCDD33
	 *
	 */
	nrf24_WriteRegMulti(RX_ADDR_P1, Address, 5);  // Write the Pipe1 address
 80004be:	2205      	movs	r2, #5
 80004c0:	6879      	ldr	r1, [r7, #4]
 80004c2:	200b      	movs	r0, #11
 80004c4:	f7ff fe94 	bl	80001f0 <nrf24_WriteRegMulti>
	nrf24_WriteReg(RX_ADDR_P2, 0xEE);  // Write the Pipe2 LSB address
 80004c8:	21ee      	movs	r1, #238	; 0xee
 80004ca:	200c      	movs	r0, #12
 80004cc:	f7ff fe6e 	bl	80001ac <nrf24_WriteReg>

	nrf24_WriteReg (RX_PW_P2, 32);   // 32 bit payload size for pipe 2
 80004d0:	2120      	movs	r1, #32
 80004d2:	2013      	movs	r0, #19
 80004d4:	f7ff fe6a 	bl	80001ac <nrf24_WriteReg>


	// power up the device in Rx mode
	uint8_t config = nrf24_ReadReg(CONFIG);
 80004d8:	2000      	movs	r0, #0
 80004da:	f7ff feaf 	bl	800023c <nrf24_ReadReg>
 80004de:	4603      	mov	r3, r0
 80004e0:	73bb      	strb	r3, [r7, #14]
	config = config | (1<<1) | (1<<0);
 80004e2:	7bbb      	ldrb	r3, [r7, #14]
 80004e4:	f043 0303 	orr.w	r3, r3, #3
 80004e8:	73bb      	strb	r3, [r7, #14]
	nrf24_WriteReg (CONFIG, config);
 80004ea:	7bbb      	ldrb	r3, [r7, #14]
 80004ec:	4619      	mov	r1, r3
 80004ee:	2000      	movs	r0, #0
 80004f0:	f7ff fe5c 	bl	80001ac <nrf24_WriteReg>

	// Enable the chip after configuring the device
	CE_Enable();
 80004f4:	f7ff fe42 	bl	800017c <CE_Enable>
}
 80004f8:	bf00      	nop
 80004fa:	3710      	adds	r7, #16
 80004fc:	46bd      	mov	sp, r7
 80004fe:	bd80      	pop	{r7, pc}

08000500 <isDataAvailable>:


uint8_t isDataAvailable (int pipenum)
{
 8000500:	b580      	push	{r7, lr}
 8000502:	b084      	sub	sp, #16
 8000504:	af00      	add	r7, sp, #0
 8000506:	6078      	str	r0, [r7, #4]
	uint8_t status = nrf24_ReadReg(STATUS);
 8000508:	2007      	movs	r0, #7
 800050a:	f7ff fe97 	bl	800023c <nrf24_ReadReg>
 800050e:	4603      	mov	r3, r0
 8000510:	73fb      	strb	r3, [r7, #15]

	if ((status&(1<<6))&&(status&(pipenum<<1)))
 8000512:	7bfb      	ldrb	r3, [r7, #15]
 8000514:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000518:	2b00      	cmp	r3, #0
 800051a:	d00b      	beq.n	8000534 <isDataAvailable+0x34>
 800051c:	7bfa      	ldrb	r2, [r7, #15]
 800051e:	687b      	ldr	r3, [r7, #4]
 8000520:	005b      	lsls	r3, r3, #1
 8000522:	4013      	ands	r3, r2
 8000524:	2b00      	cmp	r3, #0
 8000526:	d005      	beq.n	8000534 <isDataAvailable+0x34>
	{

		nrf24_WriteReg(STATUS, (1<<6));
 8000528:	2140      	movs	r1, #64	; 0x40
 800052a:	2007      	movs	r0, #7
 800052c:	f7ff fe3e 	bl	80001ac <nrf24_WriteReg>

		return 1;
 8000530:	2301      	movs	r3, #1
 8000532:	e000      	b.n	8000536 <isDataAvailable+0x36>
	}

	return 0;
 8000534:	2300      	movs	r3, #0
}
 8000536:	4618      	mov	r0, r3
 8000538:	3710      	adds	r7, #16
 800053a:	46bd      	mov	sp, r7
 800053c:	bd80      	pop	{r7, pc}
	...

08000540 <NRF24_Receive>:


void NRF24_Receive (uint8_t *data)
{
 8000540:	b580      	push	{r7, lr}
 8000542:	b084      	sub	sp, #16
 8000544:	af00      	add	r7, sp, #0
 8000546:	6078      	str	r0, [r7, #4]
	uint8_t cmdtosend = 0;
 8000548:	2300      	movs	r3, #0
 800054a:	73fb      	strb	r3, [r7, #15]

	// select the device
	CS_Select();
 800054c:	f7ff fdfe 	bl	800014c <CS_Select>

	// payload command
	cmdtosend = R_RX_PAYLOAD;
 8000550:	2361      	movs	r3, #97	; 0x61
 8000552:	73fb      	strb	r3, [r7, #15]
	HAL_SPI_Transmit(NRF24_SPI, &cmdtosend, 1, 100);
 8000554:	f107 010f 	add.w	r1, r7, #15
 8000558:	2364      	movs	r3, #100	; 0x64
 800055a:	2201      	movs	r2, #1
 800055c:	480c      	ldr	r0, [pc, #48]	; (8000590 <NRF24_Receive+0x50>)
 800055e:	f001 fa53 	bl	8001a08 <HAL_SPI_Transmit>

	// Receive the payload
	HAL_SPI_Receive(NRF24_SPI, data, 32, 1000);
 8000562:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000566:	2220      	movs	r2, #32
 8000568:	6879      	ldr	r1, [r7, #4]
 800056a:	4809      	ldr	r0, [pc, #36]	; (8000590 <NRF24_Receive+0x50>)
 800056c:	f001 fb8f 	bl	8001c8e <HAL_SPI_Receive>

	// Unselect the device
	CS_UnSelect();
 8000570:	f7ff fdf8 	bl	8000164 <CS_UnSelect>

	HAL_Delay(1);
 8000574:	2001      	movs	r0, #1
 8000576:	f000 fb17 	bl	8000ba8 <HAL_Delay>

	cmdtosend = FLUSH_RX;
 800057a:	23e2      	movs	r3, #226	; 0xe2
 800057c:	73fb      	strb	r3, [r7, #15]
	nrfsendCmd(cmdtosend);
 800057e:	7bfb      	ldrb	r3, [r7, #15]
 8000580:	4618      	mov	r0, r3
 8000582:	f7ff fe9b 	bl	80002bc <nrfsendCmd>
}
 8000586:	bf00      	nop
 8000588:	3710      	adds	r7, #16
 800058a:	46bd      	mov	sp, r7
 800058c:	bd80      	pop	{r7, pc}
 800058e:	bf00      	nop
 8000590:	20000030 	.word	0x20000030

08000594 <NRF24_ReadAll>:



// Read all the Register data
void NRF24_ReadAll (uint8_t *data)
{
 8000594:	b590      	push	{r4, r7, lr}
 8000596:	b085      	sub	sp, #20
 8000598:	af00      	add	r7, sp, #0
 800059a:	6078      	str	r0, [r7, #4]
	for (int i=0; i<10; i++)
 800059c:	2300      	movs	r3, #0
 800059e:	60fb      	str	r3, [r7, #12]
 80005a0:	e00c      	b.n	80005bc <NRF24_ReadAll+0x28>
	{
		*(data+i) = nrf24_ReadReg(i);
 80005a2:	68fb      	ldr	r3, [r7, #12]
 80005a4:	b2d9      	uxtb	r1, r3
 80005a6:	68fb      	ldr	r3, [r7, #12]
 80005a8:	687a      	ldr	r2, [r7, #4]
 80005aa:	18d4      	adds	r4, r2, r3
 80005ac:	4608      	mov	r0, r1
 80005ae:	f7ff fe45 	bl	800023c <nrf24_ReadReg>
 80005b2:	4603      	mov	r3, r0
 80005b4:	7023      	strb	r3, [r4, #0]
	for (int i=0; i<10; i++)
 80005b6:	68fb      	ldr	r3, [r7, #12]
 80005b8:	3301      	adds	r3, #1
 80005ba:	60fb      	str	r3, [r7, #12]
 80005bc:	68fb      	ldr	r3, [r7, #12]
 80005be:	2b09      	cmp	r3, #9
 80005c0:	ddef      	ble.n	80005a2 <NRF24_ReadAll+0xe>
	}

	nrf24_ReadReg_Multi(RX_ADDR_P0, (data+10), 5);
 80005c2:	687b      	ldr	r3, [r7, #4]
 80005c4:	330a      	adds	r3, #10
 80005c6:	2205      	movs	r2, #5
 80005c8:	4619      	mov	r1, r3
 80005ca:	200a      	movs	r0, #10
 80005cc:	f7ff fe56 	bl	800027c <nrf24_ReadReg_Multi>

	nrf24_ReadReg_Multi(RX_ADDR_P1, (data+15), 5);
 80005d0:	687b      	ldr	r3, [r7, #4]
 80005d2:	330f      	adds	r3, #15
 80005d4:	2205      	movs	r2, #5
 80005d6:	4619      	mov	r1, r3
 80005d8:	200b      	movs	r0, #11
 80005da:	f7ff fe4f 	bl	800027c <nrf24_ReadReg_Multi>

	*(data+20) = nrf24_ReadReg(RX_ADDR_P2);
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	f103 0414 	add.w	r4, r3, #20
 80005e4:	200c      	movs	r0, #12
 80005e6:	f7ff fe29 	bl	800023c <nrf24_ReadReg>
 80005ea:	4603      	mov	r3, r0
 80005ec:	7023      	strb	r3, [r4, #0]
	*(data+21) = nrf24_ReadReg(RX_ADDR_P3);
 80005ee:	687b      	ldr	r3, [r7, #4]
 80005f0:	f103 0415 	add.w	r4, r3, #21
 80005f4:	200d      	movs	r0, #13
 80005f6:	f7ff fe21 	bl	800023c <nrf24_ReadReg>
 80005fa:	4603      	mov	r3, r0
 80005fc:	7023      	strb	r3, [r4, #0]
	*(data+22) = nrf24_ReadReg(RX_ADDR_P4);
 80005fe:	687b      	ldr	r3, [r7, #4]
 8000600:	f103 0416 	add.w	r4, r3, #22
 8000604:	200e      	movs	r0, #14
 8000606:	f7ff fe19 	bl	800023c <nrf24_ReadReg>
 800060a:	4603      	mov	r3, r0
 800060c:	7023      	strb	r3, [r4, #0]
	*(data+23) = nrf24_ReadReg(RX_ADDR_P5);
 800060e:	687b      	ldr	r3, [r7, #4]
 8000610:	f103 0417 	add.w	r4, r3, #23
 8000614:	200f      	movs	r0, #15
 8000616:	f7ff fe11 	bl	800023c <nrf24_ReadReg>
 800061a:	4603      	mov	r3, r0
 800061c:	7023      	strb	r3, [r4, #0]

	nrf24_ReadReg_Multi(RX_ADDR_P0, (data+24), 5);
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	3318      	adds	r3, #24
 8000622:	2205      	movs	r2, #5
 8000624:	4619      	mov	r1, r3
 8000626:	200a      	movs	r0, #10
 8000628:	f7ff fe28 	bl	800027c <nrf24_ReadReg_Multi>

	for (int i=29; i<38; i++)
 800062c:	231d      	movs	r3, #29
 800062e:	60bb      	str	r3, [r7, #8]
 8000630:	e00e      	b.n	8000650 <NRF24_ReadAll+0xbc>
	{
		*(data+i) = nrf24_ReadReg(i-12);
 8000632:	68bb      	ldr	r3, [r7, #8]
 8000634:	b2db      	uxtb	r3, r3
 8000636:	3b0c      	subs	r3, #12
 8000638:	b2d9      	uxtb	r1, r3
 800063a:	68bb      	ldr	r3, [r7, #8]
 800063c:	687a      	ldr	r2, [r7, #4]
 800063e:	18d4      	adds	r4, r2, r3
 8000640:	4608      	mov	r0, r1
 8000642:	f7ff fdfb 	bl	800023c <nrf24_ReadReg>
 8000646:	4603      	mov	r3, r0
 8000648:	7023      	strb	r3, [r4, #0]
	for (int i=29; i<38; i++)
 800064a:	68bb      	ldr	r3, [r7, #8]
 800064c:	3301      	adds	r3, #1
 800064e:	60bb      	str	r3, [r7, #8]
 8000650:	68bb      	ldr	r3, [r7, #8]
 8000652:	2b25      	cmp	r3, #37	; 0x25
 8000654:	dded      	ble.n	8000632 <NRF24_ReadAll+0x9e>
	}

}
 8000656:	bf00      	nop
 8000658:	bf00      	nop
 800065a:	3714      	adds	r7, #20
 800065c:	46bd      	mov	sp, r7
 800065e:	bd90      	pop	{r4, r7, pc}

08000660 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000664:	f000 fa3e 	bl	8000ae4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000668:	f000 f82c 	bl	80006c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800066c:	f000 f8ca 	bl	8000804 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000670:	f000 f868 	bl	8000744 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8000674:	f000 f89c 	bl	80007b0 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  NRF24_Init();
 8000678:	f7ff fedc 	bl	8000434 <NRF24_Init>

  NRF24_RxMode(RxAddress, 10);
 800067c:	210a      	movs	r1, #10
 800067e:	480d      	ldr	r0, [pc, #52]	; (80006b4 <main+0x54>)
 8000680:	f7ff feff 	bl	8000482 <NRF24_RxMode>

  /* USER CODE END 2 */
  NRF24_ReadAll(data);
 8000684:	480c      	ldr	r0, [pc, #48]	; (80006b8 <main+0x58>)
 8000686:	f7ff ff85 	bl	8000594 <NRF24_ReadAll>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, 0 );
 800068a:	2200      	movs	r2, #0
 800068c:	2102      	movs	r1, #2
 800068e:	480b      	ldr	r0, [pc, #44]	; (80006bc <main+0x5c>)
 8000690:	f000 fd0e 	bl	80010b0 <HAL_GPIO_WritePin>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  if (isDataAvailable(2) == 1)
 8000694:	2002      	movs	r0, #2
 8000696:	f7ff ff33 	bl	8000500 <isDataAvailable>
 800069a:	4603      	mov	r3, r0
 800069c:	2b01      	cmp	r3, #1
 800069e:	d1f9      	bne.n	8000694 <main+0x34>
	  	  {
	  		  NRF24_Receive(RxData);
 80006a0:	4807      	ldr	r0, [pc, #28]	; (80006c0 <main+0x60>)
 80006a2:	f7ff ff4d 	bl	8000540 <NRF24_Receive>
	  		 // HAL_UART_Transmit(&huart2, RxData, strlen((char *)RxData), 1000);
	  		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, 1);
 80006a6:	2201      	movs	r2, #1
 80006a8:	2102      	movs	r1, #2
 80006aa:	4804      	ldr	r0, [pc, #16]	; (80006bc <main+0x5c>)
 80006ac:	f000 fd00 	bl	80010b0 <HAL_GPIO_WritePin>
	  if (isDataAvailable(2) == 1)
 80006b0:	e7f0      	b.n	8000694 <main+0x34>
 80006b2:	bf00      	nop
 80006b4:	20000000 	.word	0x20000000
 80006b8:	200000f0 	.word	0x200000f0
 80006bc:	40010c00 	.word	0x40010c00
 80006c0:	200000d0 	.word	0x200000d0

080006c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b090      	sub	sp, #64	; 0x40
 80006c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006ca:	f107 0318 	add.w	r3, r7, #24
 80006ce:	2228      	movs	r2, #40	; 0x28
 80006d0:	2100      	movs	r1, #0
 80006d2:	4618      	mov	r0, r3
 80006d4:	f001 ff9e 	bl	8002614 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006d8:	1d3b      	adds	r3, r7, #4
 80006da:	2200      	movs	r2, #0
 80006dc:	601a      	str	r2, [r3, #0]
 80006de:	605a      	str	r2, [r3, #4]
 80006e0:	609a      	str	r2, [r3, #8]
 80006e2:	60da      	str	r2, [r3, #12]
 80006e4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006e6:	2302      	movs	r3, #2
 80006e8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006ea:	2301      	movs	r3, #1
 80006ec:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006ee:	2310      	movs	r3, #16
 80006f0:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006f2:	2302      	movs	r3, #2
 80006f4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 80006f6:	2300      	movs	r3, #0
 80006f8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL2;
 80006fa:	2300      	movs	r3, #0
 80006fc:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006fe:	f107 0318 	add.w	r3, r7, #24
 8000702:	4618      	mov	r0, r3
 8000704:	f000 fcec 	bl	80010e0 <HAL_RCC_OscConfig>
 8000708:	4603      	mov	r3, r0
 800070a:	2b00      	cmp	r3, #0
 800070c:	d001      	beq.n	8000712 <SystemClock_Config+0x4e>
  {
    Error_Handler();
 800070e:	f000 f8d7 	bl	80008c0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000712:	230f      	movs	r3, #15
 8000714:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000716:	2302      	movs	r3, #2
 8000718:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800071a:	2300      	movs	r3, #0
 800071c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800071e:	2300      	movs	r3, #0
 8000720:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000722:	2300      	movs	r3, #0
 8000724:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000726:	1d3b      	adds	r3, r7, #4
 8000728:	2100      	movs	r1, #0
 800072a:	4618      	mov	r0, r3
 800072c:	f000 ff5a 	bl	80015e4 <HAL_RCC_ClockConfig>
 8000730:	4603      	mov	r3, r0
 8000732:	2b00      	cmp	r3, #0
 8000734:	d001      	beq.n	800073a <SystemClock_Config+0x76>
  {
    Error_Handler();
 8000736:	f000 f8c3 	bl	80008c0 <Error_Handler>
  }
}
 800073a:	bf00      	nop
 800073c:	3740      	adds	r7, #64	; 0x40
 800073e:	46bd      	mov	sp, r7
 8000740:	bd80      	pop	{r7, pc}
	...

08000744 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000748:	4b17      	ldr	r3, [pc, #92]	; (80007a8 <MX_SPI1_Init+0x64>)
 800074a:	4a18      	ldr	r2, [pc, #96]	; (80007ac <MX_SPI1_Init+0x68>)
 800074c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800074e:	4b16      	ldr	r3, [pc, #88]	; (80007a8 <MX_SPI1_Init+0x64>)
 8000750:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000754:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000756:	4b14      	ldr	r3, [pc, #80]	; (80007a8 <MX_SPI1_Init+0x64>)
 8000758:	2200      	movs	r2, #0
 800075a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800075c:	4b12      	ldr	r3, [pc, #72]	; (80007a8 <MX_SPI1_Init+0x64>)
 800075e:	2200      	movs	r2, #0
 8000760:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000762:	4b11      	ldr	r3, [pc, #68]	; (80007a8 <MX_SPI1_Init+0x64>)
 8000764:	2200      	movs	r2, #0
 8000766:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000768:	4b0f      	ldr	r3, [pc, #60]	; (80007a8 <MX_SPI1_Init+0x64>)
 800076a:	2200      	movs	r2, #0
 800076c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800076e:	4b0e      	ldr	r3, [pc, #56]	; (80007a8 <MX_SPI1_Init+0x64>)
 8000770:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000774:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000776:	4b0c      	ldr	r3, [pc, #48]	; (80007a8 <MX_SPI1_Init+0x64>)
 8000778:	2218      	movs	r2, #24
 800077a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800077c:	4b0a      	ldr	r3, [pc, #40]	; (80007a8 <MX_SPI1_Init+0x64>)
 800077e:	2200      	movs	r2, #0
 8000780:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000782:	4b09      	ldr	r3, [pc, #36]	; (80007a8 <MX_SPI1_Init+0x64>)
 8000784:	2200      	movs	r2, #0
 8000786:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000788:	4b07      	ldr	r3, [pc, #28]	; (80007a8 <MX_SPI1_Init+0x64>)
 800078a:	2200      	movs	r2, #0
 800078c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800078e:	4b06      	ldr	r3, [pc, #24]	; (80007a8 <MX_SPI1_Init+0x64>)
 8000790:	220a      	movs	r2, #10
 8000792:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000794:	4804      	ldr	r0, [pc, #16]	; (80007a8 <MX_SPI1_Init+0x64>)
 8000796:	f001 f8b3 	bl	8001900 <HAL_SPI_Init>
 800079a:	4603      	mov	r3, r0
 800079c:	2b00      	cmp	r3, #0
 800079e:	d001      	beq.n	80007a4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80007a0:	f000 f88e 	bl	80008c0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80007a4:	bf00      	nop
 80007a6:	bd80      	pop	{r7, pc}
 80007a8:	20000030 	.word	0x20000030
 80007ac:	40013000 	.word	0x40013000

080007b0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80007b4:	4b11      	ldr	r3, [pc, #68]	; (80007fc <MX_USART1_UART_Init+0x4c>)
 80007b6:	4a12      	ldr	r2, [pc, #72]	; (8000800 <MX_USART1_UART_Init+0x50>)
 80007b8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80007ba:	4b10      	ldr	r3, [pc, #64]	; (80007fc <MX_USART1_UART_Init+0x4c>)
 80007bc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80007c0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80007c2:	4b0e      	ldr	r3, [pc, #56]	; (80007fc <MX_USART1_UART_Init+0x4c>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80007c8:	4b0c      	ldr	r3, [pc, #48]	; (80007fc <MX_USART1_UART_Init+0x4c>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80007ce:	4b0b      	ldr	r3, [pc, #44]	; (80007fc <MX_USART1_UART_Init+0x4c>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80007d4:	4b09      	ldr	r3, [pc, #36]	; (80007fc <MX_USART1_UART_Init+0x4c>)
 80007d6:	220c      	movs	r2, #12
 80007d8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007da:	4b08      	ldr	r3, [pc, #32]	; (80007fc <MX_USART1_UART_Init+0x4c>)
 80007dc:	2200      	movs	r2, #0
 80007de:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80007e0:	4b06      	ldr	r3, [pc, #24]	; (80007fc <MX_USART1_UART_Init+0x4c>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80007e6:	4805      	ldr	r0, [pc, #20]	; (80007fc <MX_USART1_UART_Init+0x4c>)
 80007e8:	f001 fe12 	bl	8002410 <HAL_UART_Init>
 80007ec:	4603      	mov	r3, r0
 80007ee:	2b00      	cmp	r3, #0
 80007f0:	d001      	beq.n	80007f6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80007f2:	f000 f865 	bl	80008c0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80007f6:	bf00      	nop
 80007f8:	bd80      	pop	{r7, pc}
 80007fa:	bf00      	nop
 80007fc:	20000088 	.word	0x20000088
 8000800:	40013800 	.word	0x40013800

08000804 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	b088      	sub	sp, #32
 8000808:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800080a:	f107 0310 	add.w	r3, r7, #16
 800080e:	2200      	movs	r2, #0
 8000810:	601a      	str	r2, [r3, #0]
 8000812:	605a      	str	r2, [r3, #4]
 8000814:	609a      	str	r2, [r3, #8]
 8000816:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000818:	4b26      	ldr	r3, [pc, #152]	; (80008b4 <MX_GPIO_Init+0xb0>)
 800081a:	699b      	ldr	r3, [r3, #24]
 800081c:	4a25      	ldr	r2, [pc, #148]	; (80008b4 <MX_GPIO_Init+0xb0>)
 800081e:	f043 0320 	orr.w	r3, r3, #32
 8000822:	6193      	str	r3, [r2, #24]
 8000824:	4b23      	ldr	r3, [pc, #140]	; (80008b4 <MX_GPIO_Init+0xb0>)
 8000826:	699b      	ldr	r3, [r3, #24]
 8000828:	f003 0320 	and.w	r3, r3, #32
 800082c:	60fb      	str	r3, [r7, #12]
 800082e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000830:	4b20      	ldr	r3, [pc, #128]	; (80008b4 <MX_GPIO_Init+0xb0>)
 8000832:	699b      	ldr	r3, [r3, #24]
 8000834:	4a1f      	ldr	r2, [pc, #124]	; (80008b4 <MX_GPIO_Init+0xb0>)
 8000836:	f043 0304 	orr.w	r3, r3, #4
 800083a:	6193      	str	r3, [r2, #24]
 800083c:	4b1d      	ldr	r3, [pc, #116]	; (80008b4 <MX_GPIO_Init+0xb0>)
 800083e:	699b      	ldr	r3, [r3, #24]
 8000840:	f003 0304 	and.w	r3, r3, #4
 8000844:	60bb      	str	r3, [r7, #8]
 8000846:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000848:	4b1a      	ldr	r3, [pc, #104]	; (80008b4 <MX_GPIO_Init+0xb0>)
 800084a:	699b      	ldr	r3, [r3, #24]
 800084c:	4a19      	ldr	r2, [pc, #100]	; (80008b4 <MX_GPIO_Init+0xb0>)
 800084e:	f043 0308 	orr.w	r3, r3, #8
 8000852:	6193      	str	r3, [r2, #24]
 8000854:	4b17      	ldr	r3, [pc, #92]	; (80008b4 <MX_GPIO_Init+0xb0>)
 8000856:	699b      	ldr	r3, [r3, #24]
 8000858:	f003 0308 	and.w	r3, r3, #8
 800085c:	607b      	str	r3, [r7, #4]
 800085e:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2|GPIO_PIN_3, GPIO_PIN_RESET);
 8000860:	2200      	movs	r2, #0
 8000862:	210c      	movs	r1, #12
 8000864:	4814      	ldr	r0, [pc, #80]	; (80008b8 <MX_GPIO_Init+0xb4>)
 8000866:	f000 fc23 	bl	80010b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1|GPIO_PIN_2, GPIO_PIN_RESET);
 800086a:	2200      	movs	r2, #0
 800086c:	2106      	movs	r1, #6
 800086e:	4813      	ldr	r0, [pc, #76]	; (80008bc <MX_GPIO_Init+0xb8>)
 8000870:	f000 fc1e 	bl	80010b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA2 PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000874:	230c      	movs	r3, #12
 8000876:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000878:	2301      	movs	r3, #1
 800087a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800087c:	2300      	movs	r3, #0
 800087e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000880:	2302      	movs	r3, #2
 8000882:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000884:	f107 0310 	add.w	r3, r7, #16
 8000888:	4619      	mov	r1, r3
 800088a:	480b      	ldr	r0, [pc, #44]	; (80008b8 <MX_GPIO_Init+0xb4>)
 800088c:	f000 fa94 	bl	8000db8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 8000890:	2306      	movs	r3, #6
 8000892:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000894:	2301      	movs	r3, #1
 8000896:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000898:	2300      	movs	r3, #0
 800089a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800089c:	2302      	movs	r3, #2
 800089e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008a0:	f107 0310 	add.w	r3, r7, #16
 80008a4:	4619      	mov	r1, r3
 80008a6:	4805      	ldr	r0, [pc, #20]	; (80008bc <MX_GPIO_Init+0xb8>)
 80008a8:	f000 fa86 	bl	8000db8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80008ac:	bf00      	nop
 80008ae:	3720      	adds	r7, #32
 80008b0:	46bd      	mov	sp, r7
 80008b2:	bd80      	pop	{r7, pc}
 80008b4:	40021000 	.word	0x40021000
 80008b8:	40010800 	.word	0x40010800
 80008bc:	40010c00 	.word	0x40010c00

080008c0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008c0:	b480      	push	{r7}
 80008c2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008c4:	b672      	cpsid	i
}
 80008c6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008c8:	e7fe      	b.n	80008c8 <Error_Handler+0x8>
	...

080008cc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008cc:	b480      	push	{r7}
 80008ce:	b083      	sub	sp, #12
 80008d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80008d2:	4b0e      	ldr	r3, [pc, #56]	; (800090c <HAL_MspInit+0x40>)
 80008d4:	699b      	ldr	r3, [r3, #24]
 80008d6:	4a0d      	ldr	r2, [pc, #52]	; (800090c <HAL_MspInit+0x40>)
 80008d8:	f043 0301 	orr.w	r3, r3, #1
 80008dc:	6193      	str	r3, [r2, #24]
 80008de:	4b0b      	ldr	r3, [pc, #44]	; (800090c <HAL_MspInit+0x40>)
 80008e0:	699b      	ldr	r3, [r3, #24]
 80008e2:	f003 0301 	and.w	r3, r3, #1
 80008e6:	607b      	str	r3, [r7, #4]
 80008e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008ea:	4b08      	ldr	r3, [pc, #32]	; (800090c <HAL_MspInit+0x40>)
 80008ec:	69db      	ldr	r3, [r3, #28]
 80008ee:	4a07      	ldr	r2, [pc, #28]	; (800090c <HAL_MspInit+0x40>)
 80008f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008f4:	61d3      	str	r3, [r2, #28]
 80008f6:	4b05      	ldr	r3, [pc, #20]	; (800090c <HAL_MspInit+0x40>)
 80008f8:	69db      	ldr	r3, [r3, #28]
 80008fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008fe:	603b      	str	r3, [r7, #0]
 8000900:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000902:	bf00      	nop
 8000904:	370c      	adds	r7, #12
 8000906:	46bd      	mov	sp, r7
 8000908:	bc80      	pop	{r7}
 800090a:	4770      	bx	lr
 800090c:	40021000 	.word	0x40021000

08000910 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	b088      	sub	sp, #32
 8000914:	af00      	add	r7, sp, #0
 8000916:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000918:	f107 0310 	add.w	r3, r7, #16
 800091c:	2200      	movs	r2, #0
 800091e:	601a      	str	r2, [r3, #0]
 8000920:	605a      	str	r2, [r3, #4]
 8000922:	609a      	str	r2, [r3, #8]
 8000924:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	681b      	ldr	r3, [r3, #0]
 800092a:	4a1b      	ldr	r2, [pc, #108]	; (8000998 <HAL_SPI_MspInit+0x88>)
 800092c:	4293      	cmp	r3, r2
 800092e:	d12f      	bne.n	8000990 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000930:	4b1a      	ldr	r3, [pc, #104]	; (800099c <HAL_SPI_MspInit+0x8c>)
 8000932:	699b      	ldr	r3, [r3, #24]
 8000934:	4a19      	ldr	r2, [pc, #100]	; (800099c <HAL_SPI_MspInit+0x8c>)
 8000936:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800093a:	6193      	str	r3, [r2, #24]
 800093c:	4b17      	ldr	r3, [pc, #92]	; (800099c <HAL_SPI_MspInit+0x8c>)
 800093e:	699b      	ldr	r3, [r3, #24]
 8000940:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000944:	60fb      	str	r3, [r7, #12]
 8000946:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000948:	4b14      	ldr	r3, [pc, #80]	; (800099c <HAL_SPI_MspInit+0x8c>)
 800094a:	699b      	ldr	r3, [r3, #24]
 800094c:	4a13      	ldr	r2, [pc, #76]	; (800099c <HAL_SPI_MspInit+0x8c>)
 800094e:	f043 0304 	orr.w	r3, r3, #4
 8000952:	6193      	str	r3, [r2, #24]
 8000954:	4b11      	ldr	r3, [pc, #68]	; (800099c <HAL_SPI_MspInit+0x8c>)
 8000956:	699b      	ldr	r3, [r3, #24]
 8000958:	f003 0304 	and.w	r3, r3, #4
 800095c:	60bb      	str	r3, [r7, #8]
 800095e:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8000960:	23a0      	movs	r3, #160	; 0xa0
 8000962:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000964:	2302      	movs	r3, #2
 8000966:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000968:	2303      	movs	r3, #3
 800096a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800096c:	f107 0310 	add.w	r3, r7, #16
 8000970:	4619      	mov	r1, r3
 8000972:	480b      	ldr	r0, [pc, #44]	; (80009a0 <HAL_SPI_MspInit+0x90>)
 8000974:	f000 fa20 	bl	8000db8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000978:	2340      	movs	r3, #64	; 0x40
 800097a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800097c:	2300      	movs	r3, #0
 800097e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000980:	2300      	movs	r3, #0
 8000982:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000984:	f107 0310 	add.w	r3, r7, #16
 8000988:	4619      	mov	r1, r3
 800098a:	4805      	ldr	r0, [pc, #20]	; (80009a0 <HAL_SPI_MspInit+0x90>)
 800098c:	f000 fa14 	bl	8000db8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000990:	bf00      	nop
 8000992:	3720      	adds	r7, #32
 8000994:	46bd      	mov	sp, r7
 8000996:	bd80      	pop	{r7, pc}
 8000998:	40013000 	.word	0x40013000
 800099c:	40021000 	.word	0x40021000
 80009a0:	40010800 	.word	0x40010800

080009a4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b088      	sub	sp, #32
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009ac:	f107 0310 	add.w	r3, r7, #16
 80009b0:	2200      	movs	r2, #0
 80009b2:	601a      	str	r2, [r3, #0]
 80009b4:	605a      	str	r2, [r3, #4]
 80009b6:	609a      	str	r2, [r3, #8]
 80009b8:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	681b      	ldr	r3, [r3, #0]
 80009be:	4a1c      	ldr	r2, [pc, #112]	; (8000a30 <HAL_UART_MspInit+0x8c>)
 80009c0:	4293      	cmp	r3, r2
 80009c2:	d131      	bne.n	8000a28 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80009c4:	4b1b      	ldr	r3, [pc, #108]	; (8000a34 <HAL_UART_MspInit+0x90>)
 80009c6:	699b      	ldr	r3, [r3, #24]
 80009c8:	4a1a      	ldr	r2, [pc, #104]	; (8000a34 <HAL_UART_MspInit+0x90>)
 80009ca:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009ce:	6193      	str	r3, [r2, #24]
 80009d0:	4b18      	ldr	r3, [pc, #96]	; (8000a34 <HAL_UART_MspInit+0x90>)
 80009d2:	699b      	ldr	r3, [r3, #24]
 80009d4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009d8:	60fb      	str	r3, [r7, #12]
 80009da:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009dc:	4b15      	ldr	r3, [pc, #84]	; (8000a34 <HAL_UART_MspInit+0x90>)
 80009de:	699b      	ldr	r3, [r3, #24]
 80009e0:	4a14      	ldr	r2, [pc, #80]	; (8000a34 <HAL_UART_MspInit+0x90>)
 80009e2:	f043 0304 	orr.w	r3, r3, #4
 80009e6:	6193      	str	r3, [r2, #24]
 80009e8:	4b12      	ldr	r3, [pc, #72]	; (8000a34 <HAL_UART_MspInit+0x90>)
 80009ea:	699b      	ldr	r3, [r3, #24]
 80009ec:	f003 0304 	and.w	r3, r3, #4
 80009f0:	60bb      	str	r3, [r7, #8]
 80009f2:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80009f4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80009f8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009fa:	2302      	movs	r3, #2
 80009fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80009fe:	2303      	movs	r3, #3
 8000a00:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a02:	f107 0310 	add.w	r3, r7, #16
 8000a06:	4619      	mov	r1, r3
 8000a08:	480b      	ldr	r0, [pc, #44]	; (8000a38 <HAL_UART_MspInit+0x94>)
 8000a0a:	f000 f9d5 	bl	8000db8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000a0e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000a12:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a14:	2300      	movs	r3, #0
 8000a16:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a18:	2300      	movs	r3, #0
 8000a1a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a1c:	f107 0310 	add.w	r3, r7, #16
 8000a20:	4619      	mov	r1, r3
 8000a22:	4805      	ldr	r0, [pc, #20]	; (8000a38 <HAL_UART_MspInit+0x94>)
 8000a24:	f000 f9c8 	bl	8000db8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000a28:	bf00      	nop
 8000a2a:	3720      	adds	r7, #32
 8000a2c:	46bd      	mov	sp, r7
 8000a2e:	bd80      	pop	{r7, pc}
 8000a30:	40013800 	.word	0x40013800
 8000a34:	40021000 	.word	0x40021000
 8000a38:	40010800 	.word	0x40010800

08000a3c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a3c:	b480      	push	{r7}
 8000a3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a40:	e7fe      	b.n	8000a40 <NMI_Handler+0x4>

08000a42 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a42:	b480      	push	{r7}
 8000a44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a46:	e7fe      	b.n	8000a46 <HardFault_Handler+0x4>

08000a48 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a48:	b480      	push	{r7}
 8000a4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a4c:	e7fe      	b.n	8000a4c <MemManage_Handler+0x4>

08000a4e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a4e:	b480      	push	{r7}
 8000a50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a52:	e7fe      	b.n	8000a52 <BusFault_Handler+0x4>

08000a54 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a54:	b480      	push	{r7}
 8000a56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a58:	e7fe      	b.n	8000a58 <UsageFault_Handler+0x4>

08000a5a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a5a:	b480      	push	{r7}
 8000a5c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a5e:	bf00      	nop
 8000a60:	46bd      	mov	sp, r7
 8000a62:	bc80      	pop	{r7}
 8000a64:	4770      	bx	lr

08000a66 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a66:	b480      	push	{r7}
 8000a68:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a6a:	bf00      	nop
 8000a6c:	46bd      	mov	sp, r7
 8000a6e:	bc80      	pop	{r7}
 8000a70:	4770      	bx	lr

08000a72 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a72:	b480      	push	{r7}
 8000a74:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a76:	bf00      	nop
 8000a78:	46bd      	mov	sp, r7
 8000a7a:	bc80      	pop	{r7}
 8000a7c:	4770      	bx	lr

08000a7e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a7e:	b580      	push	{r7, lr}
 8000a80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a82:	f000 f875 	bl	8000b70 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a86:	bf00      	nop
 8000a88:	bd80      	pop	{r7, pc}

08000a8a <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000a8a:	b480      	push	{r7}
 8000a8c:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a8e:	bf00      	nop
 8000a90:	46bd      	mov	sp, r7
 8000a92:	bc80      	pop	{r7}
 8000a94:	4770      	bx	lr
	...

08000a98 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000a98:	f7ff fff7 	bl	8000a8a <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a9c:	480b      	ldr	r0, [pc, #44]	; (8000acc <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000a9e:	490c      	ldr	r1, [pc, #48]	; (8000ad0 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000aa0:	4a0c      	ldr	r2, [pc, #48]	; (8000ad4 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000aa2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000aa4:	e002      	b.n	8000aac <LoopCopyDataInit>

08000aa6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000aa6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000aa8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000aaa:	3304      	adds	r3, #4

08000aac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000aac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000aae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ab0:	d3f9      	bcc.n	8000aa6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ab2:	4a09      	ldr	r2, [pc, #36]	; (8000ad8 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000ab4:	4c09      	ldr	r4, [pc, #36]	; (8000adc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000ab6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ab8:	e001      	b.n	8000abe <LoopFillZerobss>

08000aba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000aba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000abc:	3204      	adds	r2, #4

08000abe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000abe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ac0:	d3fb      	bcc.n	8000aba <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000ac2:	f001 fd83 	bl	80025cc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000ac6:	f7ff fdcb 	bl	8000660 <main>
  bx lr
 8000aca:	4770      	bx	lr
  ldr r0, =_sdata
 8000acc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ad0:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8000ad4:	08002680 	.word	0x08002680
  ldr r2, =_sbss
 8000ad8:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8000adc:	20000128 	.word	0x20000128

08000ae0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000ae0:	e7fe      	b.n	8000ae0 <ADC1_2_IRQHandler>
	...

08000ae4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ae8:	4b08      	ldr	r3, [pc, #32]	; (8000b0c <HAL_Init+0x28>)
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	4a07      	ldr	r2, [pc, #28]	; (8000b0c <HAL_Init+0x28>)
 8000aee:	f043 0310 	orr.w	r3, r3, #16
 8000af2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000af4:	2003      	movs	r0, #3
 8000af6:	f000 f92b 	bl	8000d50 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000afa:	200f      	movs	r0, #15
 8000afc:	f000 f808 	bl	8000b10 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b00:	f7ff fee4 	bl	80008cc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b04:	2300      	movs	r3, #0
}
 8000b06:	4618      	mov	r0, r3
 8000b08:	bd80      	pop	{r7, pc}
 8000b0a:	bf00      	nop
 8000b0c:	40022000 	.word	0x40022000

08000b10 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b082      	sub	sp, #8
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b18:	4b12      	ldr	r3, [pc, #72]	; (8000b64 <HAL_InitTick+0x54>)
 8000b1a:	681a      	ldr	r2, [r3, #0]
 8000b1c:	4b12      	ldr	r3, [pc, #72]	; (8000b68 <HAL_InitTick+0x58>)
 8000b1e:	781b      	ldrb	r3, [r3, #0]
 8000b20:	4619      	mov	r1, r3
 8000b22:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b26:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b2e:	4618      	mov	r0, r3
 8000b30:	f000 f935 	bl	8000d9e <HAL_SYSTICK_Config>
 8000b34:	4603      	mov	r3, r0
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d001      	beq.n	8000b3e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000b3a:	2301      	movs	r3, #1
 8000b3c:	e00e      	b.n	8000b5c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	2b0f      	cmp	r3, #15
 8000b42:	d80a      	bhi.n	8000b5a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b44:	2200      	movs	r2, #0
 8000b46:	6879      	ldr	r1, [r7, #4]
 8000b48:	f04f 30ff 	mov.w	r0, #4294967295
 8000b4c:	f000 f90b 	bl	8000d66 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b50:	4a06      	ldr	r2, [pc, #24]	; (8000b6c <HAL_InitTick+0x5c>)
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000b56:	2300      	movs	r3, #0
 8000b58:	e000      	b.n	8000b5c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000b5a:	2301      	movs	r3, #1
}
 8000b5c:	4618      	mov	r0, r3
 8000b5e:	3708      	adds	r7, #8
 8000b60:	46bd      	mov	sp, r7
 8000b62:	bd80      	pop	{r7, pc}
 8000b64:	20000008 	.word	0x20000008
 8000b68:	20000010 	.word	0x20000010
 8000b6c:	2000000c 	.word	0x2000000c

08000b70 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b70:	b480      	push	{r7}
 8000b72:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b74:	4b05      	ldr	r3, [pc, #20]	; (8000b8c <HAL_IncTick+0x1c>)
 8000b76:	781b      	ldrb	r3, [r3, #0]
 8000b78:	461a      	mov	r2, r3
 8000b7a:	4b05      	ldr	r3, [pc, #20]	; (8000b90 <HAL_IncTick+0x20>)
 8000b7c:	681b      	ldr	r3, [r3, #0]
 8000b7e:	4413      	add	r3, r2
 8000b80:	4a03      	ldr	r2, [pc, #12]	; (8000b90 <HAL_IncTick+0x20>)
 8000b82:	6013      	str	r3, [r2, #0]
}
 8000b84:	bf00      	nop
 8000b86:	46bd      	mov	sp, r7
 8000b88:	bc80      	pop	{r7}
 8000b8a:	4770      	bx	lr
 8000b8c:	20000010 	.word	0x20000010
 8000b90:	20000124 	.word	0x20000124

08000b94 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b94:	b480      	push	{r7}
 8000b96:	af00      	add	r7, sp, #0
  return uwTick;
 8000b98:	4b02      	ldr	r3, [pc, #8]	; (8000ba4 <HAL_GetTick+0x10>)
 8000b9a:	681b      	ldr	r3, [r3, #0]
}
 8000b9c:	4618      	mov	r0, r3
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	bc80      	pop	{r7}
 8000ba2:	4770      	bx	lr
 8000ba4:	20000124 	.word	0x20000124

08000ba8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b084      	sub	sp, #16
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000bb0:	f7ff fff0 	bl	8000b94 <HAL_GetTick>
 8000bb4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000bba:	68fb      	ldr	r3, [r7, #12]
 8000bbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000bc0:	d005      	beq.n	8000bce <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000bc2:	4b0a      	ldr	r3, [pc, #40]	; (8000bec <HAL_Delay+0x44>)
 8000bc4:	781b      	ldrb	r3, [r3, #0]
 8000bc6:	461a      	mov	r2, r3
 8000bc8:	68fb      	ldr	r3, [r7, #12]
 8000bca:	4413      	add	r3, r2
 8000bcc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000bce:	bf00      	nop
 8000bd0:	f7ff ffe0 	bl	8000b94 <HAL_GetTick>
 8000bd4:	4602      	mov	r2, r0
 8000bd6:	68bb      	ldr	r3, [r7, #8]
 8000bd8:	1ad3      	subs	r3, r2, r3
 8000bda:	68fa      	ldr	r2, [r7, #12]
 8000bdc:	429a      	cmp	r2, r3
 8000bde:	d8f7      	bhi.n	8000bd0 <HAL_Delay+0x28>
  {
  }
}
 8000be0:	bf00      	nop
 8000be2:	bf00      	nop
 8000be4:	3710      	adds	r7, #16
 8000be6:	46bd      	mov	sp, r7
 8000be8:	bd80      	pop	{r7, pc}
 8000bea:	bf00      	nop
 8000bec:	20000010 	.word	0x20000010

08000bf0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bf0:	b480      	push	{r7}
 8000bf2:	b085      	sub	sp, #20
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	f003 0307 	and.w	r3, r3, #7
 8000bfe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c00:	4b0c      	ldr	r3, [pc, #48]	; (8000c34 <__NVIC_SetPriorityGrouping+0x44>)
 8000c02:	68db      	ldr	r3, [r3, #12]
 8000c04:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c06:	68ba      	ldr	r2, [r7, #8]
 8000c08:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c0c:	4013      	ands	r3, r2
 8000c0e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000c10:	68fb      	ldr	r3, [r7, #12]
 8000c12:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c14:	68bb      	ldr	r3, [r7, #8]
 8000c16:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c18:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c1c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c20:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c22:	4a04      	ldr	r2, [pc, #16]	; (8000c34 <__NVIC_SetPriorityGrouping+0x44>)
 8000c24:	68bb      	ldr	r3, [r7, #8]
 8000c26:	60d3      	str	r3, [r2, #12]
}
 8000c28:	bf00      	nop
 8000c2a:	3714      	adds	r7, #20
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	bc80      	pop	{r7}
 8000c30:	4770      	bx	lr
 8000c32:	bf00      	nop
 8000c34:	e000ed00 	.word	0xe000ed00

08000c38 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c38:	b480      	push	{r7}
 8000c3a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c3c:	4b04      	ldr	r3, [pc, #16]	; (8000c50 <__NVIC_GetPriorityGrouping+0x18>)
 8000c3e:	68db      	ldr	r3, [r3, #12]
 8000c40:	0a1b      	lsrs	r3, r3, #8
 8000c42:	f003 0307 	and.w	r3, r3, #7
}
 8000c46:	4618      	mov	r0, r3
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	bc80      	pop	{r7}
 8000c4c:	4770      	bx	lr
 8000c4e:	bf00      	nop
 8000c50:	e000ed00 	.word	0xe000ed00

08000c54 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c54:	b480      	push	{r7}
 8000c56:	b083      	sub	sp, #12
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	4603      	mov	r3, r0
 8000c5c:	6039      	str	r1, [r7, #0]
 8000c5e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	db0a      	blt.n	8000c7e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c68:	683b      	ldr	r3, [r7, #0]
 8000c6a:	b2da      	uxtb	r2, r3
 8000c6c:	490c      	ldr	r1, [pc, #48]	; (8000ca0 <__NVIC_SetPriority+0x4c>)
 8000c6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c72:	0112      	lsls	r2, r2, #4
 8000c74:	b2d2      	uxtb	r2, r2
 8000c76:	440b      	add	r3, r1
 8000c78:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c7c:	e00a      	b.n	8000c94 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c7e:	683b      	ldr	r3, [r7, #0]
 8000c80:	b2da      	uxtb	r2, r3
 8000c82:	4908      	ldr	r1, [pc, #32]	; (8000ca4 <__NVIC_SetPriority+0x50>)
 8000c84:	79fb      	ldrb	r3, [r7, #7]
 8000c86:	f003 030f 	and.w	r3, r3, #15
 8000c8a:	3b04      	subs	r3, #4
 8000c8c:	0112      	lsls	r2, r2, #4
 8000c8e:	b2d2      	uxtb	r2, r2
 8000c90:	440b      	add	r3, r1
 8000c92:	761a      	strb	r2, [r3, #24]
}
 8000c94:	bf00      	nop
 8000c96:	370c      	adds	r7, #12
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	bc80      	pop	{r7}
 8000c9c:	4770      	bx	lr
 8000c9e:	bf00      	nop
 8000ca0:	e000e100 	.word	0xe000e100
 8000ca4:	e000ed00 	.word	0xe000ed00

08000ca8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	b089      	sub	sp, #36	; 0x24
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	60f8      	str	r0, [r7, #12]
 8000cb0:	60b9      	str	r1, [r7, #8]
 8000cb2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000cb4:	68fb      	ldr	r3, [r7, #12]
 8000cb6:	f003 0307 	and.w	r3, r3, #7
 8000cba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000cbc:	69fb      	ldr	r3, [r7, #28]
 8000cbe:	f1c3 0307 	rsb	r3, r3, #7
 8000cc2:	2b04      	cmp	r3, #4
 8000cc4:	bf28      	it	cs
 8000cc6:	2304      	movcs	r3, #4
 8000cc8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000cca:	69fb      	ldr	r3, [r7, #28]
 8000ccc:	3304      	adds	r3, #4
 8000cce:	2b06      	cmp	r3, #6
 8000cd0:	d902      	bls.n	8000cd8 <NVIC_EncodePriority+0x30>
 8000cd2:	69fb      	ldr	r3, [r7, #28]
 8000cd4:	3b03      	subs	r3, #3
 8000cd6:	e000      	b.n	8000cda <NVIC_EncodePriority+0x32>
 8000cd8:	2300      	movs	r3, #0
 8000cda:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cdc:	f04f 32ff 	mov.w	r2, #4294967295
 8000ce0:	69bb      	ldr	r3, [r7, #24]
 8000ce2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ce6:	43da      	mvns	r2, r3
 8000ce8:	68bb      	ldr	r3, [r7, #8]
 8000cea:	401a      	ands	r2, r3
 8000cec:	697b      	ldr	r3, [r7, #20]
 8000cee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000cf0:	f04f 31ff 	mov.w	r1, #4294967295
 8000cf4:	697b      	ldr	r3, [r7, #20]
 8000cf6:	fa01 f303 	lsl.w	r3, r1, r3
 8000cfa:	43d9      	mvns	r1, r3
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d00:	4313      	orrs	r3, r2
         );
}
 8000d02:	4618      	mov	r0, r3
 8000d04:	3724      	adds	r7, #36	; 0x24
 8000d06:	46bd      	mov	sp, r7
 8000d08:	bc80      	pop	{r7}
 8000d0a:	4770      	bx	lr

08000d0c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b082      	sub	sp, #8
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	3b01      	subs	r3, #1
 8000d18:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000d1c:	d301      	bcc.n	8000d22 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d1e:	2301      	movs	r3, #1
 8000d20:	e00f      	b.n	8000d42 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d22:	4a0a      	ldr	r2, [pc, #40]	; (8000d4c <SysTick_Config+0x40>)
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	3b01      	subs	r3, #1
 8000d28:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d2a:	210f      	movs	r1, #15
 8000d2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000d30:	f7ff ff90 	bl	8000c54 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d34:	4b05      	ldr	r3, [pc, #20]	; (8000d4c <SysTick_Config+0x40>)
 8000d36:	2200      	movs	r2, #0
 8000d38:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d3a:	4b04      	ldr	r3, [pc, #16]	; (8000d4c <SysTick_Config+0x40>)
 8000d3c:	2207      	movs	r2, #7
 8000d3e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d40:	2300      	movs	r3, #0
}
 8000d42:	4618      	mov	r0, r3
 8000d44:	3708      	adds	r7, #8
 8000d46:	46bd      	mov	sp, r7
 8000d48:	bd80      	pop	{r7, pc}
 8000d4a:	bf00      	nop
 8000d4c:	e000e010 	.word	0xe000e010

08000d50 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b082      	sub	sp, #8
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d58:	6878      	ldr	r0, [r7, #4]
 8000d5a:	f7ff ff49 	bl	8000bf0 <__NVIC_SetPriorityGrouping>
}
 8000d5e:	bf00      	nop
 8000d60:	3708      	adds	r7, #8
 8000d62:	46bd      	mov	sp, r7
 8000d64:	bd80      	pop	{r7, pc}

08000d66 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d66:	b580      	push	{r7, lr}
 8000d68:	b086      	sub	sp, #24
 8000d6a:	af00      	add	r7, sp, #0
 8000d6c:	4603      	mov	r3, r0
 8000d6e:	60b9      	str	r1, [r7, #8]
 8000d70:	607a      	str	r2, [r7, #4]
 8000d72:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d74:	2300      	movs	r3, #0
 8000d76:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d78:	f7ff ff5e 	bl	8000c38 <__NVIC_GetPriorityGrouping>
 8000d7c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d7e:	687a      	ldr	r2, [r7, #4]
 8000d80:	68b9      	ldr	r1, [r7, #8]
 8000d82:	6978      	ldr	r0, [r7, #20]
 8000d84:	f7ff ff90 	bl	8000ca8 <NVIC_EncodePriority>
 8000d88:	4602      	mov	r2, r0
 8000d8a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d8e:	4611      	mov	r1, r2
 8000d90:	4618      	mov	r0, r3
 8000d92:	f7ff ff5f 	bl	8000c54 <__NVIC_SetPriority>
}
 8000d96:	bf00      	nop
 8000d98:	3718      	adds	r7, #24
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	bd80      	pop	{r7, pc}

08000d9e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d9e:	b580      	push	{r7, lr}
 8000da0:	b082      	sub	sp, #8
 8000da2:	af00      	add	r7, sp, #0
 8000da4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000da6:	6878      	ldr	r0, [r7, #4]
 8000da8:	f7ff ffb0 	bl	8000d0c <SysTick_Config>
 8000dac:	4603      	mov	r3, r0
}
 8000dae:	4618      	mov	r0, r3
 8000db0:	3708      	adds	r7, #8
 8000db2:	46bd      	mov	sp, r7
 8000db4:	bd80      	pop	{r7, pc}
	...

08000db8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000db8:	b480      	push	{r7}
 8000dba:	b08b      	sub	sp, #44	; 0x2c
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	6078      	str	r0, [r7, #4]
 8000dc0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000dca:	e161      	b.n	8001090 <HAL_GPIO_Init+0x2d8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000dcc:	2201      	movs	r2, #1
 8000dce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dd0:	fa02 f303 	lsl.w	r3, r2, r3
 8000dd4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000dd6:	683b      	ldr	r3, [r7, #0]
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	69fa      	ldr	r2, [r7, #28]
 8000ddc:	4013      	ands	r3, r2
 8000dde:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000de0:	69ba      	ldr	r2, [r7, #24]
 8000de2:	69fb      	ldr	r3, [r7, #28]
 8000de4:	429a      	cmp	r2, r3
 8000de6:	f040 8150 	bne.w	800108a <HAL_GPIO_Init+0x2d2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000dea:	683b      	ldr	r3, [r7, #0]
 8000dec:	685b      	ldr	r3, [r3, #4]
 8000dee:	4a97      	ldr	r2, [pc, #604]	; (800104c <HAL_GPIO_Init+0x294>)
 8000df0:	4293      	cmp	r3, r2
 8000df2:	d05e      	beq.n	8000eb2 <HAL_GPIO_Init+0xfa>
 8000df4:	4a95      	ldr	r2, [pc, #596]	; (800104c <HAL_GPIO_Init+0x294>)
 8000df6:	4293      	cmp	r3, r2
 8000df8:	d875      	bhi.n	8000ee6 <HAL_GPIO_Init+0x12e>
 8000dfa:	4a95      	ldr	r2, [pc, #596]	; (8001050 <HAL_GPIO_Init+0x298>)
 8000dfc:	4293      	cmp	r3, r2
 8000dfe:	d058      	beq.n	8000eb2 <HAL_GPIO_Init+0xfa>
 8000e00:	4a93      	ldr	r2, [pc, #588]	; (8001050 <HAL_GPIO_Init+0x298>)
 8000e02:	4293      	cmp	r3, r2
 8000e04:	d86f      	bhi.n	8000ee6 <HAL_GPIO_Init+0x12e>
 8000e06:	4a93      	ldr	r2, [pc, #588]	; (8001054 <HAL_GPIO_Init+0x29c>)
 8000e08:	4293      	cmp	r3, r2
 8000e0a:	d052      	beq.n	8000eb2 <HAL_GPIO_Init+0xfa>
 8000e0c:	4a91      	ldr	r2, [pc, #580]	; (8001054 <HAL_GPIO_Init+0x29c>)
 8000e0e:	4293      	cmp	r3, r2
 8000e10:	d869      	bhi.n	8000ee6 <HAL_GPIO_Init+0x12e>
 8000e12:	4a91      	ldr	r2, [pc, #580]	; (8001058 <HAL_GPIO_Init+0x2a0>)
 8000e14:	4293      	cmp	r3, r2
 8000e16:	d04c      	beq.n	8000eb2 <HAL_GPIO_Init+0xfa>
 8000e18:	4a8f      	ldr	r2, [pc, #572]	; (8001058 <HAL_GPIO_Init+0x2a0>)
 8000e1a:	4293      	cmp	r3, r2
 8000e1c:	d863      	bhi.n	8000ee6 <HAL_GPIO_Init+0x12e>
 8000e1e:	4a8f      	ldr	r2, [pc, #572]	; (800105c <HAL_GPIO_Init+0x2a4>)
 8000e20:	4293      	cmp	r3, r2
 8000e22:	d046      	beq.n	8000eb2 <HAL_GPIO_Init+0xfa>
 8000e24:	4a8d      	ldr	r2, [pc, #564]	; (800105c <HAL_GPIO_Init+0x2a4>)
 8000e26:	4293      	cmp	r3, r2
 8000e28:	d85d      	bhi.n	8000ee6 <HAL_GPIO_Init+0x12e>
 8000e2a:	2b12      	cmp	r3, #18
 8000e2c:	d82a      	bhi.n	8000e84 <HAL_GPIO_Init+0xcc>
 8000e2e:	2b12      	cmp	r3, #18
 8000e30:	d859      	bhi.n	8000ee6 <HAL_GPIO_Init+0x12e>
 8000e32:	a201      	add	r2, pc, #4	; (adr r2, 8000e38 <HAL_GPIO_Init+0x80>)
 8000e34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e38:	08000eb3 	.word	0x08000eb3
 8000e3c:	08000e8d 	.word	0x08000e8d
 8000e40:	08000e9f 	.word	0x08000e9f
 8000e44:	08000ee1 	.word	0x08000ee1
 8000e48:	08000ee7 	.word	0x08000ee7
 8000e4c:	08000ee7 	.word	0x08000ee7
 8000e50:	08000ee7 	.word	0x08000ee7
 8000e54:	08000ee7 	.word	0x08000ee7
 8000e58:	08000ee7 	.word	0x08000ee7
 8000e5c:	08000ee7 	.word	0x08000ee7
 8000e60:	08000ee7 	.word	0x08000ee7
 8000e64:	08000ee7 	.word	0x08000ee7
 8000e68:	08000ee7 	.word	0x08000ee7
 8000e6c:	08000ee7 	.word	0x08000ee7
 8000e70:	08000ee7 	.word	0x08000ee7
 8000e74:	08000ee7 	.word	0x08000ee7
 8000e78:	08000ee7 	.word	0x08000ee7
 8000e7c:	08000e95 	.word	0x08000e95
 8000e80:	08000ea9 	.word	0x08000ea9
 8000e84:	4a76      	ldr	r2, [pc, #472]	; (8001060 <HAL_GPIO_Init+0x2a8>)
 8000e86:	4293      	cmp	r3, r2
 8000e88:	d013      	beq.n	8000eb2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000e8a:	e02c      	b.n	8000ee6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000e8c:	683b      	ldr	r3, [r7, #0]
 8000e8e:	68db      	ldr	r3, [r3, #12]
 8000e90:	623b      	str	r3, [r7, #32]
          break;
 8000e92:	e029      	b.n	8000ee8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000e94:	683b      	ldr	r3, [r7, #0]
 8000e96:	68db      	ldr	r3, [r3, #12]
 8000e98:	3304      	adds	r3, #4
 8000e9a:	623b      	str	r3, [r7, #32]
          break;
 8000e9c:	e024      	b.n	8000ee8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000e9e:	683b      	ldr	r3, [r7, #0]
 8000ea0:	68db      	ldr	r3, [r3, #12]
 8000ea2:	3308      	adds	r3, #8
 8000ea4:	623b      	str	r3, [r7, #32]
          break;
 8000ea6:	e01f      	b.n	8000ee8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000ea8:	683b      	ldr	r3, [r7, #0]
 8000eaa:	68db      	ldr	r3, [r3, #12]
 8000eac:	330c      	adds	r3, #12
 8000eae:	623b      	str	r3, [r7, #32]
          break;
 8000eb0:	e01a      	b.n	8000ee8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000eb2:	683b      	ldr	r3, [r7, #0]
 8000eb4:	689b      	ldr	r3, [r3, #8]
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d102      	bne.n	8000ec0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000eba:	2304      	movs	r3, #4
 8000ebc:	623b      	str	r3, [r7, #32]
          break;
 8000ebe:	e013      	b.n	8000ee8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000ec0:	683b      	ldr	r3, [r7, #0]
 8000ec2:	689b      	ldr	r3, [r3, #8]
 8000ec4:	2b01      	cmp	r3, #1
 8000ec6:	d105      	bne.n	8000ed4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000ec8:	2308      	movs	r3, #8
 8000eca:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	69fa      	ldr	r2, [r7, #28]
 8000ed0:	611a      	str	r2, [r3, #16]
          break;
 8000ed2:	e009      	b.n	8000ee8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000ed4:	2308      	movs	r3, #8
 8000ed6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	69fa      	ldr	r2, [r7, #28]
 8000edc:	615a      	str	r2, [r3, #20]
          break;
 8000ede:	e003      	b.n	8000ee8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	623b      	str	r3, [r7, #32]
          break;
 8000ee4:	e000      	b.n	8000ee8 <HAL_GPIO_Init+0x130>
          break;
 8000ee6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000ee8:	69bb      	ldr	r3, [r7, #24]
 8000eea:	2bff      	cmp	r3, #255	; 0xff
 8000eec:	d801      	bhi.n	8000ef2 <HAL_GPIO_Init+0x13a>
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	e001      	b.n	8000ef6 <HAL_GPIO_Init+0x13e>
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	3304      	adds	r3, #4
 8000ef6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000ef8:	69bb      	ldr	r3, [r7, #24]
 8000efa:	2bff      	cmp	r3, #255	; 0xff
 8000efc:	d802      	bhi.n	8000f04 <HAL_GPIO_Init+0x14c>
 8000efe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f00:	009b      	lsls	r3, r3, #2
 8000f02:	e002      	b.n	8000f0a <HAL_GPIO_Init+0x152>
 8000f04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f06:	3b08      	subs	r3, #8
 8000f08:	009b      	lsls	r3, r3, #2
 8000f0a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000f0c:	697b      	ldr	r3, [r7, #20]
 8000f0e:	681a      	ldr	r2, [r3, #0]
 8000f10:	210f      	movs	r1, #15
 8000f12:	693b      	ldr	r3, [r7, #16]
 8000f14:	fa01 f303 	lsl.w	r3, r1, r3
 8000f18:	43db      	mvns	r3, r3
 8000f1a:	401a      	ands	r2, r3
 8000f1c:	6a39      	ldr	r1, [r7, #32]
 8000f1e:	693b      	ldr	r3, [r7, #16]
 8000f20:	fa01 f303 	lsl.w	r3, r1, r3
 8000f24:	431a      	orrs	r2, r3
 8000f26:	697b      	ldr	r3, [r7, #20]
 8000f28:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000f2a:	683b      	ldr	r3, [r7, #0]
 8000f2c:	685b      	ldr	r3, [r3, #4]
 8000f2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	f000 80a9 	beq.w	800108a <HAL_GPIO_Init+0x2d2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000f38:	4b4a      	ldr	r3, [pc, #296]	; (8001064 <HAL_GPIO_Init+0x2ac>)
 8000f3a:	699b      	ldr	r3, [r3, #24]
 8000f3c:	4a49      	ldr	r2, [pc, #292]	; (8001064 <HAL_GPIO_Init+0x2ac>)
 8000f3e:	f043 0301 	orr.w	r3, r3, #1
 8000f42:	6193      	str	r3, [r2, #24]
 8000f44:	4b47      	ldr	r3, [pc, #284]	; (8001064 <HAL_GPIO_Init+0x2ac>)
 8000f46:	699b      	ldr	r3, [r3, #24]
 8000f48:	f003 0301 	and.w	r3, r3, #1
 8000f4c:	60bb      	str	r3, [r7, #8]
 8000f4e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000f50:	4a45      	ldr	r2, [pc, #276]	; (8001068 <HAL_GPIO_Init+0x2b0>)
 8000f52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f54:	089b      	lsrs	r3, r3, #2
 8000f56:	3302      	adds	r3, #2
 8000f58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f5c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000f5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f60:	f003 0303 	and.w	r3, r3, #3
 8000f64:	009b      	lsls	r3, r3, #2
 8000f66:	220f      	movs	r2, #15
 8000f68:	fa02 f303 	lsl.w	r3, r2, r3
 8000f6c:	43db      	mvns	r3, r3
 8000f6e:	68fa      	ldr	r2, [r7, #12]
 8000f70:	4013      	ands	r3, r2
 8000f72:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	4a3d      	ldr	r2, [pc, #244]	; (800106c <HAL_GPIO_Init+0x2b4>)
 8000f78:	4293      	cmp	r3, r2
 8000f7a:	d00d      	beq.n	8000f98 <HAL_GPIO_Init+0x1e0>
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	4a3c      	ldr	r2, [pc, #240]	; (8001070 <HAL_GPIO_Init+0x2b8>)
 8000f80:	4293      	cmp	r3, r2
 8000f82:	d007      	beq.n	8000f94 <HAL_GPIO_Init+0x1dc>
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	4a3b      	ldr	r2, [pc, #236]	; (8001074 <HAL_GPIO_Init+0x2bc>)
 8000f88:	4293      	cmp	r3, r2
 8000f8a:	d101      	bne.n	8000f90 <HAL_GPIO_Init+0x1d8>
 8000f8c:	2302      	movs	r3, #2
 8000f8e:	e004      	b.n	8000f9a <HAL_GPIO_Init+0x1e2>
 8000f90:	2303      	movs	r3, #3
 8000f92:	e002      	b.n	8000f9a <HAL_GPIO_Init+0x1e2>
 8000f94:	2301      	movs	r3, #1
 8000f96:	e000      	b.n	8000f9a <HAL_GPIO_Init+0x1e2>
 8000f98:	2300      	movs	r3, #0
 8000f9a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000f9c:	f002 0203 	and.w	r2, r2, #3
 8000fa0:	0092      	lsls	r2, r2, #2
 8000fa2:	4093      	lsls	r3, r2
 8000fa4:	68fa      	ldr	r2, [r7, #12]
 8000fa6:	4313      	orrs	r3, r2
 8000fa8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000faa:	492f      	ldr	r1, [pc, #188]	; (8001068 <HAL_GPIO_Init+0x2b0>)
 8000fac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fae:	089b      	lsrs	r3, r3, #2
 8000fb0:	3302      	adds	r3, #2
 8000fb2:	68fa      	ldr	r2, [r7, #12]
 8000fb4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000fb8:	683b      	ldr	r3, [r7, #0]
 8000fba:	685b      	ldr	r3, [r3, #4]
 8000fbc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d006      	beq.n	8000fd2 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000fc4:	4b2c      	ldr	r3, [pc, #176]	; (8001078 <HAL_GPIO_Init+0x2c0>)
 8000fc6:	689a      	ldr	r2, [r3, #8]
 8000fc8:	492b      	ldr	r1, [pc, #172]	; (8001078 <HAL_GPIO_Init+0x2c0>)
 8000fca:	69bb      	ldr	r3, [r7, #24]
 8000fcc:	4313      	orrs	r3, r2
 8000fce:	608b      	str	r3, [r1, #8]
 8000fd0:	e006      	b.n	8000fe0 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000fd2:	4b29      	ldr	r3, [pc, #164]	; (8001078 <HAL_GPIO_Init+0x2c0>)
 8000fd4:	689a      	ldr	r2, [r3, #8]
 8000fd6:	69bb      	ldr	r3, [r7, #24]
 8000fd8:	43db      	mvns	r3, r3
 8000fda:	4927      	ldr	r1, [pc, #156]	; (8001078 <HAL_GPIO_Init+0x2c0>)
 8000fdc:	4013      	ands	r3, r2
 8000fde:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000fe0:	683b      	ldr	r3, [r7, #0]
 8000fe2:	685b      	ldr	r3, [r3, #4]
 8000fe4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d006      	beq.n	8000ffa <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000fec:	4b22      	ldr	r3, [pc, #136]	; (8001078 <HAL_GPIO_Init+0x2c0>)
 8000fee:	68da      	ldr	r2, [r3, #12]
 8000ff0:	4921      	ldr	r1, [pc, #132]	; (8001078 <HAL_GPIO_Init+0x2c0>)
 8000ff2:	69bb      	ldr	r3, [r7, #24]
 8000ff4:	4313      	orrs	r3, r2
 8000ff6:	60cb      	str	r3, [r1, #12]
 8000ff8:	e006      	b.n	8001008 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000ffa:	4b1f      	ldr	r3, [pc, #124]	; (8001078 <HAL_GPIO_Init+0x2c0>)
 8000ffc:	68da      	ldr	r2, [r3, #12]
 8000ffe:	69bb      	ldr	r3, [r7, #24]
 8001000:	43db      	mvns	r3, r3
 8001002:	491d      	ldr	r1, [pc, #116]	; (8001078 <HAL_GPIO_Init+0x2c0>)
 8001004:	4013      	ands	r3, r2
 8001006:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001008:	683b      	ldr	r3, [r7, #0]
 800100a:	685b      	ldr	r3, [r3, #4]
 800100c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001010:	2b00      	cmp	r3, #0
 8001012:	d006      	beq.n	8001022 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001014:	4b18      	ldr	r3, [pc, #96]	; (8001078 <HAL_GPIO_Init+0x2c0>)
 8001016:	685a      	ldr	r2, [r3, #4]
 8001018:	4917      	ldr	r1, [pc, #92]	; (8001078 <HAL_GPIO_Init+0x2c0>)
 800101a:	69bb      	ldr	r3, [r7, #24]
 800101c:	4313      	orrs	r3, r2
 800101e:	604b      	str	r3, [r1, #4]
 8001020:	e006      	b.n	8001030 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001022:	4b15      	ldr	r3, [pc, #84]	; (8001078 <HAL_GPIO_Init+0x2c0>)
 8001024:	685a      	ldr	r2, [r3, #4]
 8001026:	69bb      	ldr	r3, [r7, #24]
 8001028:	43db      	mvns	r3, r3
 800102a:	4913      	ldr	r1, [pc, #76]	; (8001078 <HAL_GPIO_Init+0x2c0>)
 800102c:	4013      	ands	r3, r2
 800102e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001030:	683b      	ldr	r3, [r7, #0]
 8001032:	685b      	ldr	r3, [r3, #4]
 8001034:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001038:	2b00      	cmp	r3, #0
 800103a:	d01f      	beq.n	800107c <HAL_GPIO_Init+0x2c4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800103c:	4b0e      	ldr	r3, [pc, #56]	; (8001078 <HAL_GPIO_Init+0x2c0>)
 800103e:	681a      	ldr	r2, [r3, #0]
 8001040:	490d      	ldr	r1, [pc, #52]	; (8001078 <HAL_GPIO_Init+0x2c0>)
 8001042:	69bb      	ldr	r3, [r7, #24]
 8001044:	4313      	orrs	r3, r2
 8001046:	600b      	str	r3, [r1, #0]
 8001048:	e01f      	b.n	800108a <HAL_GPIO_Init+0x2d2>
 800104a:	bf00      	nop
 800104c:	10320000 	.word	0x10320000
 8001050:	10310000 	.word	0x10310000
 8001054:	10220000 	.word	0x10220000
 8001058:	10210000 	.word	0x10210000
 800105c:	10120000 	.word	0x10120000
 8001060:	10110000 	.word	0x10110000
 8001064:	40021000 	.word	0x40021000
 8001068:	40010000 	.word	0x40010000
 800106c:	40010800 	.word	0x40010800
 8001070:	40010c00 	.word	0x40010c00
 8001074:	40011000 	.word	0x40011000
 8001078:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800107c:	4b0b      	ldr	r3, [pc, #44]	; (80010ac <HAL_GPIO_Init+0x2f4>)
 800107e:	681a      	ldr	r2, [r3, #0]
 8001080:	69bb      	ldr	r3, [r7, #24]
 8001082:	43db      	mvns	r3, r3
 8001084:	4909      	ldr	r1, [pc, #36]	; (80010ac <HAL_GPIO_Init+0x2f4>)
 8001086:	4013      	ands	r3, r2
 8001088:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800108a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800108c:	3301      	adds	r3, #1
 800108e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001090:	683b      	ldr	r3, [r7, #0]
 8001092:	681a      	ldr	r2, [r3, #0]
 8001094:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001096:	fa22 f303 	lsr.w	r3, r2, r3
 800109a:	2b00      	cmp	r3, #0
 800109c:	f47f ae96 	bne.w	8000dcc <HAL_GPIO_Init+0x14>
  }
}
 80010a0:	bf00      	nop
 80010a2:	bf00      	nop
 80010a4:	372c      	adds	r7, #44	; 0x2c
 80010a6:	46bd      	mov	sp, r7
 80010a8:	bc80      	pop	{r7}
 80010aa:	4770      	bx	lr
 80010ac:	40010400 	.word	0x40010400

080010b0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80010b0:	b480      	push	{r7}
 80010b2:	b083      	sub	sp, #12
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
 80010b8:	460b      	mov	r3, r1
 80010ba:	807b      	strh	r3, [r7, #2]
 80010bc:	4613      	mov	r3, r2
 80010be:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80010c0:	787b      	ldrb	r3, [r7, #1]
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d003      	beq.n	80010ce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80010c6:	887a      	ldrh	r2, [r7, #2]
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80010cc:	e003      	b.n	80010d6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80010ce:	887b      	ldrh	r3, [r7, #2]
 80010d0:	041a      	lsls	r2, r3, #16
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	611a      	str	r2, [r3, #16]
}
 80010d6:	bf00      	nop
 80010d8:	370c      	adds	r7, #12
 80010da:	46bd      	mov	sp, r7
 80010dc:	bc80      	pop	{r7}
 80010de:	4770      	bx	lr

080010e0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b086      	sub	sp, #24
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d101      	bne.n	80010f2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80010ee:	2301      	movs	r3, #1
 80010f0:	e272      	b.n	80015d8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	f003 0301 	and.w	r3, r3, #1
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	f000 8087 	beq.w	800120e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001100:	4b92      	ldr	r3, [pc, #584]	; (800134c <HAL_RCC_OscConfig+0x26c>)
 8001102:	685b      	ldr	r3, [r3, #4]
 8001104:	f003 030c 	and.w	r3, r3, #12
 8001108:	2b04      	cmp	r3, #4
 800110a:	d00c      	beq.n	8001126 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800110c:	4b8f      	ldr	r3, [pc, #572]	; (800134c <HAL_RCC_OscConfig+0x26c>)
 800110e:	685b      	ldr	r3, [r3, #4]
 8001110:	f003 030c 	and.w	r3, r3, #12
 8001114:	2b08      	cmp	r3, #8
 8001116:	d112      	bne.n	800113e <HAL_RCC_OscConfig+0x5e>
 8001118:	4b8c      	ldr	r3, [pc, #560]	; (800134c <HAL_RCC_OscConfig+0x26c>)
 800111a:	685b      	ldr	r3, [r3, #4]
 800111c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001120:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001124:	d10b      	bne.n	800113e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001126:	4b89      	ldr	r3, [pc, #548]	; (800134c <HAL_RCC_OscConfig+0x26c>)
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800112e:	2b00      	cmp	r3, #0
 8001130:	d06c      	beq.n	800120c <HAL_RCC_OscConfig+0x12c>
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	685b      	ldr	r3, [r3, #4]
 8001136:	2b00      	cmp	r3, #0
 8001138:	d168      	bne.n	800120c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800113a:	2301      	movs	r3, #1
 800113c:	e24c      	b.n	80015d8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	685b      	ldr	r3, [r3, #4]
 8001142:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001146:	d106      	bne.n	8001156 <HAL_RCC_OscConfig+0x76>
 8001148:	4b80      	ldr	r3, [pc, #512]	; (800134c <HAL_RCC_OscConfig+0x26c>)
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	4a7f      	ldr	r2, [pc, #508]	; (800134c <HAL_RCC_OscConfig+0x26c>)
 800114e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001152:	6013      	str	r3, [r2, #0]
 8001154:	e02e      	b.n	80011b4 <HAL_RCC_OscConfig+0xd4>
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	685b      	ldr	r3, [r3, #4]
 800115a:	2b00      	cmp	r3, #0
 800115c:	d10c      	bne.n	8001178 <HAL_RCC_OscConfig+0x98>
 800115e:	4b7b      	ldr	r3, [pc, #492]	; (800134c <HAL_RCC_OscConfig+0x26c>)
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	4a7a      	ldr	r2, [pc, #488]	; (800134c <HAL_RCC_OscConfig+0x26c>)
 8001164:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001168:	6013      	str	r3, [r2, #0]
 800116a:	4b78      	ldr	r3, [pc, #480]	; (800134c <HAL_RCC_OscConfig+0x26c>)
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	4a77      	ldr	r2, [pc, #476]	; (800134c <HAL_RCC_OscConfig+0x26c>)
 8001170:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001174:	6013      	str	r3, [r2, #0]
 8001176:	e01d      	b.n	80011b4 <HAL_RCC_OscConfig+0xd4>
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	685b      	ldr	r3, [r3, #4]
 800117c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001180:	d10c      	bne.n	800119c <HAL_RCC_OscConfig+0xbc>
 8001182:	4b72      	ldr	r3, [pc, #456]	; (800134c <HAL_RCC_OscConfig+0x26c>)
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	4a71      	ldr	r2, [pc, #452]	; (800134c <HAL_RCC_OscConfig+0x26c>)
 8001188:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800118c:	6013      	str	r3, [r2, #0]
 800118e:	4b6f      	ldr	r3, [pc, #444]	; (800134c <HAL_RCC_OscConfig+0x26c>)
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	4a6e      	ldr	r2, [pc, #440]	; (800134c <HAL_RCC_OscConfig+0x26c>)
 8001194:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001198:	6013      	str	r3, [r2, #0]
 800119a:	e00b      	b.n	80011b4 <HAL_RCC_OscConfig+0xd4>
 800119c:	4b6b      	ldr	r3, [pc, #428]	; (800134c <HAL_RCC_OscConfig+0x26c>)
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	4a6a      	ldr	r2, [pc, #424]	; (800134c <HAL_RCC_OscConfig+0x26c>)
 80011a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80011a6:	6013      	str	r3, [r2, #0]
 80011a8:	4b68      	ldr	r3, [pc, #416]	; (800134c <HAL_RCC_OscConfig+0x26c>)
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	4a67      	ldr	r2, [pc, #412]	; (800134c <HAL_RCC_OscConfig+0x26c>)
 80011ae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80011b2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	685b      	ldr	r3, [r3, #4]
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d013      	beq.n	80011e4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011bc:	f7ff fcea 	bl	8000b94 <HAL_GetTick>
 80011c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011c2:	e008      	b.n	80011d6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80011c4:	f7ff fce6 	bl	8000b94 <HAL_GetTick>
 80011c8:	4602      	mov	r2, r0
 80011ca:	693b      	ldr	r3, [r7, #16]
 80011cc:	1ad3      	subs	r3, r2, r3
 80011ce:	2b64      	cmp	r3, #100	; 0x64
 80011d0:	d901      	bls.n	80011d6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80011d2:	2303      	movs	r3, #3
 80011d4:	e200      	b.n	80015d8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011d6:	4b5d      	ldr	r3, [pc, #372]	; (800134c <HAL_RCC_OscConfig+0x26c>)
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d0f0      	beq.n	80011c4 <HAL_RCC_OscConfig+0xe4>
 80011e2:	e014      	b.n	800120e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011e4:	f7ff fcd6 	bl	8000b94 <HAL_GetTick>
 80011e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80011ea:	e008      	b.n	80011fe <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80011ec:	f7ff fcd2 	bl	8000b94 <HAL_GetTick>
 80011f0:	4602      	mov	r2, r0
 80011f2:	693b      	ldr	r3, [r7, #16]
 80011f4:	1ad3      	subs	r3, r2, r3
 80011f6:	2b64      	cmp	r3, #100	; 0x64
 80011f8:	d901      	bls.n	80011fe <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80011fa:	2303      	movs	r3, #3
 80011fc:	e1ec      	b.n	80015d8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80011fe:	4b53      	ldr	r3, [pc, #332]	; (800134c <HAL_RCC_OscConfig+0x26c>)
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001206:	2b00      	cmp	r3, #0
 8001208:	d1f0      	bne.n	80011ec <HAL_RCC_OscConfig+0x10c>
 800120a:	e000      	b.n	800120e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800120c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	f003 0302 	and.w	r3, r3, #2
 8001216:	2b00      	cmp	r3, #0
 8001218:	d063      	beq.n	80012e2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800121a:	4b4c      	ldr	r3, [pc, #304]	; (800134c <HAL_RCC_OscConfig+0x26c>)
 800121c:	685b      	ldr	r3, [r3, #4]
 800121e:	f003 030c 	and.w	r3, r3, #12
 8001222:	2b00      	cmp	r3, #0
 8001224:	d00b      	beq.n	800123e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001226:	4b49      	ldr	r3, [pc, #292]	; (800134c <HAL_RCC_OscConfig+0x26c>)
 8001228:	685b      	ldr	r3, [r3, #4]
 800122a:	f003 030c 	and.w	r3, r3, #12
 800122e:	2b08      	cmp	r3, #8
 8001230:	d11c      	bne.n	800126c <HAL_RCC_OscConfig+0x18c>
 8001232:	4b46      	ldr	r3, [pc, #280]	; (800134c <HAL_RCC_OscConfig+0x26c>)
 8001234:	685b      	ldr	r3, [r3, #4]
 8001236:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800123a:	2b00      	cmp	r3, #0
 800123c:	d116      	bne.n	800126c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800123e:	4b43      	ldr	r3, [pc, #268]	; (800134c <HAL_RCC_OscConfig+0x26c>)
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	f003 0302 	and.w	r3, r3, #2
 8001246:	2b00      	cmp	r3, #0
 8001248:	d005      	beq.n	8001256 <HAL_RCC_OscConfig+0x176>
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	691b      	ldr	r3, [r3, #16]
 800124e:	2b01      	cmp	r3, #1
 8001250:	d001      	beq.n	8001256 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001252:	2301      	movs	r3, #1
 8001254:	e1c0      	b.n	80015d8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001256:	4b3d      	ldr	r3, [pc, #244]	; (800134c <HAL_RCC_OscConfig+0x26c>)
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	695b      	ldr	r3, [r3, #20]
 8001262:	00db      	lsls	r3, r3, #3
 8001264:	4939      	ldr	r1, [pc, #228]	; (800134c <HAL_RCC_OscConfig+0x26c>)
 8001266:	4313      	orrs	r3, r2
 8001268:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800126a:	e03a      	b.n	80012e2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	691b      	ldr	r3, [r3, #16]
 8001270:	2b00      	cmp	r3, #0
 8001272:	d020      	beq.n	80012b6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001274:	4b36      	ldr	r3, [pc, #216]	; (8001350 <HAL_RCC_OscConfig+0x270>)
 8001276:	2201      	movs	r2, #1
 8001278:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800127a:	f7ff fc8b 	bl	8000b94 <HAL_GetTick>
 800127e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001280:	e008      	b.n	8001294 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001282:	f7ff fc87 	bl	8000b94 <HAL_GetTick>
 8001286:	4602      	mov	r2, r0
 8001288:	693b      	ldr	r3, [r7, #16]
 800128a:	1ad3      	subs	r3, r2, r3
 800128c:	2b02      	cmp	r3, #2
 800128e:	d901      	bls.n	8001294 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001290:	2303      	movs	r3, #3
 8001292:	e1a1      	b.n	80015d8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001294:	4b2d      	ldr	r3, [pc, #180]	; (800134c <HAL_RCC_OscConfig+0x26c>)
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	f003 0302 	and.w	r3, r3, #2
 800129c:	2b00      	cmp	r3, #0
 800129e:	d0f0      	beq.n	8001282 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012a0:	4b2a      	ldr	r3, [pc, #168]	; (800134c <HAL_RCC_OscConfig+0x26c>)
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	695b      	ldr	r3, [r3, #20]
 80012ac:	00db      	lsls	r3, r3, #3
 80012ae:	4927      	ldr	r1, [pc, #156]	; (800134c <HAL_RCC_OscConfig+0x26c>)
 80012b0:	4313      	orrs	r3, r2
 80012b2:	600b      	str	r3, [r1, #0]
 80012b4:	e015      	b.n	80012e2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80012b6:	4b26      	ldr	r3, [pc, #152]	; (8001350 <HAL_RCC_OscConfig+0x270>)
 80012b8:	2200      	movs	r2, #0
 80012ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012bc:	f7ff fc6a 	bl	8000b94 <HAL_GetTick>
 80012c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80012c2:	e008      	b.n	80012d6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80012c4:	f7ff fc66 	bl	8000b94 <HAL_GetTick>
 80012c8:	4602      	mov	r2, r0
 80012ca:	693b      	ldr	r3, [r7, #16]
 80012cc:	1ad3      	subs	r3, r2, r3
 80012ce:	2b02      	cmp	r3, #2
 80012d0:	d901      	bls.n	80012d6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80012d2:	2303      	movs	r3, #3
 80012d4:	e180      	b.n	80015d8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80012d6:	4b1d      	ldr	r3, [pc, #116]	; (800134c <HAL_RCC_OscConfig+0x26c>)
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	f003 0302 	and.w	r3, r3, #2
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d1f0      	bne.n	80012c4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	f003 0308 	and.w	r3, r3, #8
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d03a      	beq.n	8001364 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	699b      	ldr	r3, [r3, #24]
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d019      	beq.n	800132a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80012f6:	4b17      	ldr	r3, [pc, #92]	; (8001354 <HAL_RCC_OscConfig+0x274>)
 80012f8:	2201      	movs	r2, #1
 80012fa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012fc:	f7ff fc4a 	bl	8000b94 <HAL_GetTick>
 8001300:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001302:	e008      	b.n	8001316 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001304:	f7ff fc46 	bl	8000b94 <HAL_GetTick>
 8001308:	4602      	mov	r2, r0
 800130a:	693b      	ldr	r3, [r7, #16]
 800130c:	1ad3      	subs	r3, r2, r3
 800130e:	2b02      	cmp	r3, #2
 8001310:	d901      	bls.n	8001316 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001312:	2303      	movs	r3, #3
 8001314:	e160      	b.n	80015d8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001316:	4b0d      	ldr	r3, [pc, #52]	; (800134c <HAL_RCC_OscConfig+0x26c>)
 8001318:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800131a:	f003 0302 	and.w	r3, r3, #2
 800131e:	2b00      	cmp	r3, #0
 8001320:	d0f0      	beq.n	8001304 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001322:	2001      	movs	r0, #1
 8001324:	f000 face 	bl	80018c4 <RCC_Delay>
 8001328:	e01c      	b.n	8001364 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800132a:	4b0a      	ldr	r3, [pc, #40]	; (8001354 <HAL_RCC_OscConfig+0x274>)
 800132c:	2200      	movs	r2, #0
 800132e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001330:	f7ff fc30 	bl	8000b94 <HAL_GetTick>
 8001334:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001336:	e00f      	b.n	8001358 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001338:	f7ff fc2c 	bl	8000b94 <HAL_GetTick>
 800133c:	4602      	mov	r2, r0
 800133e:	693b      	ldr	r3, [r7, #16]
 8001340:	1ad3      	subs	r3, r2, r3
 8001342:	2b02      	cmp	r3, #2
 8001344:	d908      	bls.n	8001358 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001346:	2303      	movs	r3, #3
 8001348:	e146      	b.n	80015d8 <HAL_RCC_OscConfig+0x4f8>
 800134a:	bf00      	nop
 800134c:	40021000 	.word	0x40021000
 8001350:	42420000 	.word	0x42420000
 8001354:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001358:	4b92      	ldr	r3, [pc, #584]	; (80015a4 <HAL_RCC_OscConfig+0x4c4>)
 800135a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800135c:	f003 0302 	and.w	r3, r3, #2
 8001360:	2b00      	cmp	r3, #0
 8001362:	d1e9      	bne.n	8001338 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	f003 0304 	and.w	r3, r3, #4
 800136c:	2b00      	cmp	r3, #0
 800136e:	f000 80a6 	beq.w	80014be <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001372:	2300      	movs	r3, #0
 8001374:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001376:	4b8b      	ldr	r3, [pc, #556]	; (80015a4 <HAL_RCC_OscConfig+0x4c4>)
 8001378:	69db      	ldr	r3, [r3, #28]
 800137a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800137e:	2b00      	cmp	r3, #0
 8001380:	d10d      	bne.n	800139e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001382:	4b88      	ldr	r3, [pc, #544]	; (80015a4 <HAL_RCC_OscConfig+0x4c4>)
 8001384:	69db      	ldr	r3, [r3, #28]
 8001386:	4a87      	ldr	r2, [pc, #540]	; (80015a4 <HAL_RCC_OscConfig+0x4c4>)
 8001388:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800138c:	61d3      	str	r3, [r2, #28]
 800138e:	4b85      	ldr	r3, [pc, #532]	; (80015a4 <HAL_RCC_OscConfig+0x4c4>)
 8001390:	69db      	ldr	r3, [r3, #28]
 8001392:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001396:	60bb      	str	r3, [r7, #8]
 8001398:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800139a:	2301      	movs	r3, #1
 800139c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800139e:	4b82      	ldr	r3, [pc, #520]	; (80015a8 <HAL_RCC_OscConfig+0x4c8>)
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d118      	bne.n	80013dc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80013aa:	4b7f      	ldr	r3, [pc, #508]	; (80015a8 <HAL_RCC_OscConfig+0x4c8>)
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	4a7e      	ldr	r2, [pc, #504]	; (80015a8 <HAL_RCC_OscConfig+0x4c8>)
 80013b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013b4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80013b6:	f7ff fbed 	bl	8000b94 <HAL_GetTick>
 80013ba:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013bc:	e008      	b.n	80013d0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80013be:	f7ff fbe9 	bl	8000b94 <HAL_GetTick>
 80013c2:	4602      	mov	r2, r0
 80013c4:	693b      	ldr	r3, [r7, #16]
 80013c6:	1ad3      	subs	r3, r2, r3
 80013c8:	2b64      	cmp	r3, #100	; 0x64
 80013ca:	d901      	bls.n	80013d0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80013cc:	2303      	movs	r3, #3
 80013ce:	e103      	b.n	80015d8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013d0:	4b75      	ldr	r3, [pc, #468]	; (80015a8 <HAL_RCC_OscConfig+0x4c8>)
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d0f0      	beq.n	80013be <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	68db      	ldr	r3, [r3, #12]
 80013e0:	2b01      	cmp	r3, #1
 80013e2:	d106      	bne.n	80013f2 <HAL_RCC_OscConfig+0x312>
 80013e4:	4b6f      	ldr	r3, [pc, #444]	; (80015a4 <HAL_RCC_OscConfig+0x4c4>)
 80013e6:	6a1b      	ldr	r3, [r3, #32]
 80013e8:	4a6e      	ldr	r2, [pc, #440]	; (80015a4 <HAL_RCC_OscConfig+0x4c4>)
 80013ea:	f043 0301 	orr.w	r3, r3, #1
 80013ee:	6213      	str	r3, [r2, #32]
 80013f0:	e02d      	b.n	800144e <HAL_RCC_OscConfig+0x36e>
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	68db      	ldr	r3, [r3, #12]
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d10c      	bne.n	8001414 <HAL_RCC_OscConfig+0x334>
 80013fa:	4b6a      	ldr	r3, [pc, #424]	; (80015a4 <HAL_RCC_OscConfig+0x4c4>)
 80013fc:	6a1b      	ldr	r3, [r3, #32]
 80013fe:	4a69      	ldr	r2, [pc, #420]	; (80015a4 <HAL_RCC_OscConfig+0x4c4>)
 8001400:	f023 0301 	bic.w	r3, r3, #1
 8001404:	6213      	str	r3, [r2, #32]
 8001406:	4b67      	ldr	r3, [pc, #412]	; (80015a4 <HAL_RCC_OscConfig+0x4c4>)
 8001408:	6a1b      	ldr	r3, [r3, #32]
 800140a:	4a66      	ldr	r2, [pc, #408]	; (80015a4 <HAL_RCC_OscConfig+0x4c4>)
 800140c:	f023 0304 	bic.w	r3, r3, #4
 8001410:	6213      	str	r3, [r2, #32]
 8001412:	e01c      	b.n	800144e <HAL_RCC_OscConfig+0x36e>
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	68db      	ldr	r3, [r3, #12]
 8001418:	2b05      	cmp	r3, #5
 800141a:	d10c      	bne.n	8001436 <HAL_RCC_OscConfig+0x356>
 800141c:	4b61      	ldr	r3, [pc, #388]	; (80015a4 <HAL_RCC_OscConfig+0x4c4>)
 800141e:	6a1b      	ldr	r3, [r3, #32]
 8001420:	4a60      	ldr	r2, [pc, #384]	; (80015a4 <HAL_RCC_OscConfig+0x4c4>)
 8001422:	f043 0304 	orr.w	r3, r3, #4
 8001426:	6213      	str	r3, [r2, #32]
 8001428:	4b5e      	ldr	r3, [pc, #376]	; (80015a4 <HAL_RCC_OscConfig+0x4c4>)
 800142a:	6a1b      	ldr	r3, [r3, #32]
 800142c:	4a5d      	ldr	r2, [pc, #372]	; (80015a4 <HAL_RCC_OscConfig+0x4c4>)
 800142e:	f043 0301 	orr.w	r3, r3, #1
 8001432:	6213      	str	r3, [r2, #32]
 8001434:	e00b      	b.n	800144e <HAL_RCC_OscConfig+0x36e>
 8001436:	4b5b      	ldr	r3, [pc, #364]	; (80015a4 <HAL_RCC_OscConfig+0x4c4>)
 8001438:	6a1b      	ldr	r3, [r3, #32]
 800143a:	4a5a      	ldr	r2, [pc, #360]	; (80015a4 <HAL_RCC_OscConfig+0x4c4>)
 800143c:	f023 0301 	bic.w	r3, r3, #1
 8001440:	6213      	str	r3, [r2, #32]
 8001442:	4b58      	ldr	r3, [pc, #352]	; (80015a4 <HAL_RCC_OscConfig+0x4c4>)
 8001444:	6a1b      	ldr	r3, [r3, #32]
 8001446:	4a57      	ldr	r2, [pc, #348]	; (80015a4 <HAL_RCC_OscConfig+0x4c4>)
 8001448:	f023 0304 	bic.w	r3, r3, #4
 800144c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	68db      	ldr	r3, [r3, #12]
 8001452:	2b00      	cmp	r3, #0
 8001454:	d015      	beq.n	8001482 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001456:	f7ff fb9d 	bl	8000b94 <HAL_GetTick>
 800145a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800145c:	e00a      	b.n	8001474 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800145e:	f7ff fb99 	bl	8000b94 <HAL_GetTick>
 8001462:	4602      	mov	r2, r0
 8001464:	693b      	ldr	r3, [r7, #16]
 8001466:	1ad3      	subs	r3, r2, r3
 8001468:	f241 3288 	movw	r2, #5000	; 0x1388
 800146c:	4293      	cmp	r3, r2
 800146e:	d901      	bls.n	8001474 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001470:	2303      	movs	r3, #3
 8001472:	e0b1      	b.n	80015d8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001474:	4b4b      	ldr	r3, [pc, #300]	; (80015a4 <HAL_RCC_OscConfig+0x4c4>)
 8001476:	6a1b      	ldr	r3, [r3, #32]
 8001478:	f003 0302 	and.w	r3, r3, #2
 800147c:	2b00      	cmp	r3, #0
 800147e:	d0ee      	beq.n	800145e <HAL_RCC_OscConfig+0x37e>
 8001480:	e014      	b.n	80014ac <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001482:	f7ff fb87 	bl	8000b94 <HAL_GetTick>
 8001486:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001488:	e00a      	b.n	80014a0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800148a:	f7ff fb83 	bl	8000b94 <HAL_GetTick>
 800148e:	4602      	mov	r2, r0
 8001490:	693b      	ldr	r3, [r7, #16]
 8001492:	1ad3      	subs	r3, r2, r3
 8001494:	f241 3288 	movw	r2, #5000	; 0x1388
 8001498:	4293      	cmp	r3, r2
 800149a:	d901      	bls.n	80014a0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800149c:	2303      	movs	r3, #3
 800149e:	e09b      	b.n	80015d8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80014a0:	4b40      	ldr	r3, [pc, #256]	; (80015a4 <HAL_RCC_OscConfig+0x4c4>)
 80014a2:	6a1b      	ldr	r3, [r3, #32]
 80014a4:	f003 0302 	and.w	r3, r3, #2
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d1ee      	bne.n	800148a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80014ac:	7dfb      	ldrb	r3, [r7, #23]
 80014ae:	2b01      	cmp	r3, #1
 80014b0:	d105      	bne.n	80014be <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80014b2:	4b3c      	ldr	r3, [pc, #240]	; (80015a4 <HAL_RCC_OscConfig+0x4c4>)
 80014b4:	69db      	ldr	r3, [r3, #28]
 80014b6:	4a3b      	ldr	r2, [pc, #236]	; (80015a4 <HAL_RCC_OscConfig+0x4c4>)
 80014b8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80014bc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	69db      	ldr	r3, [r3, #28]
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	f000 8087 	beq.w	80015d6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80014c8:	4b36      	ldr	r3, [pc, #216]	; (80015a4 <HAL_RCC_OscConfig+0x4c4>)
 80014ca:	685b      	ldr	r3, [r3, #4]
 80014cc:	f003 030c 	and.w	r3, r3, #12
 80014d0:	2b08      	cmp	r3, #8
 80014d2:	d061      	beq.n	8001598 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	69db      	ldr	r3, [r3, #28]
 80014d8:	2b02      	cmp	r3, #2
 80014da:	d146      	bne.n	800156a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80014dc:	4b33      	ldr	r3, [pc, #204]	; (80015ac <HAL_RCC_OscConfig+0x4cc>)
 80014de:	2200      	movs	r2, #0
 80014e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014e2:	f7ff fb57 	bl	8000b94 <HAL_GetTick>
 80014e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80014e8:	e008      	b.n	80014fc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80014ea:	f7ff fb53 	bl	8000b94 <HAL_GetTick>
 80014ee:	4602      	mov	r2, r0
 80014f0:	693b      	ldr	r3, [r7, #16]
 80014f2:	1ad3      	subs	r3, r2, r3
 80014f4:	2b02      	cmp	r3, #2
 80014f6:	d901      	bls.n	80014fc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80014f8:	2303      	movs	r3, #3
 80014fa:	e06d      	b.n	80015d8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80014fc:	4b29      	ldr	r3, [pc, #164]	; (80015a4 <HAL_RCC_OscConfig+0x4c4>)
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001504:	2b00      	cmp	r3, #0
 8001506:	d1f0      	bne.n	80014ea <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	6a1b      	ldr	r3, [r3, #32]
 800150c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001510:	d108      	bne.n	8001524 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001512:	4b24      	ldr	r3, [pc, #144]	; (80015a4 <HAL_RCC_OscConfig+0x4c4>)
 8001514:	685b      	ldr	r3, [r3, #4]
 8001516:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	689b      	ldr	r3, [r3, #8]
 800151e:	4921      	ldr	r1, [pc, #132]	; (80015a4 <HAL_RCC_OscConfig+0x4c4>)
 8001520:	4313      	orrs	r3, r2
 8001522:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001524:	4b1f      	ldr	r3, [pc, #124]	; (80015a4 <HAL_RCC_OscConfig+0x4c4>)
 8001526:	685b      	ldr	r3, [r3, #4]
 8001528:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	6a19      	ldr	r1, [r3, #32]
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001534:	430b      	orrs	r3, r1
 8001536:	491b      	ldr	r1, [pc, #108]	; (80015a4 <HAL_RCC_OscConfig+0x4c4>)
 8001538:	4313      	orrs	r3, r2
 800153a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800153c:	4b1b      	ldr	r3, [pc, #108]	; (80015ac <HAL_RCC_OscConfig+0x4cc>)
 800153e:	2201      	movs	r2, #1
 8001540:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001542:	f7ff fb27 	bl	8000b94 <HAL_GetTick>
 8001546:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001548:	e008      	b.n	800155c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800154a:	f7ff fb23 	bl	8000b94 <HAL_GetTick>
 800154e:	4602      	mov	r2, r0
 8001550:	693b      	ldr	r3, [r7, #16]
 8001552:	1ad3      	subs	r3, r2, r3
 8001554:	2b02      	cmp	r3, #2
 8001556:	d901      	bls.n	800155c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001558:	2303      	movs	r3, #3
 800155a:	e03d      	b.n	80015d8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800155c:	4b11      	ldr	r3, [pc, #68]	; (80015a4 <HAL_RCC_OscConfig+0x4c4>)
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001564:	2b00      	cmp	r3, #0
 8001566:	d0f0      	beq.n	800154a <HAL_RCC_OscConfig+0x46a>
 8001568:	e035      	b.n	80015d6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800156a:	4b10      	ldr	r3, [pc, #64]	; (80015ac <HAL_RCC_OscConfig+0x4cc>)
 800156c:	2200      	movs	r2, #0
 800156e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001570:	f7ff fb10 	bl	8000b94 <HAL_GetTick>
 8001574:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001576:	e008      	b.n	800158a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001578:	f7ff fb0c 	bl	8000b94 <HAL_GetTick>
 800157c:	4602      	mov	r2, r0
 800157e:	693b      	ldr	r3, [r7, #16]
 8001580:	1ad3      	subs	r3, r2, r3
 8001582:	2b02      	cmp	r3, #2
 8001584:	d901      	bls.n	800158a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001586:	2303      	movs	r3, #3
 8001588:	e026      	b.n	80015d8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800158a:	4b06      	ldr	r3, [pc, #24]	; (80015a4 <HAL_RCC_OscConfig+0x4c4>)
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001592:	2b00      	cmp	r3, #0
 8001594:	d1f0      	bne.n	8001578 <HAL_RCC_OscConfig+0x498>
 8001596:	e01e      	b.n	80015d6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	69db      	ldr	r3, [r3, #28]
 800159c:	2b01      	cmp	r3, #1
 800159e:	d107      	bne.n	80015b0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80015a0:	2301      	movs	r3, #1
 80015a2:	e019      	b.n	80015d8 <HAL_RCC_OscConfig+0x4f8>
 80015a4:	40021000 	.word	0x40021000
 80015a8:	40007000 	.word	0x40007000
 80015ac:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80015b0:	4b0b      	ldr	r3, [pc, #44]	; (80015e0 <HAL_RCC_OscConfig+0x500>)
 80015b2:	685b      	ldr	r3, [r3, #4]
 80015b4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80015b6:	68fb      	ldr	r3, [r7, #12]
 80015b8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	6a1b      	ldr	r3, [r3, #32]
 80015c0:	429a      	cmp	r2, r3
 80015c2:	d106      	bne.n	80015d2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80015ce:	429a      	cmp	r2, r3
 80015d0:	d001      	beq.n	80015d6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80015d2:	2301      	movs	r3, #1
 80015d4:	e000      	b.n	80015d8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80015d6:	2300      	movs	r3, #0
}
 80015d8:	4618      	mov	r0, r3
 80015da:	3718      	adds	r7, #24
 80015dc:	46bd      	mov	sp, r7
 80015de:	bd80      	pop	{r7, pc}
 80015e0:	40021000 	.word	0x40021000

080015e4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b084      	sub	sp, #16
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	6078      	str	r0, [r7, #4]
 80015ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d101      	bne.n	80015f8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80015f4:	2301      	movs	r3, #1
 80015f6:	e0d0      	b.n	800179a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80015f8:	4b6a      	ldr	r3, [pc, #424]	; (80017a4 <HAL_RCC_ClockConfig+0x1c0>)
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	f003 0307 	and.w	r3, r3, #7
 8001600:	683a      	ldr	r2, [r7, #0]
 8001602:	429a      	cmp	r2, r3
 8001604:	d910      	bls.n	8001628 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001606:	4b67      	ldr	r3, [pc, #412]	; (80017a4 <HAL_RCC_ClockConfig+0x1c0>)
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	f023 0207 	bic.w	r2, r3, #7
 800160e:	4965      	ldr	r1, [pc, #404]	; (80017a4 <HAL_RCC_ClockConfig+0x1c0>)
 8001610:	683b      	ldr	r3, [r7, #0]
 8001612:	4313      	orrs	r3, r2
 8001614:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001616:	4b63      	ldr	r3, [pc, #396]	; (80017a4 <HAL_RCC_ClockConfig+0x1c0>)
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	f003 0307 	and.w	r3, r3, #7
 800161e:	683a      	ldr	r2, [r7, #0]
 8001620:	429a      	cmp	r2, r3
 8001622:	d001      	beq.n	8001628 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001624:	2301      	movs	r3, #1
 8001626:	e0b8      	b.n	800179a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	f003 0302 	and.w	r3, r3, #2
 8001630:	2b00      	cmp	r3, #0
 8001632:	d020      	beq.n	8001676 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	f003 0304 	and.w	r3, r3, #4
 800163c:	2b00      	cmp	r3, #0
 800163e:	d005      	beq.n	800164c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001640:	4b59      	ldr	r3, [pc, #356]	; (80017a8 <HAL_RCC_ClockConfig+0x1c4>)
 8001642:	685b      	ldr	r3, [r3, #4]
 8001644:	4a58      	ldr	r2, [pc, #352]	; (80017a8 <HAL_RCC_ClockConfig+0x1c4>)
 8001646:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800164a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	f003 0308 	and.w	r3, r3, #8
 8001654:	2b00      	cmp	r3, #0
 8001656:	d005      	beq.n	8001664 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001658:	4b53      	ldr	r3, [pc, #332]	; (80017a8 <HAL_RCC_ClockConfig+0x1c4>)
 800165a:	685b      	ldr	r3, [r3, #4]
 800165c:	4a52      	ldr	r2, [pc, #328]	; (80017a8 <HAL_RCC_ClockConfig+0x1c4>)
 800165e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001662:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001664:	4b50      	ldr	r3, [pc, #320]	; (80017a8 <HAL_RCC_ClockConfig+0x1c4>)
 8001666:	685b      	ldr	r3, [r3, #4]
 8001668:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	689b      	ldr	r3, [r3, #8]
 8001670:	494d      	ldr	r1, [pc, #308]	; (80017a8 <HAL_RCC_ClockConfig+0x1c4>)
 8001672:	4313      	orrs	r3, r2
 8001674:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	f003 0301 	and.w	r3, r3, #1
 800167e:	2b00      	cmp	r3, #0
 8001680:	d040      	beq.n	8001704 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	685b      	ldr	r3, [r3, #4]
 8001686:	2b01      	cmp	r3, #1
 8001688:	d107      	bne.n	800169a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800168a:	4b47      	ldr	r3, [pc, #284]	; (80017a8 <HAL_RCC_ClockConfig+0x1c4>)
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001692:	2b00      	cmp	r3, #0
 8001694:	d115      	bne.n	80016c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001696:	2301      	movs	r3, #1
 8001698:	e07f      	b.n	800179a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	685b      	ldr	r3, [r3, #4]
 800169e:	2b02      	cmp	r3, #2
 80016a0:	d107      	bne.n	80016b2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016a2:	4b41      	ldr	r3, [pc, #260]	; (80017a8 <HAL_RCC_ClockConfig+0x1c4>)
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d109      	bne.n	80016c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80016ae:	2301      	movs	r3, #1
 80016b0:	e073      	b.n	800179a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016b2:	4b3d      	ldr	r3, [pc, #244]	; (80017a8 <HAL_RCC_ClockConfig+0x1c4>)
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	f003 0302 	and.w	r3, r3, #2
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d101      	bne.n	80016c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80016be:	2301      	movs	r3, #1
 80016c0:	e06b      	b.n	800179a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80016c2:	4b39      	ldr	r3, [pc, #228]	; (80017a8 <HAL_RCC_ClockConfig+0x1c4>)
 80016c4:	685b      	ldr	r3, [r3, #4]
 80016c6:	f023 0203 	bic.w	r2, r3, #3
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	685b      	ldr	r3, [r3, #4]
 80016ce:	4936      	ldr	r1, [pc, #216]	; (80017a8 <HAL_RCC_ClockConfig+0x1c4>)
 80016d0:	4313      	orrs	r3, r2
 80016d2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80016d4:	f7ff fa5e 	bl	8000b94 <HAL_GetTick>
 80016d8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80016da:	e00a      	b.n	80016f2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80016dc:	f7ff fa5a 	bl	8000b94 <HAL_GetTick>
 80016e0:	4602      	mov	r2, r0
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	1ad3      	subs	r3, r2, r3
 80016e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80016ea:	4293      	cmp	r3, r2
 80016ec:	d901      	bls.n	80016f2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80016ee:	2303      	movs	r3, #3
 80016f0:	e053      	b.n	800179a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80016f2:	4b2d      	ldr	r3, [pc, #180]	; (80017a8 <HAL_RCC_ClockConfig+0x1c4>)
 80016f4:	685b      	ldr	r3, [r3, #4]
 80016f6:	f003 020c 	and.w	r2, r3, #12
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	685b      	ldr	r3, [r3, #4]
 80016fe:	009b      	lsls	r3, r3, #2
 8001700:	429a      	cmp	r2, r3
 8001702:	d1eb      	bne.n	80016dc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001704:	4b27      	ldr	r3, [pc, #156]	; (80017a4 <HAL_RCC_ClockConfig+0x1c0>)
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	f003 0307 	and.w	r3, r3, #7
 800170c:	683a      	ldr	r2, [r7, #0]
 800170e:	429a      	cmp	r2, r3
 8001710:	d210      	bcs.n	8001734 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001712:	4b24      	ldr	r3, [pc, #144]	; (80017a4 <HAL_RCC_ClockConfig+0x1c0>)
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	f023 0207 	bic.w	r2, r3, #7
 800171a:	4922      	ldr	r1, [pc, #136]	; (80017a4 <HAL_RCC_ClockConfig+0x1c0>)
 800171c:	683b      	ldr	r3, [r7, #0]
 800171e:	4313      	orrs	r3, r2
 8001720:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001722:	4b20      	ldr	r3, [pc, #128]	; (80017a4 <HAL_RCC_ClockConfig+0x1c0>)
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	f003 0307 	and.w	r3, r3, #7
 800172a:	683a      	ldr	r2, [r7, #0]
 800172c:	429a      	cmp	r2, r3
 800172e:	d001      	beq.n	8001734 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001730:	2301      	movs	r3, #1
 8001732:	e032      	b.n	800179a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	f003 0304 	and.w	r3, r3, #4
 800173c:	2b00      	cmp	r3, #0
 800173e:	d008      	beq.n	8001752 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001740:	4b19      	ldr	r3, [pc, #100]	; (80017a8 <HAL_RCC_ClockConfig+0x1c4>)
 8001742:	685b      	ldr	r3, [r3, #4]
 8001744:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	68db      	ldr	r3, [r3, #12]
 800174c:	4916      	ldr	r1, [pc, #88]	; (80017a8 <HAL_RCC_ClockConfig+0x1c4>)
 800174e:	4313      	orrs	r3, r2
 8001750:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	f003 0308 	and.w	r3, r3, #8
 800175a:	2b00      	cmp	r3, #0
 800175c:	d009      	beq.n	8001772 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800175e:	4b12      	ldr	r3, [pc, #72]	; (80017a8 <HAL_RCC_ClockConfig+0x1c4>)
 8001760:	685b      	ldr	r3, [r3, #4]
 8001762:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	691b      	ldr	r3, [r3, #16]
 800176a:	00db      	lsls	r3, r3, #3
 800176c:	490e      	ldr	r1, [pc, #56]	; (80017a8 <HAL_RCC_ClockConfig+0x1c4>)
 800176e:	4313      	orrs	r3, r2
 8001770:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001772:	f000 f821 	bl	80017b8 <HAL_RCC_GetSysClockFreq>
 8001776:	4602      	mov	r2, r0
 8001778:	4b0b      	ldr	r3, [pc, #44]	; (80017a8 <HAL_RCC_ClockConfig+0x1c4>)
 800177a:	685b      	ldr	r3, [r3, #4]
 800177c:	091b      	lsrs	r3, r3, #4
 800177e:	f003 030f 	and.w	r3, r3, #15
 8001782:	490a      	ldr	r1, [pc, #40]	; (80017ac <HAL_RCC_ClockConfig+0x1c8>)
 8001784:	5ccb      	ldrb	r3, [r1, r3]
 8001786:	fa22 f303 	lsr.w	r3, r2, r3
 800178a:	4a09      	ldr	r2, [pc, #36]	; (80017b0 <HAL_RCC_ClockConfig+0x1cc>)
 800178c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800178e:	4b09      	ldr	r3, [pc, #36]	; (80017b4 <HAL_RCC_ClockConfig+0x1d0>)
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	4618      	mov	r0, r3
 8001794:	f7ff f9bc 	bl	8000b10 <HAL_InitTick>

  return HAL_OK;
 8001798:	2300      	movs	r3, #0
}
 800179a:	4618      	mov	r0, r3
 800179c:	3710      	adds	r7, #16
 800179e:	46bd      	mov	sp, r7
 80017a0:	bd80      	pop	{r7, pc}
 80017a2:	bf00      	nop
 80017a4:	40022000 	.word	0x40022000
 80017a8:	40021000 	.word	0x40021000
 80017ac:	0800264c 	.word	0x0800264c
 80017b0:	20000008 	.word	0x20000008
 80017b4:	2000000c 	.word	0x2000000c

080017b8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80017b8:	b480      	push	{r7}
 80017ba:	b087      	sub	sp, #28
 80017bc:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80017be:	2300      	movs	r3, #0
 80017c0:	60fb      	str	r3, [r7, #12]
 80017c2:	2300      	movs	r3, #0
 80017c4:	60bb      	str	r3, [r7, #8]
 80017c6:	2300      	movs	r3, #0
 80017c8:	617b      	str	r3, [r7, #20]
 80017ca:	2300      	movs	r3, #0
 80017cc:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80017ce:	2300      	movs	r3, #0
 80017d0:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80017d2:	4b1e      	ldr	r3, [pc, #120]	; (800184c <HAL_RCC_GetSysClockFreq+0x94>)
 80017d4:	685b      	ldr	r3, [r3, #4]
 80017d6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	f003 030c 	and.w	r3, r3, #12
 80017de:	2b04      	cmp	r3, #4
 80017e0:	d002      	beq.n	80017e8 <HAL_RCC_GetSysClockFreq+0x30>
 80017e2:	2b08      	cmp	r3, #8
 80017e4:	d003      	beq.n	80017ee <HAL_RCC_GetSysClockFreq+0x36>
 80017e6:	e027      	b.n	8001838 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80017e8:	4b19      	ldr	r3, [pc, #100]	; (8001850 <HAL_RCC_GetSysClockFreq+0x98>)
 80017ea:	613b      	str	r3, [r7, #16]
      break;
 80017ec:	e027      	b.n	800183e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	0c9b      	lsrs	r3, r3, #18
 80017f2:	f003 030f 	and.w	r3, r3, #15
 80017f6:	4a17      	ldr	r2, [pc, #92]	; (8001854 <HAL_RCC_GetSysClockFreq+0x9c>)
 80017f8:	5cd3      	ldrb	r3, [r2, r3]
 80017fa:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001802:	2b00      	cmp	r3, #0
 8001804:	d010      	beq.n	8001828 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001806:	4b11      	ldr	r3, [pc, #68]	; (800184c <HAL_RCC_GetSysClockFreq+0x94>)
 8001808:	685b      	ldr	r3, [r3, #4]
 800180a:	0c5b      	lsrs	r3, r3, #17
 800180c:	f003 0301 	and.w	r3, r3, #1
 8001810:	4a11      	ldr	r2, [pc, #68]	; (8001858 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001812:	5cd3      	ldrb	r3, [r2, r3]
 8001814:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	4a0d      	ldr	r2, [pc, #52]	; (8001850 <HAL_RCC_GetSysClockFreq+0x98>)
 800181a:	fb03 f202 	mul.w	r2, r3, r2
 800181e:	68bb      	ldr	r3, [r7, #8]
 8001820:	fbb2 f3f3 	udiv	r3, r2, r3
 8001824:	617b      	str	r3, [r7, #20]
 8001826:	e004      	b.n	8001832 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	4a0c      	ldr	r2, [pc, #48]	; (800185c <HAL_RCC_GetSysClockFreq+0xa4>)
 800182c:	fb02 f303 	mul.w	r3, r2, r3
 8001830:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001832:	697b      	ldr	r3, [r7, #20]
 8001834:	613b      	str	r3, [r7, #16]
      break;
 8001836:	e002      	b.n	800183e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001838:	4b05      	ldr	r3, [pc, #20]	; (8001850 <HAL_RCC_GetSysClockFreq+0x98>)
 800183a:	613b      	str	r3, [r7, #16]
      break;
 800183c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800183e:	693b      	ldr	r3, [r7, #16]
}
 8001840:	4618      	mov	r0, r3
 8001842:	371c      	adds	r7, #28
 8001844:	46bd      	mov	sp, r7
 8001846:	bc80      	pop	{r7}
 8001848:	4770      	bx	lr
 800184a:	bf00      	nop
 800184c:	40021000 	.word	0x40021000
 8001850:	007a1200 	.word	0x007a1200
 8001854:	08002664 	.word	0x08002664
 8001858:	08002674 	.word	0x08002674
 800185c:	003d0900 	.word	0x003d0900

08001860 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001860:	b480      	push	{r7}
 8001862:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001864:	4b02      	ldr	r3, [pc, #8]	; (8001870 <HAL_RCC_GetHCLKFreq+0x10>)
 8001866:	681b      	ldr	r3, [r3, #0]
}
 8001868:	4618      	mov	r0, r3
 800186a:	46bd      	mov	sp, r7
 800186c:	bc80      	pop	{r7}
 800186e:	4770      	bx	lr
 8001870:	20000008 	.word	0x20000008

08001874 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001878:	f7ff fff2 	bl	8001860 <HAL_RCC_GetHCLKFreq>
 800187c:	4602      	mov	r2, r0
 800187e:	4b05      	ldr	r3, [pc, #20]	; (8001894 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001880:	685b      	ldr	r3, [r3, #4]
 8001882:	0a1b      	lsrs	r3, r3, #8
 8001884:	f003 0307 	and.w	r3, r3, #7
 8001888:	4903      	ldr	r1, [pc, #12]	; (8001898 <HAL_RCC_GetPCLK1Freq+0x24>)
 800188a:	5ccb      	ldrb	r3, [r1, r3]
 800188c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001890:	4618      	mov	r0, r3
 8001892:	bd80      	pop	{r7, pc}
 8001894:	40021000 	.word	0x40021000
 8001898:	0800265c 	.word	0x0800265c

0800189c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80018a0:	f7ff ffde 	bl	8001860 <HAL_RCC_GetHCLKFreq>
 80018a4:	4602      	mov	r2, r0
 80018a6:	4b05      	ldr	r3, [pc, #20]	; (80018bc <HAL_RCC_GetPCLK2Freq+0x20>)
 80018a8:	685b      	ldr	r3, [r3, #4]
 80018aa:	0adb      	lsrs	r3, r3, #11
 80018ac:	f003 0307 	and.w	r3, r3, #7
 80018b0:	4903      	ldr	r1, [pc, #12]	; (80018c0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80018b2:	5ccb      	ldrb	r3, [r1, r3]
 80018b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80018b8:	4618      	mov	r0, r3
 80018ba:	bd80      	pop	{r7, pc}
 80018bc:	40021000 	.word	0x40021000
 80018c0:	0800265c 	.word	0x0800265c

080018c4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80018c4:	b480      	push	{r7}
 80018c6:	b085      	sub	sp, #20
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80018cc:	4b0a      	ldr	r3, [pc, #40]	; (80018f8 <RCC_Delay+0x34>)
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	4a0a      	ldr	r2, [pc, #40]	; (80018fc <RCC_Delay+0x38>)
 80018d2:	fba2 2303 	umull	r2, r3, r2, r3
 80018d6:	0a5b      	lsrs	r3, r3, #9
 80018d8:	687a      	ldr	r2, [r7, #4]
 80018da:	fb02 f303 	mul.w	r3, r2, r3
 80018de:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80018e0:	bf00      	nop
  }
  while (Delay --);
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	1e5a      	subs	r2, r3, #1
 80018e6:	60fa      	str	r2, [r7, #12]
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d1f9      	bne.n	80018e0 <RCC_Delay+0x1c>
}
 80018ec:	bf00      	nop
 80018ee:	bf00      	nop
 80018f0:	3714      	adds	r7, #20
 80018f2:	46bd      	mov	sp, r7
 80018f4:	bc80      	pop	{r7}
 80018f6:	4770      	bx	lr
 80018f8:	20000008 	.word	0x20000008
 80018fc:	10624dd3 	.word	0x10624dd3

08001900 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	b082      	sub	sp, #8
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	2b00      	cmp	r3, #0
 800190c:	d101      	bne.n	8001912 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800190e:	2301      	movs	r3, #1
 8001910:	e076      	b.n	8001a00 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001916:	2b00      	cmp	r3, #0
 8001918:	d108      	bne.n	800192c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	685b      	ldr	r3, [r3, #4]
 800191e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001922:	d009      	beq.n	8001938 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	2200      	movs	r2, #0
 8001928:	61da      	str	r2, [r3, #28]
 800192a:	e005      	b.n	8001938 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	2200      	movs	r2, #0
 8001930:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	2200      	movs	r2, #0
 8001936:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	2200      	movs	r2, #0
 800193c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001944:	b2db      	uxtb	r3, r3
 8001946:	2b00      	cmp	r3, #0
 8001948:	d106      	bne.n	8001958 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	2200      	movs	r2, #0
 800194e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001952:	6878      	ldr	r0, [r7, #4]
 8001954:	f7fe ffdc 	bl	8000910 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	2202      	movs	r2, #2
 800195c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	681a      	ldr	r2, [r3, #0]
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800196e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	685b      	ldr	r3, [r3, #4]
 8001974:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	689b      	ldr	r3, [r3, #8]
 800197c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8001980:	431a      	orrs	r2, r3
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	68db      	ldr	r3, [r3, #12]
 8001986:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800198a:	431a      	orrs	r2, r3
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	691b      	ldr	r3, [r3, #16]
 8001990:	f003 0302 	and.w	r3, r3, #2
 8001994:	431a      	orrs	r2, r3
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	695b      	ldr	r3, [r3, #20]
 800199a:	f003 0301 	and.w	r3, r3, #1
 800199e:	431a      	orrs	r2, r3
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	699b      	ldr	r3, [r3, #24]
 80019a4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80019a8:	431a      	orrs	r2, r3
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	69db      	ldr	r3, [r3, #28]
 80019ae:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80019b2:	431a      	orrs	r2, r3
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	6a1b      	ldr	r3, [r3, #32]
 80019b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80019bc:	ea42 0103 	orr.w	r1, r2, r3
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019c4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	430a      	orrs	r2, r1
 80019ce:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	699b      	ldr	r3, [r3, #24]
 80019d4:	0c1a      	lsrs	r2, r3, #16
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	f002 0204 	and.w	r2, r2, #4
 80019de:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	69da      	ldr	r2, [r3, #28]
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80019ee:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	2200      	movs	r2, #0
 80019f4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	2201      	movs	r2, #1
 80019fa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80019fe:	2300      	movs	r3, #0
}
 8001a00:	4618      	mov	r0, r3
 8001a02:	3708      	adds	r7, #8
 8001a04:	46bd      	mov	sp, r7
 8001a06:	bd80      	pop	{r7, pc}

08001a08 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b088      	sub	sp, #32
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	60f8      	str	r0, [r7, #12]
 8001a10:	60b9      	str	r1, [r7, #8]
 8001a12:	603b      	str	r3, [r7, #0]
 8001a14:	4613      	mov	r3, r2
 8001a16:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8001a18:	2300      	movs	r3, #0
 8001a1a:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001a22:	2b01      	cmp	r3, #1
 8001a24:	d101      	bne.n	8001a2a <HAL_SPI_Transmit+0x22>
 8001a26:	2302      	movs	r3, #2
 8001a28:	e12d      	b.n	8001c86 <HAL_SPI_Transmit+0x27e>
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	2201      	movs	r2, #1
 8001a2e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001a32:	f7ff f8af 	bl	8000b94 <HAL_GetTick>
 8001a36:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8001a38:	88fb      	ldrh	r3, [r7, #6]
 8001a3a:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001a42:	b2db      	uxtb	r3, r3
 8001a44:	2b01      	cmp	r3, #1
 8001a46:	d002      	beq.n	8001a4e <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8001a48:	2302      	movs	r3, #2
 8001a4a:	77fb      	strb	r3, [r7, #31]
    goto error;
 8001a4c:	e116      	b.n	8001c7c <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 8001a4e:	68bb      	ldr	r3, [r7, #8]
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d002      	beq.n	8001a5a <HAL_SPI_Transmit+0x52>
 8001a54:	88fb      	ldrh	r3, [r7, #6]
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d102      	bne.n	8001a60 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8001a5a:	2301      	movs	r3, #1
 8001a5c:	77fb      	strb	r3, [r7, #31]
    goto error;
 8001a5e:	e10d      	b.n	8001c7c <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	2203      	movs	r2, #3
 8001a64:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	68ba      	ldr	r2, [r7, #8]
 8001a72:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	88fa      	ldrh	r2, [r7, #6]
 8001a78:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	88fa      	ldrh	r2, [r7, #6]
 8001a7e:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	2200      	movs	r2, #0
 8001a84:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	2200      	movs	r2, #0
 8001a8a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	2200      	movs	r2, #0
 8001a90:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	2200      	movs	r2, #0
 8001a96:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	689b      	ldr	r3, [r3, #8]
 8001aa2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001aa6:	d10f      	bne.n	8001ac8 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	681a      	ldr	r2, [r3, #0]
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001ab6:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	681a      	ldr	r2, [r3, #0]
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001ac6:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ad2:	2b40      	cmp	r3, #64	; 0x40
 8001ad4:	d007      	beq.n	8001ae6 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	681a      	ldr	r2, [r3, #0]
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001ae4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	68db      	ldr	r3, [r3, #12]
 8001aea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001aee:	d14f      	bne.n	8001b90 <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	685b      	ldr	r3, [r3, #4]
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d002      	beq.n	8001afe <HAL_SPI_Transmit+0xf6>
 8001af8:	8afb      	ldrh	r3, [r7, #22]
 8001afa:	2b01      	cmp	r3, #1
 8001afc:	d142      	bne.n	8001b84 <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b02:	881a      	ldrh	r2, [r3, #0]
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b0e:	1c9a      	adds	r2, r3, #2
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001b18:	b29b      	uxth	r3, r3
 8001b1a:	3b01      	subs	r3, #1
 8001b1c:	b29a      	uxth	r2, r3
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8001b22:	e02f      	b.n	8001b84 <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	689b      	ldr	r3, [r3, #8]
 8001b2a:	f003 0302 	and.w	r3, r3, #2
 8001b2e:	2b02      	cmp	r3, #2
 8001b30:	d112      	bne.n	8001b58 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b36:	881a      	ldrh	r2, [r3, #0]
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b42:	1c9a      	adds	r2, r3, #2
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001b4c:	b29b      	uxth	r3, r3
 8001b4e:	3b01      	subs	r3, #1
 8001b50:	b29a      	uxth	r2, r3
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	86da      	strh	r2, [r3, #54]	; 0x36
 8001b56:	e015      	b.n	8001b84 <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001b58:	f7ff f81c 	bl	8000b94 <HAL_GetTick>
 8001b5c:	4602      	mov	r2, r0
 8001b5e:	69bb      	ldr	r3, [r7, #24]
 8001b60:	1ad3      	subs	r3, r2, r3
 8001b62:	683a      	ldr	r2, [r7, #0]
 8001b64:	429a      	cmp	r2, r3
 8001b66:	d803      	bhi.n	8001b70 <HAL_SPI_Transmit+0x168>
 8001b68:	683b      	ldr	r3, [r7, #0]
 8001b6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b6e:	d102      	bne.n	8001b76 <HAL_SPI_Transmit+0x16e>
 8001b70:	683b      	ldr	r3, [r7, #0]
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d106      	bne.n	8001b84 <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 8001b76:	2303      	movs	r3, #3
 8001b78:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	2201      	movs	r2, #1
 8001b7e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8001b82:	e07b      	b.n	8001c7c <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001b88:	b29b      	uxth	r3, r3
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d1ca      	bne.n	8001b24 <HAL_SPI_Transmit+0x11c>
 8001b8e:	e050      	b.n	8001c32 <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	685b      	ldr	r3, [r3, #4]
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d002      	beq.n	8001b9e <HAL_SPI_Transmit+0x196>
 8001b98:	8afb      	ldrh	r3, [r7, #22]
 8001b9a:	2b01      	cmp	r3, #1
 8001b9c:	d144      	bne.n	8001c28 <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	330c      	adds	r3, #12
 8001ba8:	7812      	ldrb	r2, [r2, #0]
 8001baa:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bb0:	1c5a      	adds	r2, r3, #1
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001bba:	b29b      	uxth	r3, r3
 8001bbc:	3b01      	subs	r3, #1
 8001bbe:	b29a      	uxth	r2, r3
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8001bc4:	e030      	b.n	8001c28 <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	689b      	ldr	r3, [r3, #8]
 8001bcc:	f003 0302 	and.w	r3, r3, #2
 8001bd0:	2b02      	cmp	r3, #2
 8001bd2:	d113      	bne.n	8001bfc <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	330c      	adds	r3, #12
 8001bde:	7812      	ldrb	r2, [r2, #0]
 8001be0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001be6:	1c5a      	adds	r2, r3, #1
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001bf0:	b29b      	uxth	r3, r3
 8001bf2:	3b01      	subs	r3, #1
 8001bf4:	b29a      	uxth	r2, r3
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	86da      	strh	r2, [r3, #54]	; 0x36
 8001bfa:	e015      	b.n	8001c28 <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001bfc:	f7fe ffca 	bl	8000b94 <HAL_GetTick>
 8001c00:	4602      	mov	r2, r0
 8001c02:	69bb      	ldr	r3, [r7, #24]
 8001c04:	1ad3      	subs	r3, r2, r3
 8001c06:	683a      	ldr	r2, [r7, #0]
 8001c08:	429a      	cmp	r2, r3
 8001c0a:	d803      	bhi.n	8001c14 <HAL_SPI_Transmit+0x20c>
 8001c0c:	683b      	ldr	r3, [r7, #0]
 8001c0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c12:	d102      	bne.n	8001c1a <HAL_SPI_Transmit+0x212>
 8001c14:	683b      	ldr	r3, [r7, #0]
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d106      	bne.n	8001c28 <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 8001c1a:	2303      	movs	r3, #3
 8001c1c:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	2201      	movs	r2, #1
 8001c22:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8001c26:	e029      	b.n	8001c7c <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001c2c:	b29b      	uxth	r3, r3
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d1c9      	bne.n	8001bc6 <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001c32:	69ba      	ldr	r2, [r7, #24]
 8001c34:	6839      	ldr	r1, [r7, #0]
 8001c36:	68f8      	ldr	r0, [r7, #12]
 8001c38:	f000 fbcc 	bl	80023d4 <SPI_EndRxTxTransaction>
 8001c3c:	4603      	mov	r3, r0
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d002      	beq.n	8001c48 <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	2220      	movs	r2, #32
 8001c46:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	689b      	ldr	r3, [r3, #8]
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d10a      	bne.n	8001c66 <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001c50:	2300      	movs	r3, #0
 8001c52:	613b      	str	r3, [r7, #16]
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	68db      	ldr	r3, [r3, #12]
 8001c5a:	613b      	str	r3, [r7, #16]
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	689b      	ldr	r3, [r3, #8]
 8001c62:	613b      	str	r3, [r7, #16]
 8001c64:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d002      	beq.n	8001c74 <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 8001c6e:	2301      	movs	r3, #1
 8001c70:	77fb      	strb	r3, [r7, #31]
 8001c72:	e003      	b.n	8001c7c <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	2201      	movs	r2, #1
 8001c78:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	2200      	movs	r2, #0
 8001c80:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8001c84:	7ffb      	ldrb	r3, [r7, #31]
}
 8001c86:	4618      	mov	r0, r3
 8001c88:	3720      	adds	r7, #32
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	bd80      	pop	{r7, pc}

08001c8e <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001c8e:	b580      	push	{r7, lr}
 8001c90:	b088      	sub	sp, #32
 8001c92:	af02      	add	r7, sp, #8
 8001c94:	60f8      	str	r0, [r7, #12]
 8001c96:	60b9      	str	r1, [r7, #8]
 8001c98:	603b      	str	r3, [r7, #0]
 8001c9a:	4613      	mov	r3, r2
 8001c9c:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001ca8:	b2db      	uxtb	r3, r3
 8001caa:	2b01      	cmp	r3, #1
 8001cac:	d002      	beq.n	8001cb4 <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 8001cae:	2302      	movs	r3, #2
 8001cb0:	75fb      	strb	r3, [r7, #23]
    goto error;
 8001cb2:	e0fb      	b.n	8001eac <HAL_SPI_Receive+0x21e>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	685b      	ldr	r3, [r3, #4]
 8001cb8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001cbc:	d112      	bne.n	8001ce4 <HAL_SPI_Receive+0x56>
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	689b      	ldr	r3, [r3, #8]
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d10e      	bne.n	8001ce4 <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	2204      	movs	r2, #4
 8001cca:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8001cce:	88fa      	ldrh	r2, [r7, #6]
 8001cd0:	683b      	ldr	r3, [r7, #0]
 8001cd2:	9300      	str	r3, [sp, #0]
 8001cd4:	4613      	mov	r3, r2
 8001cd6:	68ba      	ldr	r2, [r7, #8]
 8001cd8:	68b9      	ldr	r1, [r7, #8]
 8001cda:	68f8      	ldr	r0, [r7, #12]
 8001cdc:	f000 f8ef 	bl	8001ebe <HAL_SPI_TransmitReceive>
 8001ce0:	4603      	mov	r3, r0
 8001ce2:	e0e8      	b.n	8001eb6 <HAL_SPI_Receive+0x228>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001cea:	2b01      	cmp	r3, #1
 8001cec:	d101      	bne.n	8001cf2 <HAL_SPI_Receive+0x64>
 8001cee:	2302      	movs	r3, #2
 8001cf0:	e0e1      	b.n	8001eb6 <HAL_SPI_Receive+0x228>
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	2201      	movs	r2, #1
 8001cf6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001cfa:	f7fe ff4b 	bl	8000b94 <HAL_GetTick>
 8001cfe:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 8001d00:	68bb      	ldr	r3, [r7, #8]
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d002      	beq.n	8001d0c <HAL_SPI_Receive+0x7e>
 8001d06:	88fb      	ldrh	r3, [r7, #6]
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d102      	bne.n	8001d12 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8001d0c:	2301      	movs	r3, #1
 8001d0e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8001d10:	e0cc      	b.n	8001eac <HAL_SPI_Receive+0x21e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	2204      	movs	r2, #4
 8001d16:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	68ba      	ldr	r2, [r7, #8]
 8001d24:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	88fa      	ldrh	r2, [r7, #6]
 8001d2a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	88fa      	ldrh	r2, [r7, #6]
 8001d30:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	2200      	movs	r2, #0
 8001d36:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	2200      	movs	r2, #0
 8001d42:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	2200      	movs	r2, #0
 8001d48:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	689b      	ldr	r3, [r3, #8]
 8001d54:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001d58:	d10f      	bne.n	8001d7a <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	681a      	ldr	r2, [r3, #0]
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001d68:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	681a      	ldr	r2, [r3, #0]
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001d78:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d84:	2b40      	cmp	r3, #64	; 0x40
 8001d86:	d007      	beq.n	8001d98 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	681a      	ldr	r2, [r3, #0]
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001d96:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	68db      	ldr	r3, [r3, #12]
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d16a      	bne.n	8001e76 <HAL_SPI_Receive+0x1e8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8001da0:	e032      	b.n	8001e08 <HAL_SPI_Receive+0x17a>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	689b      	ldr	r3, [r3, #8]
 8001da8:	f003 0301 	and.w	r3, r3, #1
 8001dac:	2b01      	cmp	r3, #1
 8001dae:	d115      	bne.n	8001ddc <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	f103 020c 	add.w	r2, r3, #12
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001dbc:	7812      	ldrb	r2, [r2, #0]
 8001dbe:	b2d2      	uxtb	r2, r2
 8001dc0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001dc6:	1c5a      	adds	r2, r3, #1
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001dd0:	b29b      	uxth	r3, r3
 8001dd2:	3b01      	subs	r3, #1
 8001dd4:	b29a      	uxth	r2, r3
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	87da      	strh	r2, [r3, #62]	; 0x3e
 8001dda:	e015      	b.n	8001e08 <HAL_SPI_Receive+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001ddc:	f7fe feda 	bl	8000b94 <HAL_GetTick>
 8001de0:	4602      	mov	r2, r0
 8001de2:	693b      	ldr	r3, [r7, #16]
 8001de4:	1ad3      	subs	r3, r2, r3
 8001de6:	683a      	ldr	r2, [r7, #0]
 8001de8:	429a      	cmp	r2, r3
 8001dea:	d803      	bhi.n	8001df4 <HAL_SPI_Receive+0x166>
 8001dec:	683b      	ldr	r3, [r7, #0]
 8001dee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001df2:	d102      	bne.n	8001dfa <HAL_SPI_Receive+0x16c>
 8001df4:	683b      	ldr	r3, [r7, #0]
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d106      	bne.n	8001e08 <HAL_SPI_Receive+0x17a>
        {
          errorcode = HAL_TIMEOUT;
 8001dfa:	2303      	movs	r3, #3
 8001dfc:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	2201      	movs	r2, #1
 8001e02:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8001e06:	e051      	b.n	8001eac <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001e0c:	b29b      	uxth	r3, r3
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d1c7      	bne.n	8001da2 <HAL_SPI_Receive+0x114>
 8001e12:	e035      	b.n	8001e80 <HAL_SPI_Receive+0x1f2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	689b      	ldr	r3, [r3, #8]
 8001e1a:	f003 0301 	and.w	r3, r3, #1
 8001e1e:	2b01      	cmp	r3, #1
 8001e20:	d113      	bne.n	8001e4a <HAL_SPI_Receive+0x1bc>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	68da      	ldr	r2, [r3, #12]
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e2c:	b292      	uxth	r2, r2
 8001e2e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e34:	1c9a      	adds	r2, r3, #2
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001e3e:	b29b      	uxth	r3, r3
 8001e40:	3b01      	subs	r3, #1
 8001e42:	b29a      	uxth	r2, r3
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	87da      	strh	r2, [r3, #62]	; 0x3e
 8001e48:	e015      	b.n	8001e76 <HAL_SPI_Receive+0x1e8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001e4a:	f7fe fea3 	bl	8000b94 <HAL_GetTick>
 8001e4e:	4602      	mov	r2, r0
 8001e50:	693b      	ldr	r3, [r7, #16]
 8001e52:	1ad3      	subs	r3, r2, r3
 8001e54:	683a      	ldr	r2, [r7, #0]
 8001e56:	429a      	cmp	r2, r3
 8001e58:	d803      	bhi.n	8001e62 <HAL_SPI_Receive+0x1d4>
 8001e5a:	683b      	ldr	r3, [r7, #0]
 8001e5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e60:	d102      	bne.n	8001e68 <HAL_SPI_Receive+0x1da>
 8001e62:	683b      	ldr	r3, [r7, #0]
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d106      	bne.n	8001e76 <HAL_SPI_Receive+0x1e8>
        {
          errorcode = HAL_TIMEOUT;
 8001e68:	2303      	movs	r3, #3
 8001e6a:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	2201      	movs	r2, #1
 8001e70:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8001e74:	e01a      	b.n	8001eac <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001e7a:	b29b      	uxth	r3, r3
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d1c9      	bne.n	8001e14 <HAL_SPI_Receive+0x186>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001e80:	693a      	ldr	r2, [r7, #16]
 8001e82:	6839      	ldr	r1, [r7, #0]
 8001e84:	68f8      	ldr	r0, [r7, #12]
 8001e86:	f000 fa53 	bl	8002330 <SPI_EndRxTransaction>
 8001e8a:	4603      	mov	r3, r0
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d002      	beq.n	8001e96 <HAL_SPI_Receive+0x208>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	2220      	movs	r2, #32
 8001e94:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d002      	beq.n	8001ea4 <HAL_SPI_Receive+0x216>
  {
    errorcode = HAL_ERROR;
 8001e9e:	2301      	movs	r3, #1
 8001ea0:	75fb      	strb	r3, [r7, #23]
 8001ea2:	e003      	b.n	8001eac <HAL_SPI_Receive+0x21e>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	2201      	movs	r2, #1
 8001ea8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error :
  __HAL_UNLOCK(hspi);
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	2200      	movs	r2, #0
 8001eb0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8001eb4:	7dfb      	ldrb	r3, [r7, #23]
}
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	3718      	adds	r7, #24
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	bd80      	pop	{r7, pc}

08001ebe <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8001ebe:	b580      	push	{r7, lr}
 8001ec0:	b08c      	sub	sp, #48	; 0x30
 8001ec2:	af00      	add	r7, sp, #0
 8001ec4:	60f8      	str	r0, [r7, #12]
 8001ec6:	60b9      	str	r1, [r7, #8]
 8001ec8:	607a      	str	r2, [r7, #4]
 8001eca:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8001ecc:	2301      	movs	r3, #1
 8001ece:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001edc:	2b01      	cmp	r3, #1
 8001ede:	d101      	bne.n	8001ee4 <HAL_SPI_TransmitReceive+0x26>
 8001ee0:	2302      	movs	r3, #2
 8001ee2:	e198      	b.n	8002216 <HAL_SPI_TransmitReceive+0x358>
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	2201      	movs	r2, #1
 8001ee8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001eec:	f7fe fe52 	bl	8000b94 <HAL_GetTick>
 8001ef0:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001ef8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	685b      	ldr	r3, [r3, #4]
 8001f00:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8001f02:	887b      	ldrh	r3, [r7, #2]
 8001f04:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8001f06:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001f0a:	2b01      	cmp	r3, #1
 8001f0c:	d00f      	beq.n	8001f2e <HAL_SPI_TransmitReceive+0x70>
 8001f0e:	69fb      	ldr	r3, [r7, #28]
 8001f10:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001f14:	d107      	bne.n	8001f26 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	689b      	ldr	r3, [r3, #8]
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d103      	bne.n	8001f26 <HAL_SPI_TransmitReceive+0x68>
 8001f1e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001f22:	2b04      	cmp	r3, #4
 8001f24:	d003      	beq.n	8001f2e <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8001f26:	2302      	movs	r3, #2
 8001f28:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8001f2c:	e16d      	b.n	800220a <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8001f2e:	68bb      	ldr	r3, [r7, #8]
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d005      	beq.n	8001f40 <HAL_SPI_TransmitReceive+0x82>
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d002      	beq.n	8001f40 <HAL_SPI_TransmitReceive+0x82>
 8001f3a:	887b      	ldrh	r3, [r7, #2]
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d103      	bne.n	8001f48 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8001f40:	2301      	movs	r3, #1
 8001f42:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8001f46:	e160      	b.n	800220a <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001f4e:	b2db      	uxtb	r3, r3
 8001f50:	2b04      	cmp	r3, #4
 8001f52:	d003      	beq.n	8001f5c <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	2205      	movs	r2, #5
 8001f58:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	2200      	movs	r2, #0
 8001f60:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	687a      	ldr	r2, [r7, #4]
 8001f66:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	887a      	ldrh	r2, [r7, #2]
 8001f6c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	887a      	ldrh	r2, [r7, #2]
 8001f72:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	68ba      	ldr	r2, [r7, #8]
 8001f78:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	887a      	ldrh	r2, [r7, #2]
 8001f7e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	887a      	ldrh	r2, [r7, #2]
 8001f84:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	2200      	movs	r2, #0
 8001f8a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	2200      	movs	r2, #0
 8001f90:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f9c:	2b40      	cmp	r3, #64	; 0x40
 8001f9e:	d007      	beq.n	8001fb0 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	681a      	ldr	r2, [r3, #0]
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001fae:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	68db      	ldr	r3, [r3, #12]
 8001fb4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001fb8:	d17c      	bne.n	80020b4 <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	685b      	ldr	r3, [r3, #4]
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d002      	beq.n	8001fc8 <HAL_SPI_TransmitReceive+0x10a>
 8001fc2:	8b7b      	ldrh	r3, [r7, #26]
 8001fc4:	2b01      	cmp	r3, #1
 8001fc6:	d16a      	bne.n	800209e <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fcc:	881a      	ldrh	r2, [r3, #0]
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fd8:	1c9a      	adds	r2, r3, #2
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001fe2:	b29b      	uxth	r3, r3
 8001fe4:	3b01      	subs	r3, #1
 8001fe6:	b29a      	uxth	r2, r3
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001fec:	e057      	b.n	800209e <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	689b      	ldr	r3, [r3, #8]
 8001ff4:	f003 0302 	and.w	r3, r3, #2
 8001ff8:	2b02      	cmp	r3, #2
 8001ffa:	d11b      	bne.n	8002034 <HAL_SPI_TransmitReceive+0x176>
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002000:	b29b      	uxth	r3, r3
 8002002:	2b00      	cmp	r3, #0
 8002004:	d016      	beq.n	8002034 <HAL_SPI_TransmitReceive+0x176>
 8002006:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002008:	2b01      	cmp	r3, #1
 800200a:	d113      	bne.n	8002034 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002010:	881a      	ldrh	r2, [r3, #0]
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800201c:	1c9a      	adds	r2, r3, #2
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002026:	b29b      	uxth	r3, r3
 8002028:	3b01      	subs	r3, #1
 800202a:	b29a      	uxth	r2, r3
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002030:	2300      	movs	r3, #0
 8002032:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	689b      	ldr	r3, [r3, #8]
 800203a:	f003 0301 	and.w	r3, r3, #1
 800203e:	2b01      	cmp	r3, #1
 8002040:	d119      	bne.n	8002076 <HAL_SPI_TransmitReceive+0x1b8>
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002046:	b29b      	uxth	r3, r3
 8002048:	2b00      	cmp	r3, #0
 800204a:	d014      	beq.n	8002076 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	68da      	ldr	r2, [r3, #12]
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002056:	b292      	uxth	r2, r2
 8002058:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800205e:	1c9a      	adds	r2, r3, #2
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002068:	b29b      	uxth	r3, r3
 800206a:	3b01      	subs	r3, #1
 800206c:	b29a      	uxth	r2, r3
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002072:	2301      	movs	r3, #1
 8002074:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002076:	f7fe fd8d 	bl	8000b94 <HAL_GetTick>
 800207a:	4602      	mov	r2, r0
 800207c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800207e:	1ad3      	subs	r3, r2, r3
 8002080:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002082:	429a      	cmp	r2, r3
 8002084:	d80b      	bhi.n	800209e <HAL_SPI_TransmitReceive+0x1e0>
 8002086:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002088:	f1b3 3fff 	cmp.w	r3, #4294967295
 800208c:	d007      	beq.n	800209e <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 800208e:	2303      	movs	r3, #3
 8002090:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	2201      	movs	r2, #1
 8002098:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 800209c:	e0b5      	b.n	800220a <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80020a2:	b29b      	uxth	r3, r3
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d1a2      	bne.n	8001fee <HAL_SPI_TransmitReceive+0x130>
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80020ac:	b29b      	uxth	r3, r3
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d19d      	bne.n	8001fee <HAL_SPI_TransmitReceive+0x130>
 80020b2:	e080      	b.n	80021b6 <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	685b      	ldr	r3, [r3, #4]
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d002      	beq.n	80020c2 <HAL_SPI_TransmitReceive+0x204>
 80020bc:	8b7b      	ldrh	r3, [r7, #26]
 80020be:	2b01      	cmp	r3, #1
 80020c0:	d16f      	bne.n	80021a2 <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	330c      	adds	r3, #12
 80020cc:	7812      	ldrb	r2, [r2, #0]
 80020ce:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020d4:	1c5a      	adds	r2, r3, #1
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80020de:	b29b      	uxth	r3, r3
 80020e0:	3b01      	subs	r3, #1
 80020e2:	b29a      	uxth	r2, r3
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80020e8:	e05b      	b.n	80021a2 <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	689b      	ldr	r3, [r3, #8]
 80020f0:	f003 0302 	and.w	r3, r3, #2
 80020f4:	2b02      	cmp	r3, #2
 80020f6:	d11c      	bne.n	8002132 <HAL_SPI_TransmitReceive+0x274>
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80020fc:	b29b      	uxth	r3, r3
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d017      	beq.n	8002132 <HAL_SPI_TransmitReceive+0x274>
 8002102:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002104:	2b01      	cmp	r3, #1
 8002106:	d114      	bne.n	8002132 <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	330c      	adds	r3, #12
 8002112:	7812      	ldrb	r2, [r2, #0]
 8002114:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800211a:	1c5a      	adds	r2, r3, #1
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002124:	b29b      	uxth	r3, r3
 8002126:	3b01      	subs	r3, #1
 8002128:	b29a      	uxth	r2, r3
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800212e:	2300      	movs	r3, #0
 8002130:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	689b      	ldr	r3, [r3, #8]
 8002138:	f003 0301 	and.w	r3, r3, #1
 800213c:	2b01      	cmp	r3, #1
 800213e:	d119      	bne.n	8002174 <HAL_SPI_TransmitReceive+0x2b6>
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002144:	b29b      	uxth	r3, r3
 8002146:	2b00      	cmp	r3, #0
 8002148:	d014      	beq.n	8002174 <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	68da      	ldr	r2, [r3, #12]
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002154:	b2d2      	uxtb	r2, r2
 8002156:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800215c:	1c5a      	adds	r2, r3, #1
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002166:	b29b      	uxth	r3, r3
 8002168:	3b01      	subs	r3, #1
 800216a:	b29a      	uxth	r2, r3
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002170:	2301      	movs	r3, #1
 8002172:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002174:	f7fe fd0e 	bl	8000b94 <HAL_GetTick>
 8002178:	4602      	mov	r2, r0
 800217a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800217c:	1ad3      	subs	r3, r2, r3
 800217e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002180:	429a      	cmp	r2, r3
 8002182:	d803      	bhi.n	800218c <HAL_SPI_TransmitReceive+0x2ce>
 8002184:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002186:	f1b3 3fff 	cmp.w	r3, #4294967295
 800218a:	d102      	bne.n	8002192 <HAL_SPI_TransmitReceive+0x2d4>
 800218c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800218e:	2b00      	cmp	r3, #0
 8002190:	d107      	bne.n	80021a2 <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 8002192:	2303      	movs	r3, #3
 8002194:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	2201      	movs	r2, #1
 800219c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 80021a0:	e033      	b.n	800220a <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80021a6:	b29b      	uxth	r3, r3
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d19e      	bne.n	80020ea <HAL_SPI_TransmitReceive+0x22c>
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80021b0:	b29b      	uxth	r3, r3
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d199      	bne.n	80020ea <HAL_SPI_TransmitReceive+0x22c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80021b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80021b8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80021ba:	68f8      	ldr	r0, [r7, #12]
 80021bc:	f000 f90a 	bl	80023d4 <SPI_EndRxTxTransaction>
 80021c0:	4603      	mov	r3, r0
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d006      	beq.n	80021d4 <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 80021c6:	2301      	movs	r3, #1
 80021c8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	2220      	movs	r2, #32
 80021d0:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80021d2:	e01a      	b.n	800220a <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	689b      	ldr	r3, [r3, #8]
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d10a      	bne.n	80021f2 <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80021dc:	2300      	movs	r3, #0
 80021de:	617b      	str	r3, [r7, #20]
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	68db      	ldr	r3, [r3, #12]
 80021e6:	617b      	str	r3, [r7, #20]
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	689b      	ldr	r3, [r3, #8]
 80021ee:	617b      	str	r3, [r7, #20]
 80021f0:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d003      	beq.n	8002202 <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 80021fa:	2301      	movs	r3, #1
 80021fc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002200:	e003      	b.n	800220a <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	2201      	movs	r2, #1
 8002206:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	2200      	movs	r2, #0
 800220e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002212:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8002216:	4618      	mov	r0, r3
 8002218:	3730      	adds	r7, #48	; 0x30
 800221a:	46bd      	mov	sp, r7
 800221c:	bd80      	pop	{r7, pc}
	...

08002220 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002220:	b580      	push	{r7, lr}
 8002222:	b088      	sub	sp, #32
 8002224:	af00      	add	r7, sp, #0
 8002226:	60f8      	str	r0, [r7, #12]
 8002228:	60b9      	str	r1, [r7, #8]
 800222a:	603b      	str	r3, [r7, #0]
 800222c:	4613      	mov	r3, r2
 800222e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002230:	f7fe fcb0 	bl	8000b94 <HAL_GetTick>
 8002234:	4602      	mov	r2, r0
 8002236:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002238:	1a9b      	subs	r3, r3, r2
 800223a:	683a      	ldr	r2, [r7, #0]
 800223c:	4413      	add	r3, r2
 800223e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002240:	f7fe fca8 	bl	8000b94 <HAL_GetTick>
 8002244:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002246:	4b39      	ldr	r3, [pc, #228]	; (800232c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	015b      	lsls	r3, r3, #5
 800224c:	0d1b      	lsrs	r3, r3, #20
 800224e:	69fa      	ldr	r2, [r7, #28]
 8002250:	fb02 f303 	mul.w	r3, r2, r3
 8002254:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002256:	e054      	b.n	8002302 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002258:	683b      	ldr	r3, [r7, #0]
 800225a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800225e:	d050      	beq.n	8002302 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002260:	f7fe fc98 	bl	8000b94 <HAL_GetTick>
 8002264:	4602      	mov	r2, r0
 8002266:	69bb      	ldr	r3, [r7, #24]
 8002268:	1ad3      	subs	r3, r2, r3
 800226a:	69fa      	ldr	r2, [r7, #28]
 800226c:	429a      	cmp	r2, r3
 800226e:	d902      	bls.n	8002276 <SPI_WaitFlagStateUntilTimeout+0x56>
 8002270:	69fb      	ldr	r3, [r7, #28]
 8002272:	2b00      	cmp	r3, #0
 8002274:	d13d      	bne.n	80022f2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	685a      	ldr	r2, [r3, #4]
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002284:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	685b      	ldr	r3, [r3, #4]
 800228a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800228e:	d111      	bne.n	80022b4 <SPI_WaitFlagStateUntilTimeout+0x94>
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	689b      	ldr	r3, [r3, #8]
 8002294:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002298:	d004      	beq.n	80022a4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	689b      	ldr	r3, [r3, #8]
 800229e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80022a2:	d107      	bne.n	80022b4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	681a      	ldr	r2, [r3, #0]
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80022b2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022b8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80022bc:	d10f      	bne.n	80022de <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	681a      	ldr	r2, [r3, #0]
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80022cc:	601a      	str	r2, [r3, #0]
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	681a      	ldr	r2, [r3, #0]
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80022dc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	2201      	movs	r2, #1
 80022e2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	2200      	movs	r2, #0
 80022ea:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80022ee:	2303      	movs	r3, #3
 80022f0:	e017      	b.n	8002322 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80022f2:	697b      	ldr	r3, [r7, #20]
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d101      	bne.n	80022fc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80022f8:	2300      	movs	r3, #0
 80022fa:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80022fc:	697b      	ldr	r3, [r7, #20]
 80022fe:	3b01      	subs	r3, #1
 8002300:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	689a      	ldr	r2, [r3, #8]
 8002308:	68bb      	ldr	r3, [r7, #8]
 800230a:	4013      	ands	r3, r2
 800230c:	68ba      	ldr	r2, [r7, #8]
 800230e:	429a      	cmp	r2, r3
 8002310:	bf0c      	ite	eq
 8002312:	2301      	moveq	r3, #1
 8002314:	2300      	movne	r3, #0
 8002316:	b2db      	uxtb	r3, r3
 8002318:	461a      	mov	r2, r3
 800231a:	79fb      	ldrb	r3, [r7, #7]
 800231c:	429a      	cmp	r2, r3
 800231e:	d19b      	bne.n	8002258 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002320:	2300      	movs	r3, #0
}
 8002322:	4618      	mov	r0, r3
 8002324:	3720      	adds	r7, #32
 8002326:	46bd      	mov	sp, r7
 8002328:	bd80      	pop	{r7, pc}
 800232a:	bf00      	nop
 800232c:	20000008 	.word	0x20000008

08002330 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8002330:	b580      	push	{r7, lr}
 8002332:	b086      	sub	sp, #24
 8002334:	af02      	add	r7, sp, #8
 8002336:	60f8      	str	r0, [r7, #12]
 8002338:	60b9      	str	r1, [r7, #8]
 800233a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	685b      	ldr	r3, [r3, #4]
 8002340:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002344:	d111      	bne.n	800236a <SPI_EndRxTransaction+0x3a>
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	689b      	ldr	r3, [r3, #8]
 800234a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800234e:	d004      	beq.n	800235a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	689b      	ldr	r3, [r3, #8]
 8002354:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002358:	d107      	bne.n	800236a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	681a      	ldr	r2, [r3, #0]
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002368:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	685b      	ldr	r3, [r3, #4]
 800236e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002372:	d117      	bne.n	80023a4 <SPI_EndRxTransaction+0x74>
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	689b      	ldr	r3, [r3, #8]
 8002378:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800237c:	d112      	bne.n	80023a4 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	9300      	str	r3, [sp, #0]
 8002382:	68bb      	ldr	r3, [r7, #8]
 8002384:	2200      	movs	r2, #0
 8002386:	2101      	movs	r1, #1
 8002388:	68f8      	ldr	r0, [r7, #12]
 800238a:	f7ff ff49 	bl	8002220 <SPI_WaitFlagStateUntilTimeout>
 800238e:	4603      	mov	r3, r0
 8002390:	2b00      	cmp	r3, #0
 8002392:	d01a      	beq.n	80023ca <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002398:	f043 0220 	orr.w	r2, r3, #32
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80023a0:	2303      	movs	r3, #3
 80023a2:	e013      	b.n	80023cc <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	9300      	str	r3, [sp, #0]
 80023a8:	68bb      	ldr	r3, [r7, #8]
 80023aa:	2200      	movs	r2, #0
 80023ac:	2180      	movs	r1, #128	; 0x80
 80023ae:	68f8      	ldr	r0, [r7, #12]
 80023b0:	f7ff ff36 	bl	8002220 <SPI_WaitFlagStateUntilTimeout>
 80023b4:	4603      	mov	r3, r0
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d007      	beq.n	80023ca <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023be:	f043 0220 	orr.w	r2, r3, #32
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80023c6:	2303      	movs	r3, #3
 80023c8:	e000      	b.n	80023cc <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 80023ca:	2300      	movs	r3, #0
}
 80023cc:	4618      	mov	r0, r3
 80023ce:	3710      	adds	r7, #16
 80023d0:	46bd      	mov	sp, r7
 80023d2:	bd80      	pop	{r7, pc}

080023d4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80023d4:	b580      	push	{r7, lr}
 80023d6:	b086      	sub	sp, #24
 80023d8:	af02      	add	r7, sp, #8
 80023da:	60f8      	str	r0, [r7, #12]
 80023dc:	60b9      	str	r1, [r7, #8]
 80023de:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	9300      	str	r3, [sp, #0]
 80023e4:	68bb      	ldr	r3, [r7, #8]
 80023e6:	2200      	movs	r2, #0
 80023e8:	2180      	movs	r1, #128	; 0x80
 80023ea:	68f8      	ldr	r0, [r7, #12]
 80023ec:	f7ff ff18 	bl	8002220 <SPI_WaitFlagStateUntilTimeout>
 80023f0:	4603      	mov	r3, r0
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d007      	beq.n	8002406 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023fa:	f043 0220 	orr.w	r2, r3, #32
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8002402:	2303      	movs	r3, #3
 8002404:	e000      	b.n	8002408 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8002406:	2300      	movs	r3, #0
}
 8002408:	4618      	mov	r0, r3
 800240a:	3710      	adds	r7, #16
 800240c:	46bd      	mov	sp, r7
 800240e:	bd80      	pop	{r7, pc}

08002410 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002410:	b580      	push	{r7, lr}
 8002412:	b082      	sub	sp, #8
 8002414:	af00      	add	r7, sp, #0
 8002416:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	2b00      	cmp	r3, #0
 800241c:	d101      	bne.n	8002422 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800241e:	2301      	movs	r3, #1
 8002420:	e042      	b.n	80024a8 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002428:	b2db      	uxtb	r3, r3
 800242a:	2b00      	cmp	r3, #0
 800242c:	d106      	bne.n	800243c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	2200      	movs	r2, #0
 8002432:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002436:	6878      	ldr	r0, [r7, #4]
 8002438:	f7fe fab4 	bl	80009a4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	2224      	movs	r2, #36	; 0x24
 8002440:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	68da      	ldr	r2, [r3, #12]
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002452:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002454:	6878      	ldr	r0, [r7, #4]
 8002456:	f000 f82b 	bl	80024b0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	691a      	ldr	r2, [r3, #16]
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002468:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	695a      	ldr	r2, [r3, #20]
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002478:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	68da      	ldr	r2, [r3, #12]
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002488:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	2200      	movs	r2, #0
 800248e:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	2220      	movs	r2, #32
 8002494:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	2220      	movs	r2, #32
 800249c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	2200      	movs	r2, #0
 80024a4:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80024a6:	2300      	movs	r3, #0
}
 80024a8:	4618      	mov	r0, r3
 80024aa:	3708      	adds	r7, #8
 80024ac:	46bd      	mov	sp, r7
 80024ae:	bd80      	pop	{r7, pc}

080024b0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80024b0:	b580      	push	{r7, lr}
 80024b2:	b084      	sub	sp, #16
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	691b      	ldr	r3, [r3, #16]
 80024be:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	68da      	ldr	r2, [r3, #12]
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	430a      	orrs	r2, r1
 80024cc:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	689a      	ldr	r2, [r3, #8]
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	691b      	ldr	r3, [r3, #16]
 80024d6:	431a      	orrs	r2, r3
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	695b      	ldr	r3, [r3, #20]
 80024dc:	4313      	orrs	r3, r2
 80024de:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	68db      	ldr	r3, [r3, #12]
 80024e6:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80024ea:	f023 030c 	bic.w	r3, r3, #12
 80024ee:	687a      	ldr	r2, [r7, #4]
 80024f0:	6812      	ldr	r2, [r2, #0]
 80024f2:	68b9      	ldr	r1, [r7, #8]
 80024f4:	430b      	orrs	r3, r1
 80024f6:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	695b      	ldr	r3, [r3, #20]
 80024fe:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	699a      	ldr	r2, [r3, #24]
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	430a      	orrs	r2, r1
 800250c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	4a2c      	ldr	r2, [pc, #176]	; (80025c4 <UART_SetConfig+0x114>)
 8002514:	4293      	cmp	r3, r2
 8002516:	d103      	bne.n	8002520 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002518:	f7ff f9c0 	bl	800189c <HAL_RCC_GetPCLK2Freq>
 800251c:	60f8      	str	r0, [r7, #12]
 800251e:	e002      	b.n	8002526 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002520:	f7ff f9a8 	bl	8001874 <HAL_RCC_GetPCLK1Freq>
 8002524:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002526:	68fa      	ldr	r2, [r7, #12]
 8002528:	4613      	mov	r3, r2
 800252a:	009b      	lsls	r3, r3, #2
 800252c:	4413      	add	r3, r2
 800252e:	009a      	lsls	r2, r3, #2
 8002530:	441a      	add	r2, r3
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	685b      	ldr	r3, [r3, #4]
 8002536:	009b      	lsls	r3, r3, #2
 8002538:	fbb2 f3f3 	udiv	r3, r2, r3
 800253c:	4a22      	ldr	r2, [pc, #136]	; (80025c8 <UART_SetConfig+0x118>)
 800253e:	fba2 2303 	umull	r2, r3, r2, r3
 8002542:	095b      	lsrs	r3, r3, #5
 8002544:	0119      	lsls	r1, r3, #4
 8002546:	68fa      	ldr	r2, [r7, #12]
 8002548:	4613      	mov	r3, r2
 800254a:	009b      	lsls	r3, r3, #2
 800254c:	4413      	add	r3, r2
 800254e:	009a      	lsls	r2, r3, #2
 8002550:	441a      	add	r2, r3
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	685b      	ldr	r3, [r3, #4]
 8002556:	009b      	lsls	r3, r3, #2
 8002558:	fbb2 f2f3 	udiv	r2, r2, r3
 800255c:	4b1a      	ldr	r3, [pc, #104]	; (80025c8 <UART_SetConfig+0x118>)
 800255e:	fba3 0302 	umull	r0, r3, r3, r2
 8002562:	095b      	lsrs	r3, r3, #5
 8002564:	2064      	movs	r0, #100	; 0x64
 8002566:	fb00 f303 	mul.w	r3, r0, r3
 800256a:	1ad3      	subs	r3, r2, r3
 800256c:	011b      	lsls	r3, r3, #4
 800256e:	3332      	adds	r3, #50	; 0x32
 8002570:	4a15      	ldr	r2, [pc, #84]	; (80025c8 <UART_SetConfig+0x118>)
 8002572:	fba2 2303 	umull	r2, r3, r2, r3
 8002576:	095b      	lsrs	r3, r3, #5
 8002578:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800257c:	4419      	add	r1, r3
 800257e:	68fa      	ldr	r2, [r7, #12]
 8002580:	4613      	mov	r3, r2
 8002582:	009b      	lsls	r3, r3, #2
 8002584:	4413      	add	r3, r2
 8002586:	009a      	lsls	r2, r3, #2
 8002588:	441a      	add	r2, r3
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	685b      	ldr	r3, [r3, #4]
 800258e:	009b      	lsls	r3, r3, #2
 8002590:	fbb2 f2f3 	udiv	r2, r2, r3
 8002594:	4b0c      	ldr	r3, [pc, #48]	; (80025c8 <UART_SetConfig+0x118>)
 8002596:	fba3 0302 	umull	r0, r3, r3, r2
 800259a:	095b      	lsrs	r3, r3, #5
 800259c:	2064      	movs	r0, #100	; 0x64
 800259e:	fb00 f303 	mul.w	r3, r0, r3
 80025a2:	1ad3      	subs	r3, r2, r3
 80025a4:	011b      	lsls	r3, r3, #4
 80025a6:	3332      	adds	r3, #50	; 0x32
 80025a8:	4a07      	ldr	r2, [pc, #28]	; (80025c8 <UART_SetConfig+0x118>)
 80025aa:	fba2 2303 	umull	r2, r3, r2, r3
 80025ae:	095b      	lsrs	r3, r3, #5
 80025b0:	f003 020f 	and.w	r2, r3, #15
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	440a      	add	r2, r1
 80025ba:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80025bc:	bf00      	nop
 80025be:	3710      	adds	r7, #16
 80025c0:	46bd      	mov	sp, r7
 80025c2:	bd80      	pop	{r7, pc}
 80025c4:	40013800 	.word	0x40013800
 80025c8:	51eb851f 	.word	0x51eb851f

080025cc <__libc_init_array>:
 80025cc:	b570      	push	{r4, r5, r6, lr}
 80025ce:	2600      	movs	r6, #0
 80025d0:	4d0c      	ldr	r5, [pc, #48]	; (8002604 <__libc_init_array+0x38>)
 80025d2:	4c0d      	ldr	r4, [pc, #52]	; (8002608 <__libc_init_array+0x3c>)
 80025d4:	1b64      	subs	r4, r4, r5
 80025d6:	10a4      	asrs	r4, r4, #2
 80025d8:	42a6      	cmp	r6, r4
 80025da:	d109      	bne.n	80025f0 <__libc_init_array+0x24>
 80025dc:	f000 f822 	bl	8002624 <_init>
 80025e0:	2600      	movs	r6, #0
 80025e2:	4d0a      	ldr	r5, [pc, #40]	; (800260c <__libc_init_array+0x40>)
 80025e4:	4c0a      	ldr	r4, [pc, #40]	; (8002610 <__libc_init_array+0x44>)
 80025e6:	1b64      	subs	r4, r4, r5
 80025e8:	10a4      	asrs	r4, r4, #2
 80025ea:	42a6      	cmp	r6, r4
 80025ec:	d105      	bne.n	80025fa <__libc_init_array+0x2e>
 80025ee:	bd70      	pop	{r4, r5, r6, pc}
 80025f0:	f855 3b04 	ldr.w	r3, [r5], #4
 80025f4:	4798      	blx	r3
 80025f6:	3601      	adds	r6, #1
 80025f8:	e7ee      	b.n	80025d8 <__libc_init_array+0xc>
 80025fa:	f855 3b04 	ldr.w	r3, [r5], #4
 80025fe:	4798      	blx	r3
 8002600:	3601      	adds	r6, #1
 8002602:	e7f2      	b.n	80025ea <__libc_init_array+0x1e>
 8002604:	08002678 	.word	0x08002678
 8002608:	08002678 	.word	0x08002678
 800260c:	08002678 	.word	0x08002678
 8002610:	0800267c 	.word	0x0800267c

08002614 <memset>:
 8002614:	4603      	mov	r3, r0
 8002616:	4402      	add	r2, r0
 8002618:	4293      	cmp	r3, r2
 800261a:	d100      	bne.n	800261e <memset+0xa>
 800261c:	4770      	bx	lr
 800261e:	f803 1b01 	strb.w	r1, [r3], #1
 8002622:	e7f9      	b.n	8002618 <memset+0x4>

08002624 <_init>:
 8002624:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002626:	bf00      	nop
 8002628:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800262a:	bc08      	pop	{r3}
 800262c:	469e      	mov	lr, r3
 800262e:	4770      	bx	lr

08002630 <_fini>:
 8002630:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002632:	bf00      	nop
 8002634:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002636:	bc08      	pop	{r3}
 8002638:	469e      	mov	lr, r3
 800263a:	4770      	bx	lr
