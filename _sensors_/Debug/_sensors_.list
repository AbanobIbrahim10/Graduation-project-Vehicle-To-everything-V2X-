
_sensors_.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000016c0  08000130  08000130  00010130  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080017f0  080017f8  000117f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080017f0  080017f0  000117f8  2**0
                  CONTENTS
  4 .ARM          00000000  080017f0  080017f0  000117f8  2**0
                  CONTENTS
  5 .preinit_array 00000000  080017f0  080017f8  000117f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080017f0  080017f0  000117f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080017f4  080017f4  000117f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  000117f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000002c  20000000  080017f8  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000002c  080017f8  0002002c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000117f8  2**0
                  CONTENTS, READONLY
 12 .debug_info   000012f0  00000000  00000000  00011821  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000073f  00000000  00000000  00012b11  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000240  00000000  00000000  00013250  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000001c8  00000000  00000000  00013490  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000021ea  00000000  00000000  00013658  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00001c52  00000000  00000000  00015842  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0000888a  00000000  00000000  00017494  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0001fd1e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000008f8  00000000  00000000  0001fd70  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	080017d8 	.word	0x080017d8

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	080017d8 	.word	0x080017d8

08000170 <__aeabi_drsub>:
 8000170:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000174:	e002      	b.n	800017c <__adddf3>
 8000176:	bf00      	nop

08000178 <__aeabi_dsub>:
 8000178:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800017c <__adddf3>:
 800017c:	b530      	push	{r4, r5, lr}
 800017e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000182:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000186:	ea94 0f05 	teq	r4, r5
 800018a:	bf08      	it	eq
 800018c:	ea90 0f02 	teqeq	r0, r2
 8000190:	bf1f      	itttt	ne
 8000192:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000196:	ea55 0c02 	orrsne.w	ip, r5, r2
 800019a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800019e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001a2:	f000 80e2 	beq.w	800036a <__adddf3+0x1ee>
 80001a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001ae:	bfb8      	it	lt
 80001b0:	426d      	neglt	r5, r5
 80001b2:	dd0c      	ble.n	80001ce <__adddf3+0x52>
 80001b4:	442c      	add	r4, r5
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	ea82 0000 	eor.w	r0, r2, r0
 80001c2:	ea83 0101 	eor.w	r1, r3, r1
 80001c6:	ea80 0202 	eor.w	r2, r0, r2
 80001ca:	ea81 0303 	eor.w	r3, r1, r3
 80001ce:	2d36      	cmp	r5, #54	; 0x36
 80001d0:	bf88      	it	hi
 80001d2:	bd30      	pophi	{r4, r5, pc}
 80001d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001e4:	d002      	beq.n	80001ec <__adddf3+0x70>
 80001e6:	4240      	negs	r0, r0
 80001e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001f8:	d002      	beq.n	8000200 <__adddf3+0x84>
 80001fa:	4252      	negs	r2, r2
 80001fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000200:	ea94 0f05 	teq	r4, r5
 8000204:	f000 80a7 	beq.w	8000356 <__adddf3+0x1da>
 8000208:	f1a4 0401 	sub.w	r4, r4, #1
 800020c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000210:	db0d      	blt.n	800022e <__adddf3+0xb2>
 8000212:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000216:	fa22 f205 	lsr.w	r2, r2, r5
 800021a:	1880      	adds	r0, r0, r2
 800021c:	f141 0100 	adc.w	r1, r1, #0
 8000220:	fa03 f20e 	lsl.w	r2, r3, lr
 8000224:	1880      	adds	r0, r0, r2
 8000226:	fa43 f305 	asr.w	r3, r3, r5
 800022a:	4159      	adcs	r1, r3
 800022c:	e00e      	b.n	800024c <__adddf3+0xd0>
 800022e:	f1a5 0520 	sub.w	r5, r5, #32
 8000232:	f10e 0e20 	add.w	lr, lr, #32
 8000236:	2a01      	cmp	r2, #1
 8000238:	fa03 fc0e 	lsl.w	ip, r3, lr
 800023c:	bf28      	it	cs
 800023e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000242:	fa43 f305 	asr.w	r3, r3, r5
 8000246:	18c0      	adds	r0, r0, r3
 8000248:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800024c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000250:	d507      	bpl.n	8000262 <__adddf3+0xe6>
 8000252:	f04f 0e00 	mov.w	lr, #0
 8000256:	f1dc 0c00 	rsbs	ip, ip, #0
 800025a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800025e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000262:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000266:	d31b      	bcc.n	80002a0 <__adddf3+0x124>
 8000268:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800026c:	d30c      	bcc.n	8000288 <__adddf3+0x10c>
 800026e:	0849      	lsrs	r1, r1, #1
 8000270:	ea5f 0030 	movs.w	r0, r0, rrx
 8000274:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000278:	f104 0401 	add.w	r4, r4, #1
 800027c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000280:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000284:	f080 809a 	bcs.w	80003bc <__adddf3+0x240>
 8000288:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800028c:	bf08      	it	eq
 800028e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000292:	f150 0000 	adcs.w	r0, r0, #0
 8000296:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800029a:	ea41 0105 	orr.w	r1, r1, r5
 800029e:	bd30      	pop	{r4, r5, pc}
 80002a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002a4:	4140      	adcs	r0, r0
 80002a6:	eb41 0101 	adc.w	r1, r1, r1
 80002aa:	3c01      	subs	r4, #1
 80002ac:	bf28      	it	cs
 80002ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002b2:	d2e9      	bcs.n	8000288 <__adddf3+0x10c>
 80002b4:	f091 0f00 	teq	r1, #0
 80002b8:	bf04      	itt	eq
 80002ba:	4601      	moveq	r1, r0
 80002bc:	2000      	moveq	r0, #0
 80002be:	fab1 f381 	clz	r3, r1
 80002c2:	bf08      	it	eq
 80002c4:	3320      	addeq	r3, #32
 80002c6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ca:	f1b3 0220 	subs.w	r2, r3, #32
 80002ce:	da0c      	bge.n	80002ea <__adddf3+0x16e>
 80002d0:	320c      	adds	r2, #12
 80002d2:	dd08      	ble.n	80002e6 <__adddf3+0x16a>
 80002d4:	f102 0c14 	add.w	ip, r2, #20
 80002d8:	f1c2 020c 	rsb	r2, r2, #12
 80002dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002e0:	fa21 f102 	lsr.w	r1, r1, r2
 80002e4:	e00c      	b.n	8000300 <__adddf3+0x184>
 80002e6:	f102 0214 	add.w	r2, r2, #20
 80002ea:	bfd8      	it	le
 80002ec:	f1c2 0c20 	rsble	ip, r2, #32
 80002f0:	fa01 f102 	lsl.w	r1, r1, r2
 80002f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002f8:	bfdc      	itt	le
 80002fa:	ea41 010c 	orrle.w	r1, r1, ip
 80002fe:	4090      	lslle	r0, r2
 8000300:	1ae4      	subs	r4, r4, r3
 8000302:	bfa2      	ittt	ge
 8000304:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000308:	4329      	orrge	r1, r5
 800030a:	bd30      	popge	{r4, r5, pc}
 800030c:	ea6f 0404 	mvn.w	r4, r4
 8000310:	3c1f      	subs	r4, #31
 8000312:	da1c      	bge.n	800034e <__adddf3+0x1d2>
 8000314:	340c      	adds	r4, #12
 8000316:	dc0e      	bgt.n	8000336 <__adddf3+0x1ba>
 8000318:	f104 0414 	add.w	r4, r4, #20
 800031c:	f1c4 0220 	rsb	r2, r4, #32
 8000320:	fa20 f004 	lsr.w	r0, r0, r4
 8000324:	fa01 f302 	lsl.w	r3, r1, r2
 8000328:	ea40 0003 	orr.w	r0, r0, r3
 800032c:	fa21 f304 	lsr.w	r3, r1, r4
 8000330:	ea45 0103 	orr.w	r1, r5, r3
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f1c4 040c 	rsb	r4, r4, #12
 800033a:	f1c4 0220 	rsb	r2, r4, #32
 800033e:	fa20 f002 	lsr.w	r0, r0, r2
 8000342:	fa01 f304 	lsl.w	r3, r1, r4
 8000346:	ea40 0003 	orr.w	r0, r0, r3
 800034a:	4629      	mov	r1, r5
 800034c:	bd30      	pop	{r4, r5, pc}
 800034e:	fa21 f004 	lsr.w	r0, r1, r4
 8000352:	4629      	mov	r1, r5
 8000354:	bd30      	pop	{r4, r5, pc}
 8000356:	f094 0f00 	teq	r4, #0
 800035a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800035e:	bf06      	itte	eq
 8000360:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000364:	3401      	addeq	r4, #1
 8000366:	3d01      	subne	r5, #1
 8000368:	e74e      	b.n	8000208 <__adddf3+0x8c>
 800036a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800036e:	bf18      	it	ne
 8000370:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000374:	d029      	beq.n	80003ca <__adddf3+0x24e>
 8000376:	ea94 0f05 	teq	r4, r5
 800037a:	bf08      	it	eq
 800037c:	ea90 0f02 	teqeq	r0, r2
 8000380:	d005      	beq.n	800038e <__adddf3+0x212>
 8000382:	ea54 0c00 	orrs.w	ip, r4, r0
 8000386:	bf04      	itt	eq
 8000388:	4619      	moveq	r1, r3
 800038a:	4610      	moveq	r0, r2
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	ea91 0f03 	teq	r1, r3
 8000392:	bf1e      	ittt	ne
 8000394:	2100      	movne	r1, #0
 8000396:	2000      	movne	r0, #0
 8000398:	bd30      	popne	{r4, r5, pc}
 800039a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800039e:	d105      	bne.n	80003ac <__adddf3+0x230>
 80003a0:	0040      	lsls	r0, r0, #1
 80003a2:	4149      	adcs	r1, r1
 80003a4:	bf28      	it	cs
 80003a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003aa:	bd30      	pop	{r4, r5, pc}
 80003ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003b0:	bf3c      	itt	cc
 80003b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003b6:	bd30      	popcc	{r4, r5, pc}
 80003b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003c4:	f04f 0000 	mov.w	r0, #0
 80003c8:	bd30      	pop	{r4, r5, pc}
 80003ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ce:	bf1a      	itte	ne
 80003d0:	4619      	movne	r1, r3
 80003d2:	4610      	movne	r0, r2
 80003d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003d8:	bf1c      	itt	ne
 80003da:	460b      	movne	r3, r1
 80003dc:	4602      	movne	r2, r0
 80003de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003e2:	bf06      	itte	eq
 80003e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003e8:	ea91 0f03 	teqeq	r1, r3
 80003ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003f0:	bd30      	pop	{r4, r5, pc}
 80003f2:	bf00      	nop

080003f4 <__aeabi_ui2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f04f 0500 	mov.w	r5, #0
 800040c:	f04f 0100 	mov.w	r1, #0
 8000410:	e750      	b.n	80002b4 <__adddf3+0x138>
 8000412:	bf00      	nop

08000414 <__aeabi_i2d>:
 8000414:	f090 0f00 	teq	r0, #0
 8000418:	bf04      	itt	eq
 800041a:	2100      	moveq	r1, #0
 800041c:	4770      	bxeq	lr
 800041e:	b530      	push	{r4, r5, lr}
 8000420:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000424:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000428:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800042c:	bf48      	it	mi
 800042e:	4240      	negmi	r0, r0
 8000430:	f04f 0100 	mov.w	r1, #0
 8000434:	e73e      	b.n	80002b4 <__adddf3+0x138>
 8000436:	bf00      	nop

08000438 <__aeabi_f2d>:
 8000438:	0042      	lsls	r2, r0, #1
 800043a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800043e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000442:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000446:	bf1f      	itttt	ne
 8000448:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800044c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000450:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000454:	4770      	bxne	lr
 8000456:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800045a:	bf08      	it	eq
 800045c:	4770      	bxeq	lr
 800045e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000462:	bf04      	itt	eq
 8000464:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000468:	4770      	bxeq	lr
 800046a:	b530      	push	{r4, r5, lr}
 800046c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000470:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000474:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000478:	e71c      	b.n	80002b4 <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_ul2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f04f 0500 	mov.w	r5, #0
 800048a:	e00a      	b.n	80004a2 <__aeabi_l2d+0x16>

0800048c <__aeabi_l2d>:
 800048c:	ea50 0201 	orrs.w	r2, r0, r1
 8000490:	bf08      	it	eq
 8000492:	4770      	bxeq	lr
 8000494:	b530      	push	{r4, r5, lr}
 8000496:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800049a:	d502      	bpl.n	80004a2 <__aeabi_l2d+0x16>
 800049c:	4240      	negs	r0, r0
 800049e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004ae:	f43f aed8 	beq.w	8000262 <__adddf3+0xe6>
 80004b2:	f04f 0203 	mov.w	r2, #3
 80004b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004ba:	bf18      	it	ne
 80004bc:	3203      	addne	r2, #3
 80004be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004c2:	bf18      	it	ne
 80004c4:	3203      	addne	r2, #3
 80004c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80004d2:	fa20 f002 	lsr.w	r0, r0, r2
 80004d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004da:	ea40 000e 	orr.w	r0, r0, lr
 80004de:	fa21 f102 	lsr.w	r1, r1, r2
 80004e2:	4414      	add	r4, r2
 80004e4:	e6bd      	b.n	8000262 <__adddf3+0xe6>
 80004e6:	bf00      	nop

080004e8 <__aeabi_dmul>:
 80004e8:	b570      	push	{r4, r5, r6, lr}
 80004ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004f6:	bf1d      	ittte	ne
 80004f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004fc:	ea94 0f0c 	teqne	r4, ip
 8000500:	ea95 0f0c 	teqne	r5, ip
 8000504:	f000 f8de 	bleq	80006c4 <__aeabi_dmul+0x1dc>
 8000508:	442c      	add	r4, r5
 800050a:	ea81 0603 	eor.w	r6, r1, r3
 800050e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000512:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000516:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800051a:	bf18      	it	ne
 800051c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000520:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000524:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000528:	d038      	beq.n	800059c <__aeabi_dmul+0xb4>
 800052a:	fba0 ce02 	umull	ip, lr, r0, r2
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000536:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800053a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800053e:	f04f 0600 	mov.w	r6, #0
 8000542:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000546:	f09c 0f00 	teq	ip, #0
 800054a:	bf18      	it	ne
 800054c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000550:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000554:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000558:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800055c:	d204      	bcs.n	8000568 <__aeabi_dmul+0x80>
 800055e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000562:	416d      	adcs	r5, r5
 8000564:	eb46 0606 	adc.w	r6, r6, r6
 8000568:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800056c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000570:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000574:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000578:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800057c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000580:	bf88      	it	hi
 8000582:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000586:	d81e      	bhi.n	80005c6 <__aeabi_dmul+0xde>
 8000588:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800058c:	bf08      	it	eq
 800058e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000592:	f150 0000 	adcs.w	r0, r0, #0
 8000596:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800059a:	bd70      	pop	{r4, r5, r6, pc}
 800059c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005a0:	ea46 0101 	orr.w	r1, r6, r1
 80005a4:	ea40 0002 	orr.w	r0, r0, r2
 80005a8:	ea81 0103 	eor.w	r1, r1, r3
 80005ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005b0:	bfc2      	ittt	gt
 80005b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005ba:	bd70      	popgt	{r4, r5, r6, pc}
 80005bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005c0:	f04f 0e00 	mov.w	lr, #0
 80005c4:	3c01      	subs	r4, #1
 80005c6:	f300 80ab 	bgt.w	8000720 <__aeabi_dmul+0x238>
 80005ca:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ce:	bfde      	ittt	le
 80005d0:	2000      	movle	r0, #0
 80005d2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005d6:	bd70      	pople	{r4, r5, r6, pc}
 80005d8:	f1c4 0400 	rsb	r4, r4, #0
 80005dc:	3c20      	subs	r4, #32
 80005de:	da35      	bge.n	800064c <__aeabi_dmul+0x164>
 80005e0:	340c      	adds	r4, #12
 80005e2:	dc1b      	bgt.n	800061c <__aeabi_dmul+0x134>
 80005e4:	f104 0414 	add.w	r4, r4, #20
 80005e8:	f1c4 0520 	rsb	r5, r4, #32
 80005ec:	fa00 f305 	lsl.w	r3, r0, r5
 80005f0:	fa20 f004 	lsr.w	r0, r0, r4
 80005f4:	fa01 f205 	lsl.w	r2, r1, r5
 80005f8:	ea40 0002 	orr.w	r0, r0, r2
 80005fc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000600:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000604:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000608:	fa21 f604 	lsr.w	r6, r1, r4
 800060c:	eb42 0106 	adc.w	r1, r2, r6
 8000610:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000614:	bf08      	it	eq
 8000616:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800061a:	bd70      	pop	{r4, r5, r6, pc}
 800061c:	f1c4 040c 	rsb	r4, r4, #12
 8000620:	f1c4 0520 	rsb	r5, r4, #32
 8000624:	fa00 f304 	lsl.w	r3, r0, r4
 8000628:	fa20 f005 	lsr.w	r0, r0, r5
 800062c:	fa01 f204 	lsl.w	r2, r1, r4
 8000630:	ea40 0002 	orr.w	r0, r0, r2
 8000634:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000638:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800063c:	f141 0100 	adc.w	r1, r1, #0
 8000640:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000644:	bf08      	it	eq
 8000646:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800064a:	bd70      	pop	{r4, r5, r6, pc}
 800064c:	f1c4 0520 	rsb	r5, r4, #32
 8000650:	fa00 f205 	lsl.w	r2, r0, r5
 8000654:	ea4e 0e02 	orr.w	lr, lr, r2
 8000658:	fa20 f304 	lsr.w	r3, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea43 0302 	orr.w	r3, r3, r2
 8000664:	fa21 f004 	lsr.w	r0, r1, r4
 8000668:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800066c:	fa21 f204 	lsr.w	r2, r1, r4
 8000670:	ea20 0002 	bic.w	r0, r0, r2
 8000674:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f094 0f00 	teq	r4, #0
 8000688:	d10f      	bne.n	80006aa <__aeabi_dmul+0x1c2>
 800068a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800068e:	0040      	lsls	r0, r0, #1
 8000690:	eb41 0101 	adc.w	r1, r1, r1
 8000694:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3c01      	subeq	r4, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1a6>
 800069e:	ea41 0106 	orr.w	r1, r1, r6
 80006a2:	f095 0f00 	teq	r5, #0
 80006a6:	bf18      	it	ne
 80006a8:	4770      	bxne	lr
 80006aa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006ae:	0052      	lsls	r2, r2, #1
 80006b0:	eb43 0303 	adc.w	r3, r3, r3
 80006b4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006b8:	bf08      	it	eq
 80006ba:	3d01      	subeq	r5, #1
 80006bc:	d0f7      	beq.n	80006ae <__aeabi_dmul+0x1c6>
 80006be:	ea43 0306 	orr.w	r3, r3, r6
 80006c2:	4770      	bx	lr
 80006c4:	ea94 0f0c 	teq	r4, ip
 80006c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006cc:	bf18      	it	ne
 80006ce:	ea95 0f0c 	teqne	r5, ip
 80006d2:	d00c      	beq.n	80006ee <__aeabi_dmul+0x206>
 80006d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d8:	bf18      	it	ne
 80006da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006de:	d1d1      	bne.n	8000684 <__aeabi_dmul+0x19c>
 80006e0:	ea81 0103 	eor.w	r1, r1, r3
 80006e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006e8:	f04f 0000 	mov.w	r0, #0
 80006ec:	bd70      	pop	{r4, r5, r6, pc}
 80006ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006f2:	bf06      	itte	eq
 80006f4:	4610      	moveq	r0, r2
 80006f6:	4619      	moveq	r1, r3
 80006f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006fc:	d019      	beq.n	8000732 <__aeabi_dmul+0x24a>
 80006fe:	ea94 0f0c 	teq	r4, ip
 8000702:	d102      	bne.n	800070a <__aeabi_dmul+0x222>
 8000704:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000708:	d113      	bne.n	8000732 <__aeabi_dmul+0x24a>
 800070a:	ea95 0f0c 	teq	r5, ip
 800070e:	d105      	bne.n	800071c <__aeabi_dmul+0x234>
 8000710:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000714:	bf1c      	itt	ne
 8000716:	4610      	movne	r0, r2
 8000718:	4619      	movne	r1, r3
 800071a:	d10a      	bne.n	8000732 <__aeabi_dmul+0x24a>
 800071c:	ea81 0103 	eor.w	r1, r1, r3
 8000720:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000724:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000728:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800072c:	f04f 0000 	mov.w	r0, #0
 8000730:	bd70      	pop	{r4, r5, r6, pc}
 8000732:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000736:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800073a:	bd70      	pop	{r4, r5, r6, pc}

0800073c <__aeabi_ddiv>:
 800073c:	b570      	push	{r4, r5, r6, lr}
 800073e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000742:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000746:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800074a:	bf1d      	ittte	ne
 800074c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000750:	ea94 0f0c 	teqne	r4, ip
 8000754:	ea95 0f0c 	teqne	r5, ip
 8000758:	f000 f8a7 	bleq	80008aa <__aeabi_ddiv+0x16e>
 800075c:	eba4 0405 	sub.w	r4, r4, r5
 8000760:	ea81 0e03 	eor.w	lr, r1, r3
 8000764:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000768:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800076c:	f000 8088 	beq.w	8000880 <__aeabi_ddiv+0x144>
 8000770:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000774:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000778:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800077c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000780:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000784:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000788:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800078c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000790:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000794:	429d      	cmp	r5, r3
 8000796:	bf08      	it	eq
 8000798:	4296      	cmpeq	r6, r2
 800079a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800079e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007a2:	d202      	bcs.n	80007aa <__aeabi_ddiv+0x6e>
 80007a4:	085b      	lsrs	r3, r3, #1
 80007a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007aa:	1ab6      	subs	r6, r6, r2
 80007ac:	eb65 0503 	sbc.w	r5, r5, r3
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007ba:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007be:	ebb6 0e02 	subs.w	lr, r6, r2
 80007c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007c6:	bf22      	ittt	cs
 80007c8:	1ab6      	subcs	r6, r6, r2
 80007ca:	4675      	movcs	r5, lr
 80007cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007d0:	085b      	lsrs	r3, r3, #1
 80007d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007de:	bf22      	ittt	cs
 80007e0:	1ab6      	subcs	r6, r6, r2
 80007e2:	4675      	movcs	r5, lr
 80007e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007e8:	085b      	lsrs	r3, r3, #1
 80007ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80007f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007f6:	bf22      	ittt	cs
 80007f8:	1ab6      	subcs	r6, r6, r2
 80007fa:	4675      	movcs	r5, lr
 80007fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000800:	085b      	lsrs	r3, r3, #1
 8000802:	ea4f 0232 	mov.w	r2, r2, rrx
 8000806:	ebb6 0e02 	subs.w	lr, r6, r2
 800080a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800080e:	bf22      	ittt	cs
 8000810:	1ab6      	subcs	r6, r6, r2
 8000812:	4675      	movcs	r5, lr
 8000814:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000818:	ea55 0e06 	orrs.w	lr, r5, r6
 800081c:	d018      	beq.n	8000850 <__aeabi_ddiv+0x114>
 800081e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000822:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000826:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800082a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800082e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000832:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000836:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800083a:	d1c0      	bne.n	80007be <__aeabi_ddiv+0x82>
 800083c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000840:	d10b      	bne.n	800085a <__aeabi_ddiv+0x11e>
 8000842:	ea41 0100 	orr.w	r1, r1, r0
 8000846:	f04f 0000 	mov.w	r0, #0
 800084a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800084e:	e7b6      	b.n	80007be <__aeabi_ddiv+0x82>
 8000850:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000854:	bf04      	itt	eq
 8000856:	4301      	orreq	r1, r0
 8000858:	2000      	moveq	r0, #0
 800085a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800085e:	bf88      	it	hi
 8000860:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000864:	f63f aeaf 	bhi.w	80005c6 <__aeabi_dmul+0xde>
 8000868:	ebb5 0c03 	subs.w	ip, r5, r3
 800086c:	bf04      	itt	eq
 800086e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000872:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000876:	f150 0000 	adcs.w	r0, r0, #0
 800087a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800087e:	bd70      	pop	{r4, r5, r6, pc}
 8000880:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000884:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000888:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800088c:	bfc2      	ittt	gt
 800088e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000892:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000896:	bd70      	popgt	{r4, r5, r6, pc}
 8000898:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800089c:	f04f 0e00 	mov.w	lr, #0
 80008a0:	3c01      	subs	r4, #1
 80008a2:	e690      	b.n	80005c6 <__aeabi_dmul+0xde>
 80008a4:	ea45 0e06 	orr.w	lr, r5, r6
 80008a8:	e68d      	b.n	80005c6 <__aeabi_dmul+0xde>
 80008aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008ae:	ea94 0f0c 	teq	r4, ip
 80008b2:	bf08      	it	eq
 80008b4:	ea95 0f0c 	teqeq	r5, ip
 80008b8:	f43f af3b 	beq.w	8000732 <__aeabi_dmul+0x24a>
 80008bc:	ea94 0f0c 	teq	r4, ip
 80008c0:	d10a      	bne.n	80008d8 <__aeabi_ddiv+0x19c>
 80008c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008c6:	f47f af34 	bne.w	8000732 <__aeabi_dmul+0x24a>
 80008ca:	ea95 0f0c 	teq	r5, ip
 80008ce:	f47f af25 	bne.w	800071c <__aeabi_dmul+0x234>
 80008d2:	4610      	mov	r0, r2
 80008d4:	4619      	mov	r1, r3
 80008d6:	e72c      	b.n	8000732 <__aeabi_dmul+0x24a>
 80008d8:	ea95 0f0c 	teq	r5, ip
 80008dc:	d106      	bne.n	80008ec <__aeabi_ddiv+0x1b0>
 80008de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008e2:	f43f aefd 	beq.w	80006e0 <__aeabi_dmul+0x1f8>
 80008e6:	4610      	mov	r0, r2
 80008e8:	4619      	mov	r1, r3
 80008ea:	e722      	b.n	8000732 <__aeabi_dmul+0x24a>
 80008ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008f0:	bf18      	it	ne
 80008f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008f6:	f47f aec5 	bne.w	8000684 <__aeabi_dmul+0x19c>
 80008fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008fe:	f47f af0d 	bne.w	800071c <__aeabi_dmul+0x234>
 8000902:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000906:	f47f aeeb 	bne.w	80006e0 <__aeabi_dmul+0x1f8>
 800090a:	e712      	b.n	8000732 <__aeabi_dmul+0x24a>

0800090c <__gedf2>:
 800090c:	f04f 3cff 	mov.w	ip, #4294967295
 8000910:	e006      	b.n	8000920 <__cmpdf2+0x4>
 8000912:	bf00      	nop

08000914 <__ledf2>:
 8000914:	f04f 0c01 	mov.w	ip, #1
 8000918:	e002      	b.n	8000920 <__cmpdf2+0x4>
 800091a:	bf00      	nop

0800091c <__cmpdf2>:
 800091c:	f04f 0c01 	mov.w	ip, #1
 8000920:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000924:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000928:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800092c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000930:	bf18      	it	ne
 8000932:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000936:	d01b      	beq.n	8000970 <__cmpdf2+0x54>
 8000938:	b001      	add	sp, #4
 800093a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800093e:	bf0c      	ite	eq
 8000940:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000944:	ea91 0f03 	teqne	r1, r3
 8000948:	bf02      	ittt	eq
 800094a:	ea90 0f02 	teqeq	r0, r2
 800094e:	2000      	moveq	r0, #0
 8000950:	4770      	bxeq	lr
 8000952:	f110 0f00 	cmn.w	r0, #0
 8000956:	ea91 0f03 	teq	r1, r3
 800095a:	bf58      	it	pl
 800095c:	4299      	cmppl	r1, r3
 800095e:	bf08      	it	eq
 8000960:	4290      	cmpeq	r0, r2
 8000962:	bf2c      	ite	cs
 8000964:	17d8      	asrcs	r0, r3, #31
 8000966:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800096a:	f040 0001 	orr.w	r0, r0, #1
 800096e:	4770      	bx	lr
 8000970:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d102      	bne.n	8000980 <__cmpdf2+0x64>
 800097a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800097e:	d107      	bne.n	8000990 <__cmpdf2+0x74>
 8000980:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000984:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000988:	d1d6      	bne.n	8000938 <__cmpdf2+0x1c>
 800098a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800098e:	d0d3      	beq.n	8000938 <__cmpdf2+0x1c>
 8000990:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000994:	4770      	bx	lr
 8000996:	bf00      	nop

08000998 <__aeabi_cdrcmple>:
 8000998:	4684      	mov	ip, r0
 800099a:	4610      	mov	r0, r2
 800099c:	4662      	mov	r2, ip
 800099e:	468c      	mov	ip, r1
 80009a0:	4619      	mov	r1, r3
 80009a2:	4663      	mov	r3, ip
 80009a4:	e000      	b.n	80009a8 <__aeabi_cdcmpeq>
 80009a6:	bf00      	nop

080009a8 <__aeabi_cdcmpeq>:
 80009a8:	b501      	push	{r0, lr}
 80009aa:	f7ff ffb7 	bl	800091c <__cmpdf2>
 80009ae:	2800      	cmp	r0, #0
 80009b0:	bf48      	it	mi
 80009b2:	f110 0f00 	cmnmi.w	r0, #0
 80009b6:	bd01      	pop	{r0, pc}

080009b8 <__aeabi_dcmpeq>:
 80009b8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009bc:	f7ff fff4 	bl	80009a8 <__aeabi_cdcmpeq>
 80009c0:	bf0c      	ite	eq
 80009c2:	2001      	moveq	r0, #1
 80009c4:	2000      	movne	r0, #0
 80009c6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ca:	bf00      	nop

080009cc <__aeabi_dcmplt>:
 80009cc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d0:	f7ff ffea 	bl	80009a8 <__aeabi_cdcmpeq>
 80009d4:	bf34      	ite	cc
 80009d6:	2001      	movcc	r0, #1
 80009d8:	2000      	movcs	r0, #0
 80009da:	f85d fb08 	ldr.w	pc, [sp], #8
 80009de:	bf00      	nop

080009e0 <__aeabi_dcmple>:
 80009e0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e4:	f7ff ffe0 	bl	80009a8 <__aeabi_cdcmpeq>
 80009e8:	bf94      	ite	ls
 80009ea:	2001      	movls	r0, #1
 80009ec:	2000      	movhi	r0, #0
 80009ee:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f2:	bf00      	nop

080009f4 <__aeabi_dcmpge>:
 80009f4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009f8:	f7ff ffce 	bl	8000998 <__aeabi_cdrcmple>
 80009fc:	bf94      	ite	ls
 80009fe:	2001      	movls	r0, #1
 8000a00:	2000      	movhi	r0, #0
 8000a02:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a06:	bf00      	nop

08000a08 <__aeabi_dcmpgt>:
 8000a08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a0c:	f7ff ffc4 	bl	8000998 <__aeabi_cdrcmple>
 8000a10:	bf34      	ite	cc
 8000a12:	2001      	movcc	r0, #1
 8000a14:	2000      	movcs	r0, #0
 8000a16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a1a:	bf00      	nop

08000a1c <GPIO_vSetPinMode>:
2. GPIO_PIN_OUTPUT_SPD_10
3. GPIO_PIN_OUTPUT_SPD_2
4. GPIO_PIN_OUTPUT_SPD_50
*/
void GPIO_vSetPinMode(uint8 Copy_u8Port , uint8 Copy_u8Pin , uint8 Copy_u8Mode)
{
 8000a1c:	b480      	push	{r7}
 8000a1e:	b083      	sub	sp, #12
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	4603      	mov	r3, r0
 8000a24:	71fb      	strb	r3, [r7, #7]
 8000a26:	460b      	mov	r3, r1
 8000a28:	71bb      	strb	r3, [r7, #6]
 8000a2a:	4613      	mov	r3, r2
 8000a2c:	717b      	strb	r3, [r7, #5]
	if (Copy_u8Pin >= 0 && Copy_u8Pin < 8)
 8000a2e:	79bb      	ldrb	r3, [r7, #6]
 8000a30:	2b07      	cmp	r3, #7
 8000a32:	d852      	bhi.n	8000ada <GPIO_vSetPinMode+0xbe>
	{
		switch(Copy_u8Port)
 8000a34:	79fb      	ldrb	r3, [r7, #7]
 8000a36:	2b02      	cmp	r3, #2
 8000a38:	d037      	beq.n	8000aaa <GPIO_vSetPinMode+0x8e>
 8000a3a:	2b02      	cmp	r3, #2
 8000a3c:	f300 80a9 	bgt.w	8000b92 <GPIO_vSetPinMode+0x176>
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	d002      	beq.n	8000a4a <GPIO_vSetPinMode+0x2e>
 8000a44:	2b01      	cmp	r3, #1
 8000a46:	d018      	beq.n	8000a7a <GPIO_vSetPinMode+0x5e>
			GPIOC->CRH &=~(3 << (4*Copy_u8Pin)); // initialize with 0
			GPIOC->CRH |= (Copy_u8Mode << (4*Copy_u8Pin));
			break;
		}
	}
}
 8000a48:	e0a3      	b.n	8000b92 <GPIO_vSetPinMode+0x176>
			GPIOA->CRL &=~(3 << (4*Copy_u8Pin)); // initialize with 0
 8000a4a:	4b54      	ldr	r3, [pc, #336]	; (8000b9c <GPIO_vSetPinMode+0x180>)
 8000a4c:	681b      	ldr	r3, [r3, #0]
 8000a4e:	79ba      	ldrb	r2, [r7, #6]
 8000a50:	0092      	lsls	r2, r2, #2
 8000a52:	2103      	movs	r1, #3
 8000a54:	fa01 f202 	lsl.w	r2, r1, r2
 8000a58:	43d2      	mvns	r2, r2
 8000a5a:	4611      	mov	r1, r2
 8000a5c:	4a4f      	ldr	r2, [pc, #316]	; (8000b9c <GPIO_vSetPinMode+0x180>)
 8000a5e:	400b      	ands	r3, r1
 8000a60:	6013      	str	r3, [r2, #0]
			GPIOA->CRL |= (Copy_u8Mode << (4*Copy_u8Pin));
 8000a62:	4b4e      	ldr	r3, [pc, #312]	; (8000b9c <GPIO_vSetPinMode+0x180>)
 8000a64:	681b      	ldr	r3, [r3, #0]
 8000a66:	7979      	ldrb	r1, [r7, #5]
 8000a68:	79ba      	ldrb	r2, [r7, #6]
 8000a6a:	0092      	lsls	r2, r2, #2
 8000a6c:	fa01 f202 	lsl.w	r2, r1, r2
 8000a70:	4611      	mov	r1, r2
 8000a72:	4a4a      	ldr	r2, [pc, #296]	; (8000b9c <GPIO_vSetPinMode+0x180>)
 8000a74:	430b      	orrs	r3, r1
 8000a76:	6013      	str	r3, [r2, #0]
			break;
 8000a78:	e08b      	b.n	8000b92 <GPIO_vSetPinMode+0x176>
			GPIOB->CRL &=~(3 << (4*Copy_u8Pin)); // initialize with 0
 8000a7a:	4b49      	ldr	r3, [pc, #292]	; (8000ba0 <GPIO_vSetPinMode+0x184>)
 8000a7c:	681b      	ldr	r3, [r3, #0]
 8000a7e:	79ba      	ldrb	r2, [r7, #6]
 8000a80:	0092      	lsls	r2, r2, #2
 8000a82:	2103      	movs	r1, #3
 8000a84:	fa01 f202 	lsl.w	r2, r1, r2
 8000a88:	43d2      	mvns	r2, r2
 8000a8a:	4611      	mov	r1, r2
 8000a8c:	4a44      	ldr	r2, [pc, #272]	; (8000ba0 <GPIO_vSetPinMode+0x184>)
 8000a8e:	400b      	ands	r3, r1
 8000a90:	6013      	str	r3, [r2, #0]
			GPIOB->CRL |= (Copy_u8Mode << (4*Copy_u8Pin));
 8000a92:	4b43      	ldr	r3, [pc, #268]	; (8000ba0 <GPIO_vSetPinMode+0x184>)
 8000a94:	681b      	ldr	r3, [r3, #0]
 8000a96:	7979      	ldrb	r1, [r7, #5]
 8000a98:	79ba      	ldrb	r2, [r7, #6]
 8000a9a:	0092      	lsls	r2, r2, #2
 8000a9c:	fa01 f202 	lsl.w	r2, r1, r2
 8000aa0:	4611      	mov	r1, r2
 8000aa2:	4a3f      	ldr	r2, [pc, #252]	; (8000ba0 <GPIO_vSetPinMode+0x184>)
 8000aa4:	430b      	orrs	r3, r1
 8000aa6:	6013      	str	r3, [r2, #0]
			break;
 8000aa8:	e073      	b.n	8000b92 <GPIO_vSetPinMode+0x176>
			GPIOC->CRL &=~(3 << (4*Copy_u8Pin)); // initialize with 0
 8000aaa:	4b3e      	ldr	r3, [pc, #248]	; (8000ba4 <GPIO_vSetPinMode+0x188>)
 8000aac:	681b      	ldr	r3, [r3, #0]
 8000aae:	79ba      	ldrb	r2, [r7, #6]
 8000ab0:	0092      	lsls	r2, r2, #2
 8000ab2:	2103      	movs	r1, #3
 8000ab4:	fa01 f202 	lsl.w	r2, r1, r2
 8000ab8:	43d2      	mvns	r2, r2
 8000aba:	4611      	mov	r1, r2
 8000abc:	4a39      	ldr	r2, [pc, #228]	; (8000ba4 <GPIO_vSetPinMode+0x188>)
 8000abe:	400b      	ands	r3, r1
 8000ac0:	6013      	str	r3, [r2, #0]
			GPIOC->CRL |= (Copy_u8Mode << (4*Copy_u8Pin));
 8000ac2:	4b38      	ldr	r3, [pc, #224]	; (8000ba4 <GPIO_vSetPinMode+0x188>)
 8000ac4:	681b      	ldr	r3, [r3, #0]
 8000ac6:	7979      	ldrb	r1, [r7, #5]
 8000ac8:	79ba      	ldrb	r2, [r7, #6]
 8000aca:	0092      	lsls	r2, r2, #2
 8000acc:	fa01 f202 	lsl.w	r2, r1, r2
 8000ad0:	4611      	mov	r1, r2
 8000ad2:	4a34      	ldr	r2, [pc, #208]	; (8000ba4 <GPIO_vSetPinMode+0x188>)
 8000ad4:	430b      	orrs	r3, r1
 8000ad6:	6013      	str	r3, [r2, #0]
			break;
 8000ad8:	e05b      	b.n	8000b92 <GPIO_vSetPinMode+0x176>
	else if(Copy_u8Pin >= 8 && Copy_u8Pin < 16)
 8000ada:	79bb      	ldrb	r3, [r7, #6]
 8000adc:	2b07      	cmp	r3, #7
 8000ade:	d957      	bls.n	8000b90 <GPIO_vSetPinMode+0x174>
 8000ae0:	79bb      	ldrb	r3, [r7, #6]
 8000ae2:	2b0f      	cmp	r3, #15
 8000ae4:	d854      	bhi.n	8000b90 <GPIO_vSetPinMode+0x174>
		Copy_u8Pin = Copy_u8Pin - 8;
 8000ae6:	79bb      	ldrb	r3, [r7, #6]
 8000ae8:	3b08      	subs	r3, #8
 8000aea:	71bb      	strb	r3, [r7, #6]
		switch(Copy_u8Port)
 8000aec:	79fb      	ldrb	r3, [r7, #7]
 8000aee:	2b02      	cmp	r3, #2
 8000af0:	d036      	beq.n	8000b60 <GPIO_vSetPinMode+0x144>
 8000af2:	2b02      	cmp	r3, #2
 8000af4:	dc4d      	bgt.n	8000b92 <GPIO_vSetPinMode+0x176>
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	d002      	beq.n	8000b00 <GPIO_vSetPinMode+0xe4>
 8000afa:	2b01      	cmp	r3, #1
 8000afc:	d018      	beq.n	8000b30 <GPIO_vSetPinMode+0x114>
}
 8000afe:	e048      	b.n	8000b92 <GPIO_vSetPinMode+0x176>
			GPIOA->CRH &=~(3 << (4*Copy_u8Pin)); // initialize with 0
 8000b00:	4b26      	ldr	r3, [pc, #152]	; (8000b9c <GPIO_vSetPinMode+0x180>)
 8000b02:	685b      	ldr	r3, [r3, #4]
 8000b04:	79ba      	ldrb	r2, [r7, #6]
 8000b06:	0092      	lsls	r2, r2, #2
 8000b08:	2103      	movs	r1, #3
 8000b0a:	fa01 f202 	lsl.w	r2, r1, r2
 8000b0e:	43d2      	mvns	r2, r2
 8000b10:	4611      	mov	r1, r2
 8000b12:	4a22      	ldr	r2, [pc, #136]	; (8000b9c <GPIO_vSetPinMode+0x180>)
 8000b14:	400b      	ands	r3, r1
 8000b16:	6053      	str	r3, [r2, #4]
			GPIOA->CRH |= (Copy_u8Mode << (4*Copy_u8Pin));
 8000b18:	4b20      	ldr	r3, [pc, #128]	; (8000b9c <GPIO_vSetPinMode+0x180>)
 8000b1a:	685b      	ldr	r3, [r3, #4]
 8000b1c:	7979      	ldrb	r1, [r7, #5]
 8000b1e:	79ba      	ldrb	r2, [r7, #6]
 8000b20:	0092      	lsls	r2, r2, #2
 8000b22:	fa01 f202 	lsl.w	r2, r1, r2
 8000b26:	4611      	mov	r1, r2
 8000b28:	4a1c      	ldr	r2, [pc, #112]	; (8000b9c <GPIO_vSetPinMode+0x180>)
 8000b2a:	430b      	orrs	r3, r1
 8000b2c:	6053      	str	r3, [r2, #4]
			break;
 8000b2e:	e030      	b.n	8000b92 <GPIO_vSetPinMode+0x176>
			GPIOB->CRH &=~(3 << (4*Copy_u8Pin)); // initialize with 0
 8000b30:	4b1b      	ldr	r3, [pc, #108]	; (8000ba0 <GPIO_vSetPinMode+0x184>)
 8000b32:	685b      	ldr	r3, [r3, #4]
 8000b34:	79ba      	ldrb	r2, [r7, #6]
 8000b36:	0092      	lsls	r2, r2, #2
 8000b38:	2103      	movs	r1, #3
 8000b3a:	fa01 f202 	lsl.w	r2, r1, r2
 8000b3e:	43d2      	mvns	r2, r2
 8000b40:	4611      	mov	r1, r2
 8000b42:	4a17      	ldr	r2, [pc, #92]	; (8000ba0 <GPIO_vSetPinMode+0x184>)
 8000b44:	400b      	ands	r3, r1
 8000b46:	6053      	str	r3, [r2, #4]
			GPIOB->CRH |= (Copy_u8Mode << (4*Copy_u8Pin));
 8000b48:	4b15      	ldr	r3, [pc, #84]	; (8000ba0 <GPIO_vSetPinMode+0x184>)
 8000b4a:	685b      	ldr	r3, [r3, #4]
 8000b4c:	7979      	ldrb	r1, [r7, #5]
 8000b4e:	79ba      	ldrb	r2, [r7, #6]
 8000b50:	0092      	lsls	r2, r2, #2
 8000b52:	fa01 f202 	lsl.w	r2, r1, r2
 8000b56:	4611      	mov	r1, r2
 8000b58:	4a11      	ldr	r2, [pc, #68]	; (8000ba0 <GPIO_vSetPinMode+0x184>)
 8000b5a:	430b      	orrs	r3, r1
 8000b5c:	6053      	str	r3, [r2, #4]
			break;
 8000b5e:	e018      	b.n	8000b92 <GPIO_vSetPinMode+0x176>
			GPIOC->CRH &=~(3 << (4*Copy_u8Pin)); // initialize with 0
 8000b60:	4b10      	ldr	r3, [pc, #64]	; (8000ba4 <GPIO_vSetPinMode+0x188>)
 8000b62:	685b      	ldr	r3, [r3, #4]
 8000b64:	79ba      	ldrb	r2, [r7, #6]
 8000b66:	0092      	lsls	r2, r2, #2
 8000b68:	2103      	movs	r1, #3
 8000b6a:	fa01 f202 	lsl.w	r2, r1, r2
 8000b6e:	43d2      	mvns	r2, r2
 8000b70:	4611      	mov	r1, r2
 8000b72:	4a0c      	ldr	r2, [pc, #48]	; (8000ba4 <GPIO_vSetPinMode+0x188>)
 8000b74:	400b      	ands	r3, r1
 8000b76:	6053      	str	r3, [r2, #4]
			GPIOC->CRH |= (Copy_u8Mode << (4*Copy_u8Pin));
 8000b78:	4b0a      	ldr	r3, [pc, #40]	; (8000ba4 <GPIO_vSetPinMode+0x188>)
 8000b7a:	685b      	ldr	r3, [r3, #4]
 8000b7c:	7979      	ldrb	r1, [r7, #5]
 8000b7e:	79ba      	ldrb	r2, [r7, #6]
 8000b80:	0092      	lsls	r2, r2, #2
 8000b82:	fa01 f202 	lsl.w	r2, r1, r2
 8000b86:	4611      	mov	r1, r2
 8000b88:	4a06      	ldr	r2, [pc, #24]	; (8000ba4 <GPIO_vSetPinMode+0x188>)
 8000b8a:	430b      	orrs	r3, r1
 8000b8c:	6053      	str	r3, [r2, #4]
			break;
 8000b8e:	e000      	b.n	8000b92 <GPIO_vSetPinMode+0x176>
	}
 8000b90:	bf00      	nop
}
 8000b92:	bf00      	nop
 8000b94:	370c      	adds	r7, #12
 8000b96:	46bd      	mov	sp, r7
 8000b98:	bc80      	pop	{r7}
 8000b9a:	4770      	bx	lr
 8000b9c:	40010800 	.word	0x40010800
 8000ba0:	40010c00 	.word	0x40010c00
 8000ba4:	40011000 	.word	0x40011000

08000ba8 <GPIO_vSetPinConfig>:
2. GPIO_OUT_OPENDRAIN
3. AFIO_PUSHPULL
4. AFIO_OPENDRAIN			
*/
void GPIO_vSetPinConfig(uint8 Copy_u8Port,uint8 Copy_u8Pin , uint8 Copy_u8Config)
{
 8000ba8:	b480      	push	{r7}
 8000baa:	b083      	sub	sp, #12
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	4603      	mov	r3, r0
 8000bb0:	71fb      	strb	r3, [r7, #7]
 8000bb2:	460b      	mov	r3, r1
 8000bb4:	71bb      	strb	r3, [r7, #6]
 8000bb6:	4613      	mov	r3, r2
 8000bb8:	717b      	strb	r3, [r7, #5]
	if (Copy_u8Pin >= 0 && Copy_u8Pin < 8)
 8000bba:	79bb      	ldrb	r3, [r7, #6]
 8000bbc:	2b07      	cmp	r3, #7
 8000bbe:	d858      	bhi.n	8000c72 <GPIO_vSetPinConfig+0xca>
	{
		switch(Copy_u8Port)
 8000bc0:	79fb      	ldrb	r3, [r7, #7]
 8000bc2:	2b02      	cmp	r3, #2
 8000bc4:	d03b      	beq.n	8000c3e <GPIO_vSetPinConfig+0x96>
 8000bc6:	2b02      	cmp	r3, #2
 8000bc8:	f300 80b5 	bgt.w	8000d36 <GPIO_vSetPinConfig+0x18e>
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	d002      	beq.n	8000bd6 <GPIO_vSetPinConfig+0x2e>
 8000bd0:	2b01      	cmp	r3, #1
 8000bd2:	d01a      	beq.n	8000c0a <GPIO_vSetPinConfig+0x62>
			GPIOC->CRH &=~(3 << (4*Copy_u8Pin+2)); // initialize with 0
			GPIOC->CRH |= (Copy_u8Config << (4*Copy_u8Pin+2));
			break;
		}
	}
}
 8000bd4:	e0af      	b.n	8000d36 <GPIO_vSetPinConfig+0x18e>
			GPIOA->CRL &=~(3 << (4*Copy_u8Pin+2)); // initialize with 0
 8000bd6:	4b5a      	ldr	r3, [pc, #360]	; (8000d40 <GPIO_vSetPinConfig+0x198>)
 8000bd8:	681b      	ldr	r3, [r3, #0]
 8000bda:	79ba      	ldrb	r2, [r7, #6]
 8000bdc:	0092      	lsls	r2, r2, #2
 8000bde:	3202      	adds	r2, #2
 8000be0:	2103      	movs	r1, #3
 8000be2:	fa01 f202 	lsl.w	r2, r1, r2
 8000be6:	43d2      	mvns	r2, r2
 8000be8:	4611      	mov	r1, r2
 8000bea:	4a55      	ldr	r2, [pc, #340]	; (8000d40 <GPIO_vSetPinConfig+0x198>)
 8000bec:	400b      	ands	r3, r1
 8000bee:	6013      	str	r3, [r2, #0]
			GPIOA->CRL |= (Copy_u8Config << (4*Copy_u8Pin+2));
 8000bf0:	4b53      	ldr	r3, [pc, #332]	; (8000d40 <GPIO_vSetPinConfig+0x198>)
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	7979      	ldrb	r1, [r7, #5]
 8000bf6:	79ba      	ldrb	r2, [r7, #6]
 8000bf8:	0092      	lsls	r2, r2, #2
 8000bfa:	3202      	adds	r2, #2
 8000bfc:	fa01 f202 	lsl.w	r2, r1, r2
 8000c00:	4611      	mov	r1, r2
 8000c02:	4a4f      	ldr	r2, [pc, #316]	; (8000d40 <GPIO_vSetPinConfig+0x198>)
 8000c04:	430b      	orrs	r3, r1
 8000c06:	6013      	str	r3, [r2, #0]
			break;
 8000c08:	e095      	b.n	8000d36 <GPIO_vSetPinConfig+0x18e>
			GPIOB->CRL &=~(3 << (4*Copy_u8Pin+2)); // initialize with 0
 8000c0a:	4b4e      	ldr	r3, [pc, #312]	; (8000d44 <GPIO_vSetPinConfig+0x19c>)
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	79ba      	ldrb	r2, [r7, #6]
 8000c10:	0092      	lsls	r2, r2, #2
 8000c12:	3202      	adds	r2, #2
 8000c14:	2103      	movs	r1, #3
 8000c16:	fa01 f202 	lsl.w	r2, r1, r2
 8000c1a:	43d2      	mvns	r2, r2
 8000c1c:	4611      	mov	r1, r2
 8000c1e:	4a49      	ldr	r2, [pc, #292]	; (8000d44 <GPIO_vSetPinConfig+0x19c>)
 8000c20:	400b      	ands	r3, r1
 8000c22:	6013      	str	r3, [r2, #0]
			GPIOB->CRL |= (Copy_u8Config << (4*Copy_u8Pin+2));
 8000c24:	4b47      	ldr	r3, [pc, #284]	; (8000d44 <GPIO_vSetPinConfig+0x19c>)
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	7979      	ldrb	r1, [r7, #5]
 8000c2a:	79ba      	ldrb	r2, [r7, #6]
 8000c2c:	0092      	lsls	r2, r2, #2
 8000c2e:	3202      	adds	r2, #2
 8000c30:	fa01 f202 	lsl.w	r2, r1, r2
 8000c34:	4611      	mov	r1, r2
 8000c36:	4a43      	ldr	r2, [pc, #268]	; (8000d44 <GPIO_vSetPinConfig+0x19c>)
 8000c38:	430b      	orrs	r3, r1
 8000c3a:	6013      	str	r3, [r2, #0]
			break;
 8000c3c:	e07b      	b.n	8000d36 <GPIO_vSetPinConfig+0x18e>
			GPIOC->CRL &=~(3 << (4*Copy_u8Pin+2)); // initialize with 0
 8000c3e:	4b42      	ldr	r3, [pc, #264]	; (8000d48 <GPIO_vSetPinConfig+0x1a0>)
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	79ba      	ldrb	r2, [r7, #6]
 8000c44:	0092      	lsls	r2, r2, #2
 8000c46:	3202      	adds	r2, #2
 8000c48:	2103      	movs	r1, #3
 8000c4a:	fa01 f202 	lsl.w	r2, r1, r2
 8000c4e:	43d2      	mvns	r2, r2
 8000c50:	4611      	mov	r1, r2
 8000c52:	4a3d      	ldr	r2, [pc, #244]	; (8000d48 <GPIO_vSetPinConfig+0x1a0>)
 8000c54:	400b      	ands	r3, r1
 8000c56:	6013      	str	r3, [r2, #0]
			GPIOC->CRL |= (Copy_u8Config << (4*Copy_u8Pin+2));
 8000c58:	4b3b      	ldr	r3, [pc, #236]	; (8000d48 <GPIO_vSetPinConfig+0x1a0>)
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	7979      	ldrb	r1, [r7, #5]
 8000c5e:	79ba      	ldrb	r2, [r7, #6]
 8000c60:	0092      	lsls	r2, r2, #2
 8000c62:	3202      	adds	r2, #2
 8000c64:	fa01 f202 	lsl.w	r2, r1, r2
 8000c68:	4611      	mov	r1, r2
 8000c6a:	4a37      	ldr	r2, [pc, #220]	; (8000d48 <GPIO_vSetPinConfig+0x1a0>)
 8000c6c:	430b      	orrs	r3, r1
 8000c6e:	6013      	str	r3, [r2, #0]
			break;
 8000c70:	e061      	b.n	8000d36 <GPIO_vSetPinConfig+0x18e>
	else if(Copy_u8Pin >= 8 && Copy_u8Pin < 16)
 8000c72:	79bb      	ldrb	r3, [r7, #6]
 8000c74:	2b07      	cmp	r3, #7
 8000c76:	d95d      	bls.n	8000d34 <GPIO_vSetPinConfig+0x18c>
 8000c78:	79bb      	ldrb	r3, [r7, #6]
 8000c7a:	2b0f      	cmp	r3, #15
 8000c7c:	d85a      	bhi.n	8000d34 <GPIO_vSetPinConfig+0x18c>
		Copy_u8Pin = Copy_u8Pin -8;
 8000c7e:	79bb      	ldrb	r3, [r7, #6]
 8000c80:	3b08      	subs	r3, #8
 8000c82:	71bb      	strb	r3, [r7, #6]
		switch(Copy_u8Port)
 8000c84:	79fb      	ldrb	r3, [r7, #7]
 8000c86:	2b02      	cmp	r3, #2
 8000c88:	d03a      	beq.n	8000d00 <GPIO_vSetPinConfig+0x158>
 8000c8a:	2b02      	cmp	r3, #2
 8000c8c:	dc53      	bgt.n	8000d36 <GPIO_vSetPinConfig+0x18e>
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d002      	beq.n	8000c98 <GPIO_vSetPinConfig+0xf0>
 8000c92:	2b01      	cmp	r3, #1
 8000c94:	d01a      	beq.n	8000ccc <GPIO_vSetPinConfig+0x124>
}
 8000c96:	e04e      	b.n	8000d36 <GPIO_vSetPinConfig+0x18e>
			GPIOA->CRH &=~(3 << (4*Copy_u8Pin+2)); // initialize with 0
 8000c98:	4b29      	ldr	r3, [pc, #164]	; (8000d40 <GPIO_vSetPinConfig+0x198>)
 8000c9a:	685b      	ldr	r3, [r3, #4]
 8000c9c:	79ba      	ldrb	r2, [r7, #6]
 8000c9e:	0092      	lsls	r2, r2, #2
 8000ca0:	3202      	adds	r2, #2
 8000ca2:	2103      	movs	r1, #3
 8000ca4:	fa01 f202 	lsl.w	r2, r1, r2
 8000ca8:	43d2      	mvns	r2, r2
 8000caa:	4611      	mov	r1, r2
 8000cac:	4a24      	ldr	r2, [pc, #144]	; (8000d40 <GPIO_vSetPinConfig+0x198>)
 8000cae:	400b      	ands	r3, r1
 8000cb0:	6053      	str	r3, [r2, #4]
			GPIOA->CRH |= (Copy_u8Config << (4*Copy_u8Pin+2));
 8000cb2:	4b23      	ldr	r3, [pc, #140]	; (8000d40 <GPIO_vSetPinConfig+0x198>)
 8000cb4:	685b      	ldr	r3, [r3, #4]
 8000cb6:	7979      	ldrb	r1, [r7, #5]
 8000cb8:	79ba      	ldrb	r2, [r7, #6]
 8000cba:	0092      	lsls	r2, r2, #2
 8000cbc:	3202      	adds	r2, #2
 8000cbe:	fa01 f202 	lsl.w	r2, r1, r2
 8000cc2:	4611      	mov	r1, r2
 8000cc4:	4a1e      	ldr	r2, [pc, #120]	; (8000d40 <GPIO_vSetPinConfig+0x198>)
 8000cc6:	430b      	orrs	r3, r1
 8000cc8:	6053      	str	r3, [r2, #4]
			break;
 8000cca:	e034      	b.n	8000d36 <GPIO_vSetPinConfig+0x18e>
			GPIOB->CRH &=~(3 << (4*Copy_u8Pin+2)); // initialize with 0
 8000ccc:	4b1d      	ldr	r3, [pc, #116]	; (8000d44 <GPIO_vSetPinConfig+0x19c>)
 8000cce:	685b      	ldr	r3, [r3, #4]
 8000cd0:	79ba      	ldrb	r2, [r7, #6]
 8000cd2:	0092      	lsls	r2, r2, #2
 8000cd4:	3202      	adds	r2, #2
 8000cd6:	2103      	movs	r1, #3
 8000cd8:	fa01 f202 	lsl.w	r2, r1, r2
 8000cdc:	43d2      	mvns	r2, r2
 8000cde:	4611      	mov	r1, r2
 8000ce0:	4a18      	ldr	r2, [pc, #96]	; (8000d44 <GPIO_vSetPinConfig+0x19c>)
 8000ce2:	400b      	ands	r3, r1
 8000ce4:	6053      	str	r3, [r2, #4]
			GPIOB->CRH |= (Copy_u8Config << (4*Copy_u8Pin+2));
 8000ce6:	4b17      	ldr	r3, [pc, #92]	; (8000d44 <GPIO_vSetPinConfig+0x19c>)
 8000ce8:	685b      	ldr	r3, [r3, #4]
 8000cea:	7979      	ldrb	r1, [r7, #5]
 8000cec:	79ba      	ldrb	r2, [r7, #6]
 8000cee:	0092      	lsls	r2, r2, #2
 8000cf0:	3202      	adds	r2, #2
 8000cf2:	fa01 f202 	lsl.w	r2, r1, r2
 8000cf6:	4611      	mov	r1, r2
 8000cf8:	4a12      	ldr	r2, [pc, #72]	; (8000d44 <GPIO_vSetPinConfig+0x19c>)
 8000cfa:	430b      	orrs	r3, r1
 8000cfc:	6053      	str	r3, [r2, #4]
			break;
 8000cfe:	e01a      	b.n	8000d36 <GPIO_vSetPinConfig+0x18e>
			GPIOC->CRH &=~(3 << (4*Copy_u8Pin+2)); // initialize with 0
 8000d00:	4b11      	ldr	r3, [pc, #68]	; (8000d48 <GPIO_vSetPinConfig+0x1a0>)
 8000d02:	685b      	ldr	r3, [r3, #4]
 8000d04:	79ba      	ldrb	r2, [r7, #6]
 8000d06:	0092      	lsls	r2, r2, #2
 8000d08:	3202      	adds	r2, #2
 8000d0a:	2103      	movs	r1, #3
 8000d0c:	fa01 f202 	lsl.w	r2, r1, r2
 8000d10:	43d2      	mvns	r2, r2
 8000d12:	4611      	mov	r1, r2
 8000d14:	4a0c      	ldr	r2, [pc, #48]	; (8000d48 <GPIO_vSetPinConfig+0x1a0>)
 8000d16:	400b      	ands	r3, r1
 8000d18:	6053      	str	r3, [r2, #4]
			GPIOC->CRH |= (Copy_u8Config << (4*Copy_u8Pin+2));
 8000d1a:	4b0b      	ldr	r3, [pc, #44]	; (8000d48 <GPIO_vSetPinConfig+0x1a0>)
 8000d1c:	685b      	ldr	r3, [r3, #4]
 8000d1e:	7979      	ldrb	r1, [r7, #5]
 8000d20:	79ba      	ldrb	r2, [r7, #6]
 8000d22:	0092      	lsls	r2, r2, #2
 8000d24:	3202      	adds	r2, #2
 8000d26:	fa01 f202 	lsl.w	r2, r1, r2
 8000d2a:	4611      	mov	r1, r2
 8000d2c:	4a06      	ldr	r2, [pc, #24]	; (8000d48 <GPIO_vSetPinConfig+0x1a0>)
 8000d2e:	430b      	orrs	r3, r1
 8000d30:	6053      	str	r3, [r2, #4]
			break;
 8000d32:	e000      	b.n	8000d36 <GPIO_vSetPinConfig+0x18e>
	}
 8000d34:	bf00      	nop
}
 8000d36:	bf00      	nop
 8000d38:	370c      	adds	r7, #12
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	bc80      	pop	{r7}
 8000d3e:	4770      	bx	lr
 8000d40:	40010800 	.word	0x40010800
 8000d44:	40010c00 	.word	0x40010c00
 8000d48:	40011000 	.word	0x40011000

08000d4c <GPIO_vSetPinValue>:

*/


void GPIO_vSetPinValue(uint8 Copy_u8Port , uint8 Copy_u8Pin , uint8 Copy_u8Value)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	b083      	sub	sp, #12
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	4603      	mov	r3, r0
 8000d54:	71fb      	strb	r3, [r7, #7]
 8000d56:	460b      	mov	r3, r1
 8000d58:	71bb      	strb	r3, [r7, #6]
 8000d5a:	4613      	mov	r3, r2
 8000d5c:	717b      	strb	r3, [r7, #5]
	if(Copy_u8Value == HIGH)
 8000d5e:	797b      	ldrb	r3, [r7, #5]
 8000d60:	2b01      	cmp	r3, #1
 8000d62:	d12a      	bne.n	8000dba <GPIO_vSetPinValue+0x6e>
	{
		switch(Copy_u8Port)
 8000d64:	79fb      	ldrb	r3, [r7, #7]
 8000d66:	2b02      	cmp	r3, #2
 8000d68:	d01c      	beq.n	8000da4 <GPIO_vSetPinValue+0x58>
 8000d6a:	2b02      	cmp	r3, #2
 8000d6c:	dc53      	bgt.n	8000e16 <GPIO_vSetPinValue+0xca>
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d002      	beq.n	8000d78 <GPIO_vSetPinValue+0x2c>
 8000d72:	2b01      	cmp	r3, #1
 8000d74:	d00b      	beq.n	8000d8e <GPIO_vSetPinValue+0x42>
		case GPIO_PORT_C:
		CLR_BIT(GPIOC->ODR,Copy_u8Pin);
		break;
		}
	}
}
 8000d76:	e04e      	b.n	8000e16 <GPIO_vSetPinValue+0xca>
			SET_BIT(GPIOA->ODR,Copy_u8Pin);
 8000d78:	4b29      	ldr	r3, [pc, #164]	; (8000e20 <GPIO_vSetPinValue+0xd4>)
 8000d7a:	68db      	ldr	r3, [r3, #12]
 8000d7c:	79ba      	ldrb	r2, [r7, #6]
 8000d7e:	2101      	movs	r1, #1
 8000d80:	fa01 f202 	lsl.w	r2, r1, r2
 8000d84:	4611      	mov	r1, r2
 8000d86:	4a26      	ldr	r2, [pc, #152]	; (8000e20 <GPIO_vSetPinValue+0xd4>)
 8000d88:	430b      	orrs	r3, r1
 8000d8a:	60d3      	str	r3, [r2, #12]
			break;
 8000d8c:	e043      	b.n	8000e16 <GPIO_vSetPinValue+0xca>
			SET_BIT(GPIOB->ODR,Copy_u8Pin);
 8000d8e:	4b25      	ldr	r3, [pc, #148]	; (8000e24 <GPIO_vSetPinValue+0xd8>)
 8000d90:	68db      	ldr	r3, [r3, #12]
 8000d92:	79ba      	ldrb	r2, [r7, #6]
 8000d94:	2101      	movs	r1, #1
 8000d96:	fa01 f202 	lsl.w	r2, r1, r2
 8000d9a:	4611      	mov	r1, r2
 8000d9c:	4a21      	ldr	r2, [pc, #132]	; (8000e24 <GPIO_vSetPinValue+0xd8>)
 8000d9e:	430b      	orrs	r3, r1
 8000da0:	60d3      	str	r3, [r2, #12]
			break;
 8000da2:	e038      	b.n	8000e16 <GPIO_vSetPinValue+0xca>
			SET_BIT(GPIOC->ODR,Copy_u8Pin);
 8000da4:	4b20      	ldr	r3, [pc, #128]	; (8000e28 <GPIO_vSetPinValue+0xdc>)
 8000da6:	68db      	ldr	r3, [r3, #12]
 8000da8:	79ba      	ldrb	r2, [r7, #6]
 8000daa:	2101      	movs	r1, #1
 8000dac:	fa01 f202 	lsl.w	r2, r1, r2
 8000db0:	4611      	mov	r1, r2
 8000db2:	4a1d      	ldr	r2, [pc, #116]	; (8000e28 <GPIO_vSetPinValue+0xdc>)
 8000db4:	430b      	orrs	r3, r1
 8000db6:	60d3      	str	r3, [r2, #12]
			break;
 8000db8:	e02d      	b.n	8000e16 <GPIO_vSetPinValue+0xca>
		switch(Copy_u8Port)
 8000dba:	79fb      	ldrb	r3, [r7, #7]
 8000dbc:	2b02      	cmp	r3, #2
 8000dbe:	d01e      	beq.n	8000dfe <GPIO_vSetPinValue+0xb2>
 8000dc0:	2b02      	cmp	r3, #2
 8000dc2:	dc28      	bgt.n	8000e16 <GPIO_vSetPinValue+0xca>
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	d002      	beq.n	8000dce <GPIO_vSetPinValue+0x82>
 8000dc8:	2b01      	cmp	r3, #1
 8000dca:	d00c      	beq.n	8000de6 <GPIO_vSetPinValue+0x9a>
}
 8000dcc:	e023      	b.n	8000e16 <GPIO_vSetPinValue+0xca>
		CLR_BIT(GPIOA->ODR,Copy_u8Pin);
 8000dce:	4b14      	ldr	r3, [pc, #80]	; (8000e20 <GPIO_vSetPinValue+0xd4>)
 8000dd0:	68db      	ldr	r3, [r3, #12]
 8000dd2:	79ba      	ldrb	r2, [r7, #6]
 8000dd4:	2101      	movs	r1, #1
 8000dd6:	fa01 f202 	lsl.w	r2, r1, r2
 8000dda:	43d2      	mvns	r2, r2
 8000ddc:	4611      	mov	r1, r2
 8000dde:	4a10      	ldr	r2, [pc, #64]	; (8000e20 <GPIO_vSetPinValue+0xd4>)
 8000de0:	400b      	ands	r3, r1
 8000de2:	60d3      	str	r3, [r2, #12]
		break;
 8000de4:	e017      	b.n	8000e16 <GPIO_vSetPinValue+0xca>
		CLR_BIT(GPIOB->ODR,Copy_u8Pin);
 8000de6:	4b0f      	ldr	r3, [pc, #60]	; (8000e24 <GPIO_vSetPinValue+0xd8>)
 8000de8:	68db      	ldr	r3, [r3, #12]
 8000dea:	79ba      	ldrb	r2, [r7, #6]
 8000dec:	2101      	movs	r1, #1
 8000dee:	fa01 f202 	lsl.w	r2, r1, r2
 8000df2:	43d2      	mvns	r2, r2
 8000df4:	4611      	mov	r1, r2
 8000df6:	4a0b      	ldr	r2, [pc, #44]	; (8000e24 <GPIO_vSetPinValue+0xd8>)
 8000df8:	400b      	ands	r3, r1
 8000dfa:	60d3      	str	r3, [r2, #12]
		break;
 8000dfc:	e00b      	b.n	8000e16 <GPIO_vSetPinValue+0xca>
		CLR_BIT(GPIOC->ODR,Copy_u8Pin);
 8000dfe:	4b0a      	ldr	r3, [pc, #40]	; (8000e28 <GPIO_vSetPinValue+0xdc>)
 8000e00:	68db      	ldr	r3, [r3, #12]
 8000e02:	79ba      	ldrb	r2, [r7, #6]
 8000e04:	2101      	movs	r1, #1
 8000e06:	fa01 f202 	lsl.w	r2, r1, r2
 8000e0a:	43d2      	mvns	r2, r2
 8000e0c:	4611      	mov	r1, r2
 8000e0e:	4a06      	ldr	r2, [pc, #24]	; (8000e28 <GPIO_vSetPinValue+0xdc>)
 8000e10:	400b      	ands	r3, r1
 8000e12:	60d3      	str	r3, [r2, #12]
		break;
 8000e14:	bf00      	nop
}
 8000e16:	bf00      	nop
 8000e18:	370c      	adds	r7, #12
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	bc80      	pop	{r7}
 8000e1e:	4770      	bx	lr
 8000e20:	40010800 	.word	0x40010800
 8000e24:	40010c00 	.word	0x40010c00
 8000e28:	40011000 	.word	0x40011000

08000e2c <I2C_vInit>:
#include "SYSTICK_interface.h"


/********************************************************************************************************************************************/
void I2C_vInit(void)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	af00      	add	r7, sp, #0
	//Enable Alternate function
	RCC_u8EnablePeripheralClk(RCC_u8_APB2_BUS,AFIOEN);
 8000e30:	2100      	movs	r1, #0
 8000e32:	2003      	movs	r0, #3
 8000e34:	f000 fb26 	bl	8001484 <RCC_u8EnablePeripheralClk>
	//Enable I2C1
	RCC_u8EnablePeripheralClk(RCC_u8_APB1_BUS,I2C1EN);
 8000e38:	2115      	movs	r1, #21
 8000e3a:	2002      	movs	r0, #2
 8000e3c:	f000 fb22 	bl	8001484 <RCC_u8EnablePeripheralClk>
	//No remap (SCL/PB6, SDA/PB7)
	CLR_BIT(AFIO->MAPR,AFIO_I2C1_REMAP);
 8000e40:	4b1f      	ldr	r3, [pc, #124]	; (8000ec0 <I2C_vInit+0x94>)
 8000e42:	785b      	ldrb	r3, [r3, #1]
 8000e44:	b2db      	uxtb	r3, r3
 8000e46:	4a1e      	ldr	r2, [pc, #120]	; (8000ec0 <I2C_vInit+0x94>)
 8000e48:	f023 0302 	bic.w	r3, r3, #2
 8000e4c:	b2db      	uxtb	r3, r3
 8000e4e:	7053      	strb	r3, [r2, #1]
	//Enable pins portB -> SCL , SDA
	RCC_u8EnablePeripheralClk(RCC_u8_APB2_BUS,GPIOB_EN);
 8000e50:	2103      	movs	r1, #3
 8000e52:	2003      	movs	r0, #3
 8000e54:	f000 fb16 	bl	8001484 <RCC_u8EnablePeripheralClk>
	

	GPIO_vSetPinMode(GPIO_PORT_B,GPIO_PIN_6,GPIO_PIN_OUTPUT_SPD_50);
 8000e58:	2203      	movs	r2, #3
 8000e5a:	2106      	movs	r1, #6
 8000e5c:	2001      	movs	r0, #1
 8000e5e:	f7ff fddd 	bl	8000a1c <GPIO_vSetPinMode>
	GPIO_vSetPinConfig(GPIO_PORT_B,GPIO_PIN_6,AFIO_OPENDRAIN);
 8000e62:	2203      	movs	r2, #3
 8000e64:	2106      	movs	r1, #6
 8000e66:	2001      	movs	r0, #1
 8000e68:	f7ff fe9e 	bl	8000ba8 <GPIO_vSetPinConfig>
	GPIO_vSetPinMode(GPIO_PORT_B,GPIO_PIN_7,GPIO_PIN_OUTPUT_SPD_50);
 8000e6c:	2203      	movs	r2, #3
 8000e6e:	2107      	movs	r1, #7
 8000e70:	2001      	movs	r0, #1
 8000e72:	f7ff fdd3 	bl	8000a1c <GPIO_vSetPinMode>
	GPIO_vSetPinConfig(GPIO_PORT_B,GPIO_PIN_7,AFIO_OPENDRAIN);
 8000e76:	2203      	movs	r2, #3
 8000e78:	2107      	movs	r1, #7
 8000e7a:	2001      	movs	r0, #1
 8000e7c:	f7ff fe94 	bl	8000ba8 <GPIO_vSetPinConfig>
	//reset the peripheral
	SET_BIT(I2C1->CR1,I2C_CR1_SWRST);
 8000e80:	4b10      	ldr	r3, [pc, #64]	; (8000ec4 <I2C_vInit+0x98>)
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	4a0f      	ldr	r2, [pc, #60]	; (8000ec4 <I2C_vInit+0x98>)
 8000e86:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000e8a:	6013      	str	r3, [r2, #0]
	CLR_BIT(I2C1->CR1,I2C_CR1_SWRST);
 8000e8c:	4b0d      	ldr	r3, [pc, #52]	; (8000ec4 <I2C_vInit+0x98>)
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	4a0c      	ldr	r2, [pc, #48]	; (8000ec4 <I2C_vInit+0x98>)
 8000e92:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000e96:	6013      	str	r3, [r2, #0]
	
	I2C1->CR2 = 0x8;
 8000e98:	4b0a      	ldr	r3, [pc, #40]	; (8000ec4 <I2C_vInit+0x98>)
 8000e9a:	2208      	movs	r2, #8
 8000e9c:	605a      	str	r2, [r3, #4]
	I2C1->CCR = 40;
 8000e9e:	4b09      	ldr	r3, [pc, #36]	; (8000ec4 <I2C_vInit+0x98>)
 8000ea0:	2228      	movs	r2, #40	; 0x28
 8000ea2:	61da      	str	r2, [r3, #28]
	
	I2C1->TRISE = 0x09;		// APB1+1
 8000ea4:	4b07      	ldr	r3, [pc, #28]	; (8000ec4 <I2C_vInit+0x98>)
 8000ea6:	2209      	movs	r2, #9
 8000ea8:	621a      	str	r2, [r3, #32]
	
	//enable
	SET_BIT(I2C1->CR1,I2C_CR1_PE);
 8000eaa:	4b06      	ldr	r3, [pc, #24]	; (8000ec4 <I2C_vInit+0x98>)
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	4a05      	ldr	r2, [pc, #20]	; (8000ec4 <I2C_vInit+0x98>)
 8000eb0:	f043 0301 	orr.w	r3, r3, #1
 8000eb4:	6013      	str	r3, [r2, #0]
	
	_delay_ms(100);
 8000eb6:	2064      	movs	r0, #100	; 0x64
 8000eb8:	f000 fb78 	bl	80015ac <_delay_ms>
}
 8000ebc:	bf00      	nop
 8000ebe:	bd80      	pop	{r7, pc}
 8000ec0:	40010000 	.word	0x40010000
 8000ec4:	40005400 	.word	0x40005400

08000ec8 <I2C_vStartCond>:


/********************************************************************************************************************************************/
uint8 I2C_vStartCond(void)
{
 8000ec8:	b480      	push	{r7}
 8000eca:	b083      	sub	sp, #12
 8000ecc:	af00      	add	r7, sp, #0
	uint16 LOC_time = 0;
 8000ece:	2300      	movs	r3, #0
 8000ed0:	80fb      	strh	r3, [r7, #6]
	uint8 Return_value = 0;
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	717b      	strb	r3, [r7, #5]
	//set start pin and wait for the flag
	SET_BIT(I2C1->CR1,I2C_CR1_START);
 8000ed6:	4b12      	ldr	r3, [pc, #72]	; (8000f20 <I2C_vStartCond+0x58>)
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	4a11      	ldr	r2, [pc, #68]	; (8000f20 <I2C_vStartCond+0x58>)
 8000edc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ee0:	6013      	str	r3, [r2, #0]
	
	while(READ_BIT(I2C1->SR1,I2C_SR1_SB)==0 && LOC_time < I2C_TIME_OUT)
 8000ee2:	e002      	b.n	8000eea <I2C_vStartCond+0x22>
	{
		LOC_time ++;
 8000ee4:	88fb      	ldrh	r3, [r7, #6]
 8000ee6:	3301      	adds	r3, #1
 8000ee8:	80fb      	strh	r3, [r7, #6]
	while(READ_BIT(I2C1->SR1,I2C_SR1_SB)==0 && LOC_time < I2C_TIME_OUT)
 8000eea:	4b0d      	ldr	r3, [pc, #52]	; (8000f20 <I2C_vStartCond+0x58>)
 8000eec:	695b      	ldr	r3, [r3, #20]
 8000eee:	f003 0301 	and.w	r3, r3, #1
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d104      	bne.n	8000f00 <I2C_vStartCond+0x38>
 8000ef6:	88fb      	ldrh	r3, [r7, #6]
 8000ef8:	f246 12a7 	movw	r2, #24999	; 0x61a7
 8000efc:	4293      	cmp	r3, r2
 8000efe:	d9f1      	bls.n	8000ee4 <I2C_vStartCond+0x1c>
	}
	(void) I2C1->SR1;
 8000f00:	4b07      	ldr	r3, [pc, #28]	; (8000f20 <I2C_vStartCond+0x58>)
 8000f02:	695b      	ldr	r3, [r3, #20]
	if(LOC_time >= I2C_TIME_OUT)
 8000f04:	88fb      	ldrh	r3, [r7, #6]
 8000f06:	f246 12a7 	movw	r2, #24999	; 0x61a7
 8000f0a:	4293      	cmp	r3, r2
 8000f0c:	d901      	bls.n	8000f12 <I2C_vStartCond+0x4a>
	{
		Return_value = 1;
 8000f0e:	2301      	movs	r3, #1
 8000f10:	717b      	strb	r3, [r7, #5]
	}
	return Return_value;
 8000f12:	797b      	ldrb	r3, [r7, #5]
}
 8000f14:	4618      	mov	r0, r3
 8000f16:	370c      	adds	r7, #12
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	bc80      	pop	{r7}
 8000f1c:	4770      	bx	lr
 8000f1e:	bf00      	nop
 8000f20:	40005400 	.word	0x40005400

08000f24 <I2C_vWriteAddress>:

/********************************************************************************************************************************************/


uint8 I2C_vWriteAddress(uint8 Copy_u8Address)
{
 8000f24:	b480      	push	{r7}
 8000f26:	b085      	sub	sp, #20
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	71fb      	strb	r3, [r7, #7]
	uint8 Return_value = 0;
 8000f2e:	2300      	movs	r3, #0
 8000f30:	73fb      	strb	r3, [r7, #15]
	uint16 LOC_time = 0;
 8000f32:	2300      	movs	r3, #0
 8000f34:	81bb      	strh	r3, [r7, #12]

	volatile int LOC_temp;
	I2C1->DR = Copy_u8Address;
 8000f36:	4a1c      	ldr	r2, [pc, #112]	; (8000fa8 <I2C_vWriteAddress+0x84>)
 8000f38:	79fb      	ldrb	r3, [r7, #7]
 8000f3a:	6113      	str	r3, [r2, #16]
	while(READ_BIT(I2C1->SR1,I2C_SR1_ADDR)==0 && LOC_time < I2C_TIME_OUT)
 8000f3c:	e002      	b.n	8000f44 <I2C_vWriteAddress+0x20>
	{
		LOC_time++;
 8000f3e:	89bb      	ldrh	r3, [r7, #12]
 8000f40:	3301      	adds	r3, #1
 8000f42:	81bb      	strh	r3, [r7, #12]
	while(READ_BIT(I2C1->SR1,I2C_SR1_ADDR)==0 && LOC_time < I2C_TIME_OUT)
 8000f44:	4b18      	ldr	r3, [pc, #96]	; (8000fa8 <I2C_vWriteAddress+0x84>)
 8000f46:	695b      	ldr	r3, [r3, #20]
 8000f48:	085b      	lsrs	r3, r3, #1
 8000f4a:	f003 0301 	and.w	r3, r3, #1
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d104      	bne.n	8000f5c <I2C_vWriteAddress+0x38>
 8000f52:	89bb      	ldrh	r3, [r7, #12]
 8000f54:	f246 12a7 	movw	r2, #24999	; 0x61a7
 8000f58:	4293      	cmp	r3, r2
 8000f5a:	d9f0      	bls.n	8000f3e <I2C_vWriteAddress+0x1a>
	}
	//read SR1 then SR2 to clear ADDR flag
	LOC_time = 0;
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	81bb      	strh	r3, [r7, #12]
	while(READ_BIT(I2C1->SR1,I2C_SR1_ADDR)==1 && LOC_time < I2C_TIME_OUT)
 8000f60:	e008      	b.n	8000f74 <I2C_vWriteAddress+0x50>
	{
		LOC_temp = I2C1->SR1;
 8000f62:	4b11      	ldr	r3, [pc, #68]	; (8000fa8 <I2C_vWriteAddress+0x84>)
 8000f64:	695b      	ldr	r3, [r3, #20]
 8000f66:	60bb      	str	r3, [r7, #8]
		LOC_temp = I2C1->SR2;
 8000f68:	4b0f      	ldr	r3, [pc, #60]	; (8000fa8 <I2C_vWriteAddress+0x84>)
 8000f6a:	699b      	ldr	r3, [r3, #24]
 8000f6c:	60bb      	str	r3, [r7, #8]
		LOC_time++;
 8000f6e:	89bb      	ldrh	r3, [r7, #12]
 8000f70:	3301      	adds	r3, #1
 8000f72:	81bb      	strh	r3, [r7, #12]
	while(READ_BIT(I2C1->SR1,I2C_SR1_ADDR)==1 && LOC_time < I2C_TIME_OUT)
 8000f74:	4b0c      	ldr	r3, [pc, #48]	; (8000fa8 <I2C_vWriteAddress+0x84>)
 8000f76:	695b      	ldr	r3, [r3, #20]
 8000f78:	085b      	lsrs	r3, r3, #1
 8000f7a:	f003 0301 	and.w	r3, r3, #1
 8000f7e:	2b01      	cmp	r3, #1
 8000f80:	d104      	bne.n	8000f8c <I2C_vWriteAddress+0x68>
 8000f82:	89bb      	ldrh	r3, [r7, #12]
 8000f84:	f246 12a7 	movw	r2, #24999	; 0x61a7
 8000f88:	4293      	cmp	r3, r2
 8000f8a:	d9ea      	bls.n	8000f62 <I2C_vWriteAddress+0x3e>
	}
	if(LOC_time >= I2C_TIME_OUT)
 8000f8c:	89bb      	ldrh	r3, [r7, #12]
 8000f8e:	f246 12a7 	movw	r2, #24999	; 0x61a7
 8000f92:	4293      	cmp	r3, r2
 8000f94:	d901      	bls.n	8000f9a <I2C_vWriteAddress+0x76>
	{
		Return_value = 1;
 8000f96:	2301      	movs	r3, #1
 8000f98:	73fb      	strb	r3, [r7, #15]
	}
	return Return_value;
 8000f9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	3714      	adds	r7, #20
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	bc80      	pop	{r7}
 8000fa4:	4770      	bx	lr
 8000fa6:	bf00      	nop
 8000fa8:	40005400 	.word	0x40005400

08000fac <I2C_vWriteData>:


/********************************************************************************************************************************************/
uint8 I2C_vWriteData(uint8 Copy_u8Data)
{
 8000fac:	b480      	push	{r7}
 8000fae:	b085      	sub	sp, #20
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	71fb      	strb	r3, [r7, #7]
	uint8 Return_value=0;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	73fb      	strb	r3, [r7, #15]
	uint16 LOC_time = 0;
 8000fba:	2300      	movs	r3, #0
 8000fbc:	81bb      	strh	r3, [r7, #12]
	//wait for the data register to be empty
	while(READ_BIT(I2C1->SR1,I2C_SR1_TXE)==0 && LOC_time < I2C_TIME_OUT)
 8000fbe:	e002      	b.n	8000fc6 <I2C_vWriteData+0x1a>
	{
		LOC_time++;
 8000fc0:	89bb      	ldrh	r3, [r7, #12]
 8000fc2:	3301      	adds	r3, #1
 8000fc4:	81bb      	strh	r3, [r7, #12]
	while(READ_BIT(I2C1->SR1,I2C_SR1_TXE)==0 && LOC_time < I2C_TIME_OUT)
 8000fc6:	4b1a      	ldr	r3, [pc, #104]	; (8001030 <I2C_vWriteData+0x84>)
 8000fc8:	695b      	ldr	r3, [r3, #20]
 8000fca:	09db      	lsrs	r3, r3, #7
 8000fcc:	f003 0301 	and.w	r3, r3, #1
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d104      	bne.n	8000fde <I2C_vWriteData+0x32>
 8000fd4:	89bb      	ldrh	r3, [r7, #12]
 8000fd6:	f246 12a7 	movw	r2, #24999	; 0x61a7
 8000fda:	4293      	cmp	r3, r2
 8000fdc:	d9f0      	bls.n	8000fc0 <I2C_vWriteData+0x14>
	}
	I2C1->DR = Copy_u8Data;
 8000fde:	4a14      	ldr	r2, [pc, #80]	; (8001030 <I2C_vWriteData+0x84>)
 8000fe0:	79fb      	ldrb	r3, [r7, #7]
 8000fe2:	6113      	str	r3, [r2, #16]
	if(LOC_time >= I2C_TIME_OUT)
 8000fe4:	89bb      	ldrh	r3, [r7, #12]
 8000fe6:	f246 12a7 	movw	r2, #24999	; 0x61a7
 8000fea:	4293      	cmp	r3, r2
 8000fec:	d901      	bls.n	8000ff2 <I2C_vWriteData+0x46>
	{
		Return_value = 1;
 8000fee:	2301      	movs	r3, #1
 8000ff0:	73fb      	strb	r3, [r7, #15]
	}
	LOC_time=0;
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	81bb      	strh	r3, [r7, #12]
	//wait for the data register to be empty
	while(READ_BIT(I2C1->SR1,I2C_SR1_TXE)==0 && LOC_time < I2C_TIME_OUT)
 8000ff6:	e002      	b.n	8000ffe <I2C_vWriteData+0x52>
	{
		LOC_time++;
 8000ff8:	89bb      	ldrh	r3, [r7, #12]
 8000ffa:	3301      	adds	r3, #1
 8000ffc:	81bb      	strh	r3, [r7, #12]
	while(READ_BIT(I2C1->SR1,I2C_SR1_TXE)==0 && LOC_time < I2C_TIME_OUT)
 8000ffe:	4b0c      	ldr	r3, [pc, #48]	; (8001030 <I2C_vWriteData+0x84>)
 8001000:	695b      	ldr	r3, [r3, #20]
 8001002:	09db      	lsrs	r3, r3, #7
 8001004:	f003 0301 	and.w	r3, r3, #1
 8001008:	2b00      	cmp	r3, #0
 800100a:	d104      	bne.n	8001016 <I2C_vWriteData+0x6a>
 800100c:	89bb      	ldrh	r3, [r7, #12]
 800100e:	f246 12a7 	movw	r2, #24999	; 0x61a7
 8001012:	4293      	cmp	r3, r2
 8001014:	d9f0      	bls.n	8000ff8 <I2C_vWriteData+0x4c>
	}
	if(LOC_time >= I2C_TIME_OUT)
 8001016:	89bb      	ldrh	r3, [r7, #12]
 8001018:	f246 12a7 	movw	r2, #24999	; 0x61a7
 800101c:	4293      	cmp	r3, r2
 800101e:	d901      	bls.n	8001024 <I2C_vWriteData+0x78>
	{
		Return_value = 2;
 8001020:	2302      	movs	r3, #2
 8001022:	73fb      	strb	r3, [r7, #15]
	}
	return Return_value;
 8001024:	7bfb      	ldrb	r3, [r7, #15]
}
 8001026:	4618      	mov	r0, r3
 8001028:	3714      	adds	r7, #20
 800102a:	46bd      	mov	sp, r7
 800102c:	bc80      	pop	{r7}
 800102e:	4770      	bx	lr
 8001030:	40005400 	.word	0x40005400

08001034 <I2C_vStopCond>:

/********************************************************************************************************************************************/


void I2C_vStopCond(void)
{
 8001034:	b480      	push	{r7}
 8001036:	b083      	sub	sp, #12
 8001038:	af00      	add	r7, sp, #0
	volatile int LOC_temp;
	LOC_temp = I2C1->SR1;
 800103a:	4b08      	ldr	r3, [pc, #32]	; (800105c <I2C_vStopCond+0x28>)
 800103c:	695b      	ldr	r3, [r3, #20]
 800103e:	607b      	str	r3, [r7, #4]
	LOC_temp = I2C1->SR2;
 8001040:	4b06      	ldr	r3, [pc, #24]	; (800105c <I2C_vStopCond+0x28>)
 8001042:	699b      	ldr	r3, [r3, #24]
 8001044:	607b      	str	r3, [r7, #4]
	//send a stop cond
	SET_BIT(I2C1->CR1,I2C_CR1_STOP);
 8001046:	4b05      	ldr	r3, [pc, #20]	; (800105c <I2C_vStopCond+0x28>)
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	4a04      	ldr	r2, [pc, #16]	; (800105c <I2C_vStopCond+0x28>)
 800104c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001050:	6013      	str	r3, [r2, #0]
}
 8001052:	bf00      	nop
 8001054:	370c      	adds	r7, #12
 8001056:	46bd      	mov	sp, r7
 8001058:	bc80      	pop	{r7}
 800105a:	4770      	bx	lr
 800105c:	40005400 	.word	0x40005400

08001060 <I2C_u8ReceiveData>:

/********************************************************************************************************************************************/

/* Copy_u8Ack_Nack == 1 if Nack (the last one) */
uint8 I2C_u8ReceiveData(uint8 Copy_u8Ack_Nack)
{
 8001060:	b480      	push	{r7}
 8001062:	b085      	sub	sp, #20
 8001064:	af00      	add	r7, sp, #0
 8001066:	4603      	mov	r3, r0
 8001068:	71fb      	strb	r3, [r7, #7]
	uint8 Return_value;
	uint16 LOC_time = 0;
 800106a:	2300      	movs	r3, #0
 800106c:	81fb      	strh	r3, [r7, #14]
	//send ack
	SET_BIT(I2C1->CR1,I2C_CR1_ACK);
 800106e:	4b14      	ldr	r3, [pc, #80]	; (80010c0 <I2C_u8ReceiveData+0x60>)
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	4a13      	ldr	r2, [pc, #76]	; (80010c0 <I2C_u8ReceiveData+0x60>)
 8001074:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001078:	6013      	str	r3, [r2, #0]
	//wait for the data to be received
	while(READ_BIT(I2C1->SR1,I2C_SR1_RXNE)==0 && LOC_time < I2C_TIME_OUT)
 800107a:	e002      	b.n	8001082 <I2C_u8ReceiveData+0x22>
	{
		LOC_time++;
 800107c:	89fb      	ldrh	r3, [r7, #14]
 800107e:	3301      	adds	r3, #1
 8001080:	81fb      	strh	r3, [r7, #14]
	while(READ_BIT(I2C1->SR1,I2C_SR1_RXNE)==0 && LOC_time < I2C_TIME_OUT)
 8001082:	4b0f      	ldr	r3, [pc, #60]	; (80010c0 <I2C_u8ReceiveData+0x60>)
 8001084:	695b      	ldr	r3, [r3, #20]
 8001086:	099b      	lsrs	r3, r3, #6
 8001088:	f003 0301 	and.w	r3, r3, #1
 800108c:	2b00      	cmp	r3, #0
 800108e:	d104      	bne.n	800109a <I2C_u8ReceiveData+0x3a>
 8001090:	89fb      	ldrh	r3, [r7, #14]
 8001092:	f246 12a7 	movw	r2, #24999	; 0x61a7
 8001096:	4293      	cmp	r3, r2
 8001098:	d9f0      	bls.n	800107c <I2C_u8ReceiveData+0x1c>
	}
	Return_value = I2C1->DR;
 800109a:	4b09      	ldr	r3, [pc, #36]	; (80010c0 <I2C_u8ReceiveData+0x60>)
 800109c:	691b      	ldr	r3, [r3, #16]
 800109e:	737b      	strb	r3, [r7, #13]
	if (Copy_u8Ack_Nack == I2C_NACK)
 80010a0:	79fb      	ldrb	r3, [r7, #7]
 80010a2:	2b01      	cmp	r3, #1
 80010a4:	d105      	bne.n	80010b2 <I2C_u8ReceiveData+0x52>
	{
		CLR_BIT(I2C1->CR1,I2C_CR1_ACK);
 80010a6:	4b06      	ldr	r3, [pc, #24]	; (80010c0 <I2C_u8ReceiveData+0x60>)
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	4a05      	ldr	r2, [pc, #20]	; (80010c0 <I2C_u8ReceiveData+0x60>)
 80010ac:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80010b0:	6013      	str	r3, [r2, #0]
	}
	return Return_value;
 80010b2:	7b7b      	ldrb	r3, [r7, #13]
}
 80010b4:	4618      	mov	r0, r3
 80010b6:	3714      	adds	r7, #20
 80010b8:	46bd      	mov	sp, r7
 80010ba:	bc80      	pop	{r7}
 80010bc:	4770      	bx	lr
 80010be:	bf00      	nop
 80010c0:	40005400 	.word	0x40005400

080010c4 <MPU6050_vInit>:
//double oldX = 0 , oldY = 0 , oldZ = 0;
//uint8 flag = 0;

/***************************************************************************************************/
void MPU6050_vInit(void)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	af00      	add	r7, sp, #0
	I2C_vStartCond();
 80010c8:	f7ff fefe 	bl	8000ec8 <I2C_vStartCond>
		I2C_vWriteAddress(0xD0);
 80010cc:	20d0      	movs	r0, #208	; 0xd0
 80010ce:	f7ff ff29 	bl	8000f24 <I2C_vWriteAddress>
		I2C_vWriteData(PWR_MGMT_1);
 80010d2:	206b      	movs	r0, #107	; 0x6b
 80010d4:	f7ff ff6a 	bl	8000fac <I2C_vWriteData>
		I2C_vWriteData(0x00);
 80010d8:	2000      	movs	r0, #0
 80010da:	f7ff ff67 	bl	8000fac <I2C_vWriteData>
		I2C_vStopCond();
 80010de:	f7ff ffa9 	bl	8001034 <I2C_vStopCond>

		I2C_vStartCond();
 80010e2:	f7ff fef1 	bl	8000ec8 <I2C_vStartCond>
		I2C_vWriteAddress(0xD0);
 80010e6:	20d0      	movs	r0, #208	; 0xd0
 80010e8:	f7ff ff1c 	bl	8000f24 <I2C_vWriteAddress>
		I2C_vWriteData(CONFIG);
 80010ec:	201a      	movs	r0, #26
 80010ee:	f7ff ff5d 	bl	8000fac <I2C_vWriteData>
		I2C_vWriteData(0x01);  // LPF, bandwidth = 184(accel) and 188(gyro)
 80010f2:	2001      	movs	r0, #1
 80010f4:	f7ff ff5a 	bl	8000fac <I2C_vWriteData>
		I2C_vStopCond();
 80010f8:	f7ff ff9c 	bl	8001034 <I2C_vStopCond>

		I2C_vStartCond();
 80010fc:	f7ff fee4 	bl	8000ec8 <I2C_vStartCond>
		I2C_vWriteAddress(0xD0);
 8001100:	20d0      	movs	r0, #208	; 0xd0
 8001102:	f7ff ff0f 	bl	8000f24 <I2C_vWriteAddress>
		I2C_vWriteData(GYRO_CONFIG);
 8001106:	201b      	movs	r0, #27
 8001108:	f7ff ff50 	bl	8000fac <I2C_vWriteData>
		I2C_vWriteData(1<<4); // gyro ADC scale: 1000 deg/s
 800110c:	2010      	movs	r0, #16
 800110e:	f7ff ff4d 	bl	8000fac <I2C_vWriteData>
		I2C_vStopCond();
 8001112:	f7ff ff8f 	bl	8001034 <I2C_vStopCond>

		I2C_vStartCond();
 8001116:	f7ff fed7 	bl	8000ec8 <I2C_vStartCond>
		I2C_vWriteAddress(0xD0);
 800111a:	20d0      	movs	r0, #208	; 0xd0
 800111c:	f7ff ff02 	bl	8000f24 <I2C_vWriteAddress>
		I2C_vWriteData(ACCEL_CONFIG);
 8001120:	201c      	movs	r0, #28
 8001122:	f7ff ff43 	bl	8000fac <I2C_vWriteData>
		I2C_vWriteData(0x10);
 8001126:	2010      	movs	r0, #16
 8001128:	f7ff ff40 	bl	8000fac <I2C_vWriteData>
		I2C_vStopCond();
 800112c:	f7ff ff82 	bl	8001034 <I2C_vStopCond>

		I2C_vStartCond();
 8001130:	f7ff feca 	bl	8000ec8 <I2C_vStartCond>
		I2C_vWriteAddress(0xD0);
 8001134:	20d0      	movs	r0, #208	; 0xd0
 8001136:	f7ff fef5 	bl	8000f24 <I2C_vWriteAddress>
		I2C_vWriteData(INT_ENABLE); //enable data ready interrupt  ->
 800113a:	2038      	movs	r0, #56	; 0x38
 800113c:	f7ff ff36 	bl	8000fac <I2C_vWriteData>
		I2C_vWriteData(0x01);
 8001140:	2001      	movs	r0, #1
 8001142:	f7ff ff33 	bl	8000fac <I2C_vWriteData>
		I2C_vStopCond();
 8001146:	f7ff ff75 	bl	8001034 <I2C_vStopCond>

		I2C_vStartCond();
 800114a:	f7ff febd 	bl	8000ec8 <I2C_vStartCond>
		I2C_vWriteAddress(0xD0);
 800114e:	20d0      	movs	r0, #208	; 0xd0
 8001150:	f7ff fee8 	bl	8000f24 <I2C_vWriteAddress>
		I2C_vWriteData(SIGNAL_PATH_RESET);   //don't reset signal path
 8001154:	2068      	movs	r0, #104	; 0x68
 8001156:	f7ff ff29 	bl	8000fac <I2C_vWriteData>
		I2C_vWriteData(0x00);
 800115a:	2000      	movs	r0, #0
 800115c:	f7ff ff26 	bl	8000fac <I2C_vWriteData>
		I2C_vStopCond();
 8001160:	f7ff ff68 	bl	8001034 <I2C_vStopCond>

}
 8001164:	bf00      	nop
 8001166:	bd80      	pop	{r7, pc}

08001168 <MPU6050_vReadRegisterValue>:

/***************************************************************************************************/

uint8 MPU6050_vReadRegisterValue(uint8 Copy_u8Address)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b084      	sub	sp, #16
 800116c:	af00      	add	r7, sp, #0
 800116e:	4603      	mov	r3, r0
 8001170:	71fb      	strb	r3, [r7, #7]
	uint8 Return_Value;
	I2C_vStartCond();
 8001172:	f7ff fea9 	bl	8000ec8 <I2C_vStartCond>
	I2C_vWriteAddress(0xD0);		//write register
 8001176:	20d0      	movs	r0, #208	; 0xd0
 8001178:	f7ff fed4 	bl	8000f24 <I2C_vWriteAddress>
	I2C_vWriteData(Copy_u8Address);
 800117c:	79fb      	ldrb	r3, [r7, #7]
 800117e:	4618      	mov	r0, r3
 8001180:	f7ff ff14 	bl	8000fac <I2C_vWriteData>
	I2C_vStartCond();
 8001184:	f7ff fea0 	bl	8000ec8 <I2C_vStartCond>
	I2C_vWriteAddress(0xD1);		//read register
 8001188:	20d1      	movs	r0, #209	; 0xd1
 800118a:	f7ff fecb 	bl	8000f24 <I2C_vWriteAddress>
	Return_Value = I2C_u8ReceiveData(I2C_NACK);
 800118e:	2001      	movs	r0, #1
 8001190:	f7ff ff66 	bl	8001060 <I2C_u8ReceiveData>
 8001194:	4603      	mov	r3, r0
 8001196:	73fb      	strb	r3, [r7, #15]
	I2C_vStopCond();
 8001198:	f7ff ff4c 	bl	8001034 <I2C_vStopCond>
	return Return_Value;
 800119c:	7bfb      	ldrb	r3, [r7, #15]
}
 800119e:	4618      	mov	r0, r3
 80011a0:	3710      	adds	r7, #16
 80011a2:	46bd      	mov	sp, r7
 80011a4:	bd80      	pop	{r7, pc}

080011a6 <MPU6050_vReadAccel_X>:
}

/***************************************************************************************************/

void MPU6050_vReadAccel_X(uint8 *Copy_u8LowByte , uint8 *Copy_u8HighByte)
{
 80011a6:	b580      	push	{r7, lr}
 80011a8:	b082      	sub	sp, #8
 80011aa:	af00      	add	r7, sp, #0
 80011ac:	6078      	str	r0, [r7, #4]
 80011ae:	6039      	str	r1, [r7, #0]
	*Copy_u8HighByte = MPU6050_vReadRegisterValue(ACCEL_XOUT_H);
 80011b0:	203b      	movs	r0, #59	; 0x3b
 80011b2:	f7ff ffd9 	bl	8001168 <MPU6050_vReadRegisterValue>
 80011b6:	4603      	mov	r3, r0
 80011b8:	461a      	mov	r2, r3
 80011ba:	683b      	ldr	r3, [r7, #0]
 80011bc:	701a      	strb	r2, [r3, #0]
	*Copy_u8LowByte = MPU6050_vReadRegisterValue(ACCEL_XOUT_L);
 80011be:	203c      	movs	r0, #60	; 0x3c
 80011c0:	f7ff ffd2 	bl	8001168 <MPU6050_vReadRegisterValue>
 80011c4:	4603      	mov	r3, r0
 80011c6:	461a      	mov	r2, r3
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	701a      	strb	r2, [r3, #0]
}
 80011cc:	bf00      	nop
 80011ce:	3708      	adds	r7, #8
 80011d0:	46bd      	mov	sp, r7
 80011d2:	bd80      	pop	{r7, pc}

080011d4 <MPU6050_vReadAccel_Y>:

/***************************************************************************************************/

void MPU6050_vReadAccel_Y(uint8 *Copy_u8LowByte , uint8 *Copy_u8HighByte)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b082      	sub	sp, #8
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
 80011dc:	6039      	str	r1, [r7, #0]
	*Copy_u8HighByte = MPU6050_vReadRegisterValue(ACCEL_YOUT_H);
 80011de:	203d      	movs	r0, #61	; 0x3d
 80011e0:	f7ff ffc2 	bl	8001168 <MPU6050_vReadRegisterValue>
 80011e4:	4603      	mov	r3, r0
 80011e6:	461a      	mov	r2, r3
 80011e8:	683b      	ldr	r3, [r7, #0]
 80011ea:	701a      	strb	r2, [r3, #0]
	*Copy_u8LowByte = MPU6050_vReadRegisterValue(ACCEL_YOUT_L);
 80011ec:	203e      	movs	r0, #62	; 0x3e
 80011ee:	f7ff ffbb 	bl	8001168 <MPU6050_vReadRegisterValue>
 80011f2:	4603      	mov	r3, r0
 80011f4:	461a      	mov	r2, r3
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	701a      	strb	r2, [r3, #0]
}
 80011fa:	bf00      	nop
 80011fc:	3708      	adds	r7, #8
 80011fe:	46bd      	mov	sp, r7
 8001200:	bd80      	pop	{r7, pc}

08001202 <MPU6050_vReadAccel_Z>:

/***************************************************************************************************/

void MPU6050_vReadAccel_Z(uint8 *Copy_u8LowByte , uint8 *Copy_u8HighByte)
{
 8001202:	b580      	push	{r7, lr}
 8001204:	b082      	sub	sp, #8
 8001206:	af00      	add	r7, sp, #0
 8001208:	6078      	str	r0, [r7, #4]
 800120a:	6039      	str	r1, [r7, #0]
	*Copy_u8HighByte = MPU6050_vReadRegisterValue(ACCEL_ZOUT_H);
 800120c:	203f      	movs	r0, #63	; 0x3f
 800120e:	f7ff ffab 	bl	8001168 <MPU6050_vReadRegisterValue>
 8001212:	4603      	mov	r3, r0
 8001214:	461a      	mov	r2, r3
 8001216:	683b      	ldr	r3, [r7, #0]
 8001218:	701a      	strb	r2, [r3, #0]
	*Copy_u8LowByte = MPU6050_vReadRegisterValue(ACCEL_ZOUT_L);
 800121a:	2040      	movs	r0, #64	; 0x40
 800121c:	f7ff ffa4 	bl	8001168 <MPU6050_vReadRegisterValue>
 8001220:	4603      	mov	r3, r0
 8001222:	461a      	mov	r2, r3
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	701a      	strb	r2, [r3, #0]
}
 8001228:	bf00      	nop
 800122a:	3708      	adds	r7, #8
 800122c:	46bd      	mov	sp, r7
 800122e:	bd80      	pop	{r7, pc}

08001230 <MPU6050_vReadAccel_ALL>:
}

/***************************************************************************************************/

void MPU6050_vReadAccel_ALL(sint16 *Copy_u16Buffer)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b084      	sub	sp, #16
 8001234:	af00      	add	r7, sp, #0
 8001236:	6078      	str	r0, [r7, #4]
	uint8 LOC_arr[2];
	MPU6050_vReadAccel_X(LOC_arr, LOC_arr+1);
 8001238:	f107 030c 	add.w	r3, r7, #12
 800123c:	3301      	adds	r3, #1
 800123e:	f107 020c 	add.w	r2, r7, #12
 8001242:	4619      	mov	r1, r3
 8001244:	4610      	mov	r0, r2
 8001246:	f7ff ffae 	bl	80011a6 <MPU6050_vReadAccel_X>
	Copy_u16Buffer[0] = (LOC_arr[1]<<8)|(LOC_arr[0]);
 800124a:	7b7b      	ldrb	r3, [r7, #13]
 800124c:	021b      	lsls	r3, r3, #8
 800124e:	b21a      	sxth	r2, r3
 8001250:	7b3b      	ldrb	r3, [r7, #12]
 8001252:	b21b      	sxth	r3, r3
 8001254:	4313      	orrs	r3, r2
 8001256:	b21a      	sxth	r2, r3
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	801a      	strh	r2, [r3, #0]

	MPU6050_vReadAccel_Y(LOC_arr, LOC_arr+1);
 800125c:	f107 030c 	add.w	r3, r7, #12
 8001260:	3301      	adds	r3, #1
 8001262:	f107 020c 	add.w	r2, r7, #12
 8001266:	4619      	mov	r1, r3
 8001268:	4610      	mov	r0, r2
 800126a:	f7ff ffb3 	bl	80011d4 <MPU6050_vReadAccel_Y>
	Copy_u16Buffer[1] = (LOC_arr[1]<<8)|(LOC_arr[0]);
 800126e:	7b7b      	ldrb	r3, [r7, #13]
 8001270:	021b      	lsls	r3, r3, #8
 8001272:	b219      	sxth	r1, r3
 8001274:	7b3b      	ldrb	r3, [r7, #12]
 8001276:	b21a      	sxth	r2, r3
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	3302      	adds	r3, #2
 800127c:	430a      	orrs	r2, r1
 800127e:	b212      	sxth	r2, r2
 8001280:	801a      	strh	r2, [r3, #0]

	MPU6050_vReadAccel_Z(LOC_arr, LOC_arr+1);
 8001282:	f107 030c 	add.w	r3, r7, #12
 8001286:	3301      	adds	r3, #1
 8001288:	f107 020c 	add.w	r2, r7, #12
 800128c:	4619      	mov	r1, r3
 800128e:	4610      	mov	r0, r2
 8001290:	f7ff ffb7 	bl	8001202 <MPU6050_vReadAccel_Z>
	Copy_u16Buffer[2] = (LOC_arr[1]<<8)|(LOC_arr[0]);
 8001294:	7b7b      	ldrb	r3, [r7, #13]
 8001296:	021b      	lsls	r3, r3, #8
 8001298:	b219      	sxth	r1, r3
 800129a:	7b3b      	ldrb	r3, [r7, #12]
 800129c:	b21a      	sxth	r2, r3
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	3304      	adds	r3, #4
 80012a2:	430a      	orrs	r2, r1
 80012a4:	b212      	sxth	r2, r2
 80012a6:	801a      	strh	r2, [r3, #0]
}
 80012a8:	bf00      	nop
 80012aa:	3710      	adds	r7, #16
 80012ac:	46bd      	mov	sp, r7
 80012ae:	bd80      	pop	{r7, pc}

080012b0 <MPU6050_vDetectChange>:

/***************************************************************************************************/

uint8 MPU6050_vDetectChange(double *old)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b08c      	sub	sp, #48	; 0x30
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]
	sint16 accel_buff[3];
	double accelX, accelY, accelZ;
	//double deltX = 0 , deltY = 0 , deltZ = 0;

	uint8 Return_value = 0;
 80012b8:	2300      	movs	r3, #0
 80012ba:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	MPU6050_vReadAccel_ALL(accel_buff);
 80012be:	f107 0308 	add.w	r3, r7, #8
 80012c2:	4618      	mov	r0, r3
 80012c4:	f7ff ffb4 	bl	8001230 <MPU6050_vReadAccel_ALL>
	// acceleration (m/s^2)
	accelX = accel_buff[0]*9.8*8/32768;
 80012c8:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80012cc:	4618      	mov	r0, r3
 80012ce:	f7ff f8a1 	bl	8000414 <__aeabi_i2d>
 80012d2:	a355      	add	r3, pc, #340	; (adr r3, 8001428 <MPU6050_vDetectChange+0x178>)
 80012d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012d8:	f7ff f906 	bl	80004e8 <__aeabi_dmul>
 80012dc:	4602      	mov	r2, r0
 80012de:	460b      	mov	r3, r1
 80012e0:	4610      	mov	r0, r2
 80012e2:	4619      	mov	r1, r3
 80012e4:	f04f 0200 	mov.w	r2, #0
 80012e8:	4b51      	ldr	r3, [pc, #324]	; (8001430 <MPU6050_vDetectChange+0x180>)
 80012ea:	f7ff f8fd 	bl	80004e8 <__aeabi_dmul>
 80012ee:	4602      	mov	r2, r0
 80012f0:	460b      	mov	r3, r1
 80012f2:	4610      	mov	r0, r2
 80012f4:	4619      	mov	r1, r3
 80012f6:	f04f 0200 	mov.w	r2, #0
 80012fa:	4b4e      	ldr	r3, [pc, #312]	; (8001434 <MPU6050_vDetectChange+0x184>)
 80012fc:	f7ff fa1e 	bl	800073c <__aeabi_ddiv>
 8001300:	4602      	mov	r2, r0
 8001302:	460b      	mov	r3, r1
 8001304:	e9c7 2308 	strd	r2, r3, [r7, #32]
	accelY = accel_buff[1]*9.8*8/32768;
 8001308:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800130c:	4618      	mov	r0, r3
 800130e:	f7ff f881 	bl	8000414 <__aeabi_i2d>
 8001312:	a345      	add	r3, pc, #276	; (adr r3, 8001428 <MPU6050_vDetectChange+0x178>)
 8001314:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001318:	f7ff f8e6 	bl	80004e8 <__aeabi_dmul>
 800131c:	4602      	mov	r2, r0
 800131e:	460b      	mov	r3, r1
 8001320:	4610      	mov	r0, r2
 8001322:	4619      	mov	r1, r3
 8001324:	f04f 0200 	mov.w	r2, #0
 8001328:	4b41      	ldr	r3, [pc, #260]	; (8001430 <MPU6050_vDetectChange+0x180>)
 800132a:	f7ff f8dd 	bl	80004e8 <__aeabi_dmul>
 800132e:	4602      	mov	r2, r0
 8001330:	460b      	mov	r3, r1
 8001332:	4610      	mov	r0, r2
 8001334:	4619      	mov	r1, r3
 8001336:	f04f 0200 	mov.w	r2, #0
 800133a:	4b3e      	ldr	r3, [pc, #248]	; (8001434 <MPU6050_vDetectChange+0x184>)
 800133c:	f7ff f9fe 	bl	800073c <__aeabi_ddiv>
 8001340:	4602      	mov	r2, r0
 8001342:	460b      	mov	r3, r1
 8001344:	e9c7 2306 	strd	r2, r3, [r7, #24]
	accelZ = accel_buff[2]*9.8*8/32768;
 8001348:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800134c:	4618      	mov	r0, r3
 800134e:	f7ff f861 	bl	8000414 <__aeabi_i2d>
 8001352:	a335      	add	r3, pc, #212	; (adr r3, 8001428 <MPU6050_vDetectChange+0x178>)
 8001354:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001358:	f7ff f8c6 	bl	80004e8 <__aeabi_dmul>
 800135c:	4602      	mov	r2, r0
 800135e:	460b      	mov	r3, r1
 8001360:	4610      	mov	r0, r2
 8001362:	4619      	mov	r1, r3
 8001364:	f04f 0200 	mov.w	r2, #0
 8001368:	4b31      	ldr	r3, [pc, #196]	; (8001430 <MPU6050_vDetectChange+0x180>)
 800136a:	f7ff f8bd 	bl	80004e8 <__aeabi_dmul>
 800136e:	4602      	mov	r2, r0
 8001370:	460b      	mov	r3, r1
 8001372:	4610      	mov	r0, r2
 8001374:	4619      	mov	r1, r3
 8001376:	f04f 0200 	mov.w	r2, #0
 800137a:	4b2e      	ldr	r3, [pc, #184]	; (8001434 <MPU6050_vDetectChange+0x184>)
 800137c:	f7ff f9de 	bl	800073c <__aeabi_ddiv>
 8001380:	4602      	mov	r2, r0
 8001382:	460b      	mov	r3, r1
 8001384:	e9c7 2304 	strd	r2, r3, [r7, #16]
	/*Copy_dOldValues[0] = accelX;
	Copy_dOldValues[1] = accelY;
	Copy_dOldValues[2] = accelZ;*/


	if((accelY >= MPU_SENSITIVITY || accelZ >= MPU_SENSITIVITY) && (((accelY-old[0])>=5)||(accelZ-old[1])>=5))
 8001388:	f04f 0200 	mov.w	r2, #0
 800138c:	4b2a      	ldr	r3, [pc, #168]	; (8001438 <MPU6050_vDetectChange+0x188>)
 800138e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001392:	f7ff fb2f 	bl	80009f4 <__aeabi_dcmpge>
 8001396:	4603      	mov	r3, r0
 8001398:	2b00      	cmp	r3, #0
 800139a:	d109      	bne.n	80013b0 <MPU6050_vDetectChange+0x100>
 800139c:	f04f 0200 	mov.w	r2, #0
 80013a0:	4b25      	ldr	r3, [pc, #148]	; (8001438 <MPU6050_vDetectChange+0x188>)
 80013a2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80013a6:	f7ff fb25 	bl	80009f4 <__aeabi_dcmpge>
 80013aa:	4603      	mov	r3, r0
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d029      	beq.n	8001404 <MPU6050_vDetectChange+0x154>
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013b6:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80013ba:	f7fe fedd 	bl	8000178 <__aeabi_dsub>
 80013be:	4602      	mov	r2, r0
 80013c0:	460b      	mov	r3, r1
 80013c2:	4610      	mov	r0, r2
 80013c4:	4619      	mov	r1, r3
 80013c6:	f04f 0200 	mov.w	r2, #0
 80013ca:	4b1c      	ldr	r3, [pc, #112]	; (800143c <MPU6050_vDetectChange+0x18c>)
 80013cc:	f7ff fb12 	bl	80009f4 <__aeabi_dcmpge>
 80013d0:	4603      	mov	r3, r0
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d113      	bne.n	80013fe <MPU6050_vDetectChange+0x14e>
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	3308      	adds	r3, #8
 80013da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013de:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80013e2:	f7fe fec9 	bl	8000178 <__aeabi_dsub>
 80013e6:	4602      	mov	r2, r0
 80013e8:	460b      	mov	r3, r1
 80013ea:	4610      	mov	r0, r2
 80013ec:	4619      	mov	r1, r3
 80013ee:	f04f 0200 	mov.w	r2, #0
 80013f2:	4b12      	ldr	r3, [pc, #72]	; (800143c <MPU6050_vDetectChange+0x18c>)
 80013f4:	f7ff fafe 	bl	80009f4 <__aeabi_dcmpge>
 80013f8:	4603      	mov	r3, r0
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d002      	beq.n	8001404 <MPU6050_vDetectChange+0x154>
	{
		Return_value = 1;
 80013fe:	2301      	movs	r3, #1
 8001400:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	}
	old[0]=accelY;
 8001404:	6879      	ldr	r1, [r7, #4]
 8001406:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800140a:	e9c1 2300 	strd	r2, r3, [r1]
	old[1]=accelZ;
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	f103 0108 	add.w	r1, r3, #8
 8001414:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001418:	e9c1 2300 	strd	r2, r3, [r1]
	return Return_value;
 800141c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8001420:	4618      	mov	r0, r3
 8001422:	3730      	adds	r7, #48	; 0x30
 8001424:	46bd      	mov	sp, r7
 8001426:	bd80      	pop	{r7, pc}
 8001428:	9999999a 	.word	0x9999999a
 800142c:	40239999 	.word	0x40239999
 8001430:	40200000 	.word	0x40200000
 8001434:	40e00000 	.word	0x40e00000
 8001438:	40180000 	.word	0x40180000
 800143c:	40140000 	.word	0x40140000

08001440 <RCC_u8InitSysClk>:
#include "RCC_private.h"
#include "RCC_config.h"


void RCC_u8InitSysClk				(void)
{
 8001440:	b480      	push	{r7}
 8001442:	af00      	add	r7, sp, #0
	/* select the clk to be selected */
	/* select clk source : 1:HSI , 2:HSE , 3:PLL */
#if RCC_u8_SYS_CLK == RCC_u8_HSI
	//RCC->CR=0x00000001;//HSI ON
		//RCC->CFGR=0x00000000;	   // HSI selected as clk system
		SET_BIT(RCC->CR,RCC_CR_HSION);
 8001444:	4b0e      	ldr	r3, [pc, #56]	; (8001480 <RCC_u8InitSysClk+0x40>)
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	4a0d      	ldr	r2, [pc, #52]	; (8001480 <RCC_u8InitSysClk+0x40>)
 800144a:	f043 0301 	orr.w	r3, r3, #1
 800144e:	6013      	str	r3, [r2, #0]
		while(READ_BIT(RCC->CR,RCC_CR_HSIRDY)==0);
 8001450:	bf00      	nop
 8001452:	4b0b      	ldr	r3, [pc, #44]	; (8001480 <RCC_u8InitSysClk+0x40>)
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	085b      	lsrs	r3, r3, #1
 8001458:	f003 0301 	and.w	r3, r3, #1
 800145c:	2b00      	cmp	r3, #0
 800145e:	d0f8      	beq.n	8001452 <RCC_u8InitSysClk+0x12>
		CLR_BIT(RCC->CFGR,RCC_CFGR_SW0);
 8001460:	4b07      	ldr	r3, [pc, #28]	; (8001480 <RCC_u8InitSysClk+0x40>)
 8001462:	685b      	ldr	r3, [r3, #4]
 8001464:	4a06      	ldr	r2, [pc, #24]	; (8001480 <RCC_u8InitSysClk+0x40>)
 8001466:	f023 0301 	bic.w	r3, r3, #1
 800146a:	6053      	str	r3, [r2, #4]
		CLR_BIT(RCC->CFGR,RCC_CFGR_SW1);
 800146c:	4b04      	ldr	r3, [pc, #16]	; (8001480 <RCC_u8InitSysClk+0x40>)
 800146e:	685b      	ldr	r3, [r3, #4]
 8001470:	4a03      	ldr	r2, [pc, #12]	; (8001480 <RCC_u8InitSysClk+0x40>)
 8001472:	f023 0302 	bic.w	r3, r3, #2
 8001476:	6053      	str	r3, [r2, #4]
	#error "Wrong System Clock Choice"

#endif
	

}
 8001478:	bf00      	nop
 800147a:	46bd      	mov	sp, r7
 800147c:	bc80      	pop	{r7}
 800147e:	4770      	bx	lr
 8001480:	40021000 	.word	0x40021000

08001484 <RCC_u8EnablePeripheralClk>:

void RCC_u8EnablePeripheralClk	(uint8 Copy_u8BusID , uint8 Copy_u8PeripheralID)
{
 8001484:	b480      	push	{r7}
 8001486:	b083      	sub	sp, #12
 8001488:	af00      	add	r7, sp, #0
 800148a:	4603      	mov	r3, r0
 800148c:	460a      	mov	r2, r1
 800148e:	71fb      	strb	r3, [r7, #7]
 8001490:	4613      	mov	r3, r2
 8001492:	71bb      	strb	r3, [r7, #6]
	if (Copy_u8PeripheralID <32)//if >32 then out of range
 8001494:	79bb      	ldrb	r3, [r7, #6]
 8001496:	2b1f      	cmp	r3, #31
 8001498:	d82a      	bhi.n	80014f0 <RCC_u8EnablePeripheralClk+0x6c>
	{
		switch (Copy_u8BusID)
 800149a:	79fb      	ldrb	r3, [r7, #7]
 800149c:	2b03      	cmp	r3, #3
 800149e:	d01c      	beq.n	80014da <RCC_u8EnablePeripheralClk+0x56>
 80014a0:	2b03      	cmp	r3, #3
 80014a2:	dc26      	bgt.n	80014f2 <RCC_u8EnablePeripheralClk+0x6e>
 80014a4:	2b01      	cmp	r3, #1
 80014a6:	d002      	beq.n	80014ae <RCC_u8EnablePeripheralClk+0x2a>
 80014a8:	2b02      	cmp	r3, #2
 80014aa:	d00b      	beq.n	80014c4 <RCC_u8EnablePeripheralClk+0x40>
			case RCC_u8_APB2_BUS:
				SET_BIT(RCC->APB2ENR,Copy_u8PeripheralID);
				break;
		}
	}
}
 80014ac:	e021      	b.n	80014f2 <RCC_u8EnablePeripheralClk+0x6e>
				SET_BIT(RCC->AHBENR,Copy_u8PeripheralID);
 80014ae:	4b13      	ldr	r3, [pc, #76]	; (80014fc <RCC_u8EnablePeripheralClk+0x78>)
 80014b0:	695b      	ldr	r3, [r3, #20]
 80014b2:	79ba      	ldrb	r2, [r7, #6]
 80014b4:	2101      	movs	r1, #1
 80014b6:	fa01 f202 	lsl.w	r2, r1, r2
 80014ba:	4611      	mov	r1, r2
 80014bc:	4a0f      	ldr	r2, [pc, #60]	; (80014fc <RCC_u8EnablePeripheralClk+0x78>)
 80014be:	430b      	orrs	r3, r1
 80014c0:	6153      	str	r3, [r2, #20]
				break;
 80014c2:	e016      	b.n	80014f2 <RCC_u8EnablePeripheralClk+0x6e>
				SET_BIT(RCC->APB1ENR,Copy_u8PeripheralID);
 80014c4:	4b0d      	ldr	r3, [pc, #52]	; (80014fc <RCC_u8EnablePeripheralClk+0x78>)
 80014c6:	69db      	ldr	r3, [r3, #28]
 80014c8:	79ba      	ldrb	r2, [r7, #6]
 80014ca:	2101      	movs	r1, #1
 80014cc:	fa01 f202 	lsl.w	r2, r1, r2
 80014d0:	4611      	mov	r1, r2
 80014d2:	4a0a      	ldr	r2, [pc, #40]	; (80014fc <RCC_u8EnablePeripheralClk+0x78>)
 80014d4:	430b      	orrs	r3, r1
 80014d6:	61d3      	str	r3, [r2, #28]
				break;
 80014d8:	e00b      	b.n	80014f2 <RCC_u8EnablePeripheralClk+0x6e>
				SET_BIT(RCC->APB2ENR,Copy_u8PeripheralID);
 80014da:	4b08      	ldr	r3, [pc, #32]	; (80014fc <RCC_u8EnablePeripheralClk+0x78>)
 80014dc:	699b      	ldr	r3, [r3, #24]
 80014de:	79ba      	ldrb	r2, [r7, #6]
 80014e0:	2101      	movs	r1, #1
 80014e2:	fa01 f202 	lsl.w	r2, r1, r2
 80014e6:	4611      	mov	r1, r2
 80014e8:	4a04      	ldr	r2, [pc, #16]	; (80014fc <RCC_u8EnablePeripheralClk+0x78>)
 80014ea:	430b      	orrs	r3, r1
 80014ec:	6193      	str	r3, [r2, #24]
				break;
 80014ee:	e000      	b.n	80014f2 <RCC_u8EnablePeripheralClk+0x6e>
	}
 80014f0:	bf00      	nop
}
 80014f2:	bf00      	nop
 80014f4:	370c      	adds	r7, #12
 80014f6:	46bd      	mov	sp, r7
 80014f8:	bc80      	pop	{r7}
 80014fa:	4770      	bx	lr
 80014fc:	40021000 	.word	0x40021000

08001500 <SYSTICK_vSetBusyWait>:
}

/***********************************************************************************************************************************************/
/* A function to put a value at the the STK_LOAD register and wait till the STK_VAL reaches 0 (delay) */
void SYSTICK_vSetBusyWait(uint32 Copy_u32Ticks)
{
 8001500:	b480      	push	{r7}
 8001502:	b083      	sub	sp, #12
 8001504:	af00      	add	r7, sp, #0
 8001506:	6078      	str	r0, [r7, #4]
	//load value at the STK_LOAD register
	STK->LOAD = Copy_u32Ticks;
 8001508:	4a10      	ldr	r2, [pc, #64]	; (800154c <SYSTICK_vSetBusyWait+0x4c>)
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	6053      	str	r3, [r2, #4]
	
	//start timer
	SET_BIT(STK->CTRL,STK_ENABLE);
 800150e:	4b0f      	ldr	r3, [pc, #60]	; (800154c <SYSTICK_vSetBusyWait+0x4c>)
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	4a0e      	ldr	r2, [pc, #56]	; (800154c <SYSTICK_vSetBusyWait+0x4c>)
 8001514:	f043 0301 	orr.w	r3, r3, #1
 8001518:	6013      	str	r3, [r2, #0]
	
	//wait till the STK_VAL reaches 0
	while(READ_BIT(STK->CTRL,STK_COUNTFLAG)==0);
 800151a:	bf00      	nop
 800151c:	4b0b      	ldr	r3, [pc, #44]	; (800154c <SYSTICK_vSetBusyWait+0x4c>)
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	0c1b      	lsrs	r3, r3, #16
 8001522:	f003 0301 	and.w	r3, r3, #1
 8001526:	2b00      	cmp	r3, #0
 8001528:	d0f8      	beq.n	800151c <SYSTICK_vSetBusyWait+0x1c>
	
	//stop timer
	CLR_BIT(STK->CTRL,STK_ENABLE);
 800152a:	4b08      	ldr	r3, [pc, #32]	; (800154c <SYSTICK_vSetBusyWait+0x4c>)
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	4a07      	ldr	r2, [pc, #28]	; (800154c <SYSTICK_vSetBusyWait+0x4c>)
 8001530:	f023 0301 	bic.w	r3, r3, #1
 8001534:	6013      	str	r3, [r2, #0]
	STK->LOAD=0;
 8001536:	4b05      	ldr	r3, [pc, #20]	; (800154c <SYSTICK_vSetBusyWait+0x4c>)
 8001538:	2200      	movs	r2, #0
 800153a:	605a      	str	r2, [r3, #4]
	STK->VAL=0;
 800153c:	4b03      	ldr	r3, [pc, #12]	; (800154c <SYSTICK_vSetBusyWait+0x4c>)
 800153e:	2200      	movs	r2, #0
 8001540:	609a      	str	r2, [r3, #8]
}
 8001542:	bf00      	nop
 8001544:	370c      	adds	r7, #12
 8001546:	46bd      	mov	sp, r7
 8001548:	bc80      	pop	{r7}
 800154a:	4770      	bx	lr
 800154c:	e000e010 	.word	0xe000e010

08001550 <SysTick_Handler>:
}

/***********************************************************************************************************************************************/

void SysTick_Handler(void)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	b082      	sub	sp, #8
 8001554:	af00      	add	r7, sp, #0
	uint8 Local_Temp; // a variable used to read the flag
	if(STK_Mode == SYSTICK_SINGLE)
 8001556:	4b12      	ldr	r3, [pc, #72]	; (80015a0 <SysTick_Handler+0x50>)
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	2b00      	cmp	r3, #0
 800155c:	d111      	bne.n	8001582 <SysTick_Handler+0x32>
	{
		/* Disable Interrupt */
		CLR_BIT(STK->CTRL,STK_TICKINT);
 800155e:	4b11      	ldr	r3, [pc, #68]	; (80015a4 <SysTick_Handler+0x54>)
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	4a10      	ldr	r2, [pc, #64]	; (80015a4 <SysTick_Handler+0x54>)
 8001564:	f023 0302 	bic.w	r3, r3, #2
 8001568:	6013      	str	r3, [r2, #0]
		
		/* stop timer */
		CLR_BIT(STK->CTRL,STK_ENABLE);
 800156a:	4b0e      	ldr	r3, [pc, #56]	; (80015a4 <SysTick_Handler+0x54>)
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	4a0d      	ldr	r2, [pc, #52]	; (80015a4 <SysTick_Handler+0x54>)
 8001570:	f023 0301 	bic.w	r3, r3, #1
 8001574:	6013      	str	r3, [r2, #0]
		STK->LOAD = 0;
 8001576:	4b0b      	ldr	r3, [pc, #44]	; (80015a4 <SysTick_Handler+0x54>)
 8001578:	2200      	movs	r2, #0
 800157a:	605a      	str	r2, [r3, #4]
		STK->VAL =0;
 800157c:	4b09      	ldr	r3, [pc, #36]	; (80015a4 <SysTick_Handler+0x54>)
 800157e:	2200      	movs	r2, #0
 8001580:	609a      	str	r2, [r3, #8]
	}
	
	STK_CallBack();
 8001582:	4b09      	ldr	r3, [pc, #36]	; (80015a8 <SysTick_Handler+0x58>)
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	4798      	blx	r3
	/* clear the flag by reading its value */
	Local_Temp = READ_BIT(STK->CTRL,STK_COUNTFLAG);
 8001588:	4b06      	ldr	r3, [pc, #24]	; (80015a4 <SysTick_Handler+0x54>)
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	0c1b      	lsrs	r3, r3, #16
 800158e:	b2db      	uxtb	r3, r3
 8001590:	f003 0301 	and.w	r3, r3, #1
 8001594:	71fb      	strb	r3, [r7, #7]
}
 8001596:	bf00      	nop
 8001598:	3708      	adds	r7, #8
 800159a:	46bd      	mov	sp, r7
 800159c:	bd80      	pop	{r7, pc}
 800159e:	bf00      	nop
 80015a0:	20000020 	.word	0x20000020
 80015a4:	e000e010 	.word	0xe000e010
 80015a8:	2000001c 	.word	0x2000001c

080015ac <_delay_ms>:


/***********************************************************************************************************************************************/

void _delay_ms(uint32 Copy_u32Time)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b082      	sub	sp, #8
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	6078      	str	r0, [r7, #4]
	#if SYSTICK_CLK_SRC == SYSTICK_CLK_AHB
	SYSTICK_vSetBusyWait(Copy_u32Time*1000);
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80015ba:	fb02 f303 	mul.w	r3, r2, r3
 80015be:	4618      	mov	r0, r3
 80015c0:	f7ff ff9e 	bl	8001500 <SYSTICK_vSetBusyWait>
	
	#elif SYSTICK_CLK_SRC == SYSTICK_CLK_AHB_8
	SYSTICK_vSetBusyWait(Copy_u32Time*1000);
	#endif
 80015c4:	bf00      	nop
 80015c6:	3708      	adds	r7, #8
 80015c8:	46bd      	mov	sp, r7
 80015ca:	bd80      	pop	{r7, pc}

080015cc <USART1_IRQHandler>:
	
}

/*********************************************************************************************************************************/
void USART1_IRQHandler(void)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	af00      	add	r7, sp, #0
	if(GP_UART_1 != NULL)
 80015d0:	4b05      	ldr	r3, [pc, #20]	; (80015e8 <USART1_IRQHandler+0x1c>)
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d005      	beq.n	80015e4 <USART1_IRQHandler+0x18>
	{
		UART1->SR = 0;
 80015d8:	4b04      	ldr	r3, [pc, #16]	; (80015ec <USART1_IRQHandler+0x20>)
 80015da:	2200      	movs	r2, #0
 80015dc:	601a      	str	r2, [r3, #0]
		GP_UART_1();
 80015de:	4b02      	ldr	r3, [pc, #8]	; (80015e8 <USART1_IRQHandler+0x1c>)
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	4798      	blx	r3
	}
}
 80015e4:	bf00      	nop
 80015e6:	bd80      	pop	{r7, pc}
 80015e8:	20000024 	.word	0x20000024
 80015ec:	40013800 	.word	0x40013800

080015f0 <USART2_IRQHandler>:

/*********************************************************************************************************************************/
void USART2_IRQHandler(void)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	af00      	add	r7, sp, #0
	if(GP_UART_2 != NULL)
 80015f4:	4b05      	ldr	r3, [pc, #20]	; (800160c <USART2_IRQHandler+0x1c>)
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d005      	beq.n	8001608 <USART2_IRQHandler+0x18>
	{
		UART2->SR = 0;
 80015fc:	4b04      	ldr	r3, [pc, #16]	; (8001610 <USART2_IRQHandler+0x20>)
 80015fe:	2200      	movs	r2, #0
 8001600:	601a      	str	r2, [r3, #0]
		GP_UART_2();
 8001602:	4b02      	ldr	r3, [pc, #8]	; (800160c <USART2_IRQHandler+0x1c>)
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	4798      	blx	r3
	}
}
 8001608:	bf00      	nop
 800160a:	bd80      	pop	{r7, pc}
 800160c:	20000028 	.word	0x20000028
 8001610:	40004400 	.word	0x40004400
 8001614:	00000000 	.word	0x00000000

08001618 <main>:
//#include "ULTRA_interface.h"



int main(void)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	b088      	sub	sp, #32
 800161c:	af00      	add	r7, sp, #0
	uint8 MPU_flag = 0;
 800161e:	2300      	movs	r3, #0
 8001620:	77fb      	strb	r3, [r7, #31]
	//uint16 Distance = 0;
	//double MPU_oldArr[3];


	//Enable system clock
	RCC_u8InitSysClk();
 8001622:	f7ff ff0d 	bl	8001440 <RCC_u8InitSysClk>
	//Enable portA
	RCC_u8EnablePeripheralClk(RCC_u8_APB2_BUS, GPIOA_EN);
 8001626:	2102      	movs	r1, #2
 8001628:	2003      	movs	r0, #3
 800162a:	f7ff ff2b 	bl	8001484 <RCC_u8EnablePeripheralClk>
	//define pin 7 of portA as output
	GPIO_vSetPinMode(GPIO_PORT_A, GPIO_PIN_7, GPIO_PIN_OUTPUT_SPD_50);
 800162e:	2203      	movs	r2, #3
 8001630:	2107      	movs	r1, #7
 8001632:	2000      	movs	r0, #0
 8001634:	f7ff f9f2 	bl	8000a1c <GPIO_vSetPinMode>
	GPIO_vSetPinConfig(GPIO_PORT_A, GPIO_PIN_7, GPIO_OUT_PUSHPULL);
 8001638:	2200      	movs	r2, #0
 800163a:	2107      	movs	r1, #7
 800163c:	2000      	movs	r0, #0
 800163e:	f7ff fab3 	bl	8000ba8 <GPIO_vSetPinConfig>

	GPIO_vSetPinMode(GPIO_PORT_A, GPIO_PIN_6, GPIO_PIN_OUTPUT_SPD_50);
 8001642:	2203      	movs	r2, #3
 8001644:	2106      	movs	r1, #6
 8001646:	2000      	movs	r0, #0
 8001648:	f7ff f9e8 	bl	8000a1c <GPIO_vSetPinMode>
	GPIO_vSetPinConfig(GPIO_PORT_A, GPIO_PIN_6, GPIO_OUT_PUSHPULL);
 800164c:	2200      	movs	r2, #0
 800164e:	2106      	movs	r1, #6
 8001650:	2000      	movs	r0, #0
 8001652:	f7ff faa9 	bl	8000ba8 <GPIO_vSetPinConfig>
	GPIO_vSetPinValue(GPIO_PORT_A, 6, 1);
 8001656:	2201      	movs	r2, #1
 8001658:	2106      	movs	r1, #6
 800165a:	2000      	movs	r0, #0
 800165c:	f7ff fb76 	bl	8000d4c <GPIO_vSetPinValue>
	/* //Enable TIMER2
    RCC_u8EnablePeripheralClk(RCC_u8_APB1_BUS, TIM2EN);
    TIMER2->PSC = 800-1 ;	//prescaler = 800*/

	//Initialize I2C
	I2C_vInit();
 8001660:	f7ff fbe4 	bl	8000e2c <I2C_vInit>
	//initialize UART
	//UART_vInit();
	//Initialize MPU6050 sensor
	MPU6050_vInit();
 8001664:	f7ff fd2e 	bl	80010c4 <MPU6050_vInit>

	_delay_ms(50);
 8001668:	2032      	movs	r0, #50	; 0x32
 800166a:	f7ff ff9f 	bl	80015ac <_delay_ms>
	//ULTRA_vInit();

	//Get initial readings
	MPU6050_vReadAccel_ALL(accel_buff);
 800166e:	463b      	mov	r3, r7
 8001670:	4618      	mov	r0, r3
 8001672:	f7ff fddd 	bl	8001230 <MPU6050_vReadAccel_ALL>

    //MPU_oldArr[0] = accel_buff[0]*9.8*2/32768;
    old[0] = accel_buff[1]*9.8*2/32768;		//initial value for accel in Y
 8001676:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800167a:	4618      	mov	r0, r3
 800167c:	f7fe feca 	bl	8000414 <__aeabi_i2d>
 8001680:	a32b      	add	r3, pc, #172	; (adr r3, 8001730 <main+0x118>)
 8001682:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001686:	f7fe ff2f 	bl	80004e8 <__aeabi_dmul>
 800168a:	4602      	mov	r2, r0
 800168c:	460b      	mov	r3, r1
 800168e:	4610      	mov	r0, r2
 8001690:	4619      	mov	r1, r3
 8001692:	4602      	mov	r2, r0
 8001694:	460b      	mov	r3, r1
 8001696:	f7fe fd71 	bl	800017c <__adddf3>
 800169a:	4602      	mov	r2, r0
 800169c:	460b      	mov	r3, r1
 800169e:	4610      	mov	r0, r2
 80016a0:	4619      	mov	r1, r3
 80016a2:	f04f 0200 	mov.w	r2, #0
 80016a6:	4b24      	ldr	r3, [pc, #144]	; (8001738 <main+0x120>)
 80016a8:	f7ff f848 	bl	800073c <__aeabi_ddiv>
 80016ac:	4602      	mov	r2, r0
 80016ae:	460b      	mov	r3, r1
 80016b0:	e9c7 2302 	strd	r2, r3, [r7, #8]
    old[1] = accel_buff[2]*9.8*2/32768;		//initial value for accel in Z
 80016b4:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80016b8:	4618      	mov	r0, r3
 80016ba:	f7fe feab 	bl	8000414 <__aeabi_i2d>
 80016be:	a31c      	add	r3, pc, #112	; (adr r3, 8001730 <main+0x118>)
 80016c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016c4:	f7fe ff10 	bl	80004e8 <__aeabi_dmul>
 80016c8:	4602      	mov	r2, r0
 80016ca:	460b      	mov	r3, r1
 80016cc:	4610      	mov	r0, r2
 80016ce:	4619      	mov	r1, r3
 80016d0:	4602      	mov	r2, r0
 80016d2:	460b      	mov	r3, r1
 80016d4:	f7fe fd52 	bl	800017c <__adddf3>
 80016d8:	4602      	mov	r2, r0
 80016da:	460b      	mov	r3, r1
 80016dc:	4610      	mov	r0, r2
 80016de:	4619      	mov	r1, r3
 80016e0:	f04f 0200 	mov.w	r2, #0
 80016e4:	4b14      	ldr	r3, [pc, #80]	; (8001738 <main+0x120>)
 80016e6:	f7ff f829 	bl	800073c <__aeabi_ddiv>
 80016ea:	4602      	mov	r2, r0
 80016ec:	460b      	mov	r3, r1
 80016ee:	e9c7 2304 	strd	r2, r3, [r7, #16]



	while(1)
	{
		MPU_flag = MPU6050_vDetectChange(old);
 80016f2:	f107 0308 	add.w	r3, r7, #8
 80016f6:	4618      	mov	r0, r3
 80016f8:	f7ff fdda 	bl	80012b0 <MPU6050_vDetectChange>
 80016fc:	4603      	mov	r3, r0
 80016fe:	77fb      	strb	r3, [r7, #31]
		//Distance = ULTRA_u16GetDistance();


		if(MPU_flag == 1)
 8001700:	7ffb      	ldrb	r3, [r7, #31]
 8001702:	2b01      	cmp	r3, #1
 8001704:	d1f5      	bne.n	80016f2 <main+0xda>
		{
			GPIO_vSetPinValue(GPIO_PORT_A, 6, 0);
 8001706:	2200      	movs	r2, #0
 8001708:	2106      	movs	r1, #6
 800170a:	2000      	movs	r0, #0
 800170c:	f7ff fb1e 	bl	8000d4c <GPIO_vSetPinValue>
			GPIO_vSetPinValue(GPIO_PORT_A, 7, 1);
 8001710:	2201      	movs	r2, #1
 8001712:	2107      	movs	r1, #7
 8001714:	2000      	movs	r0, #0
 8001716:	f7ff fb19 	bl	8000d4c <GPIO_vSetPinValue>
			_delay_ms(100);
 800171a:	2064      	movs	r0, #100	; 0x64
 800171c:	f7ff ff46 	bl	80015ac <_delay_ms>
			GPIO_vSetPinValue(GPIO_PORT_A, 7, 0);
 8001720:	2200      	movs	r2, #0
 8001722:	2107      	movs	r1, #7
 8001724:	2000      	movs	r0, #0
 8001726:	f7ff fb11 	bl	8000d4c <GPIO_vSetPinValue>
		MPU_flag = MPU6050_vDetectChange(old);
 800172a:	e7e2      	b.n	80016f2 <main+0xda>
 800172c:	f3af 8000 	nop.w
 8001730:	9999999a 	.word	0x9999999a
 8001734:	40239999 	.word	0x40239999
 8001738:	40e00000 	.word	0x40e00000

0800173c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800173c:	480d      	ldr	r0, [pc, #52]	; (8001774 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800173e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001740:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001744:	480c      	ldr	r0, [pc, #48]	; (8001778 <LoopForever+0x6>)
  ldr r1, =_edata
 8001746:	490d      	ldr	r1, [pc, #52]	; (800177c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001748:	4a0d      	ldr	r2, [pc, #52]	; (8001780 <LoopForever+0xe>)
  movs r3, #0
 800174a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800174c:	e002      	b.n	8001754 <LoopCopyDataInit>

0800174e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800174e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001750:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001752:	3304      	adds	r3, #4

08001754 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001754:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001756:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001758:	d3f9      	bcc.n	800174e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800175a:	4a0a      	ldr	r2, [pc, #40]	; (8001784 <LoopForever+0x12>)
  ldr r4, =_ebss
 800175c:	4c0a      	ldr	r4, [pc, #40]	; (8001788 <LoopForever+0x16>)
  movs r3, #0
 800175e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001760:	e001      	b.n	8001766 <LoopFillZerobss>

08001762 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001762:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001764:	3204      	adds	r2, #4

08001766 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001766:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001768:	d3fb      	bcc.n	8001762 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800176a:	f000 f811 	bl	8001790 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800176e:	f7ff ff53 	bl	8001618 <main>

08001772 <LoopForever>:

LoopForever:
    b LoopForever
 8001772:	e7fe      	b.n	8001772 <LoopForever>
  ldr   r0, =_estack
 8001774:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 8001778:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800177c:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8001780:	080017f8 	.word	0x080017f8
  ldr r2, =_sbss
 8001784:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8001788:	2000002c 	.word	0x2000002c

0800178c <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800178c:	e7fe      	b.n	800178c <ADC1_2_IRQHandler>
	...

08001790 <__libc_init_array>:
 8001790:	b570      	push	{r4, r5, r6, lr}
 8001792:	2600      	movs	r6, #0
 8001794:	4d0c      	ldr	r5, [pc, #48]	; (80017c8 <__libc_init_array+0x38>)
 8001796:	4c0d      	ldr	r4, [pc, #52]	; (80017cc <__libc_init_array+0x3c>)
 8001798:	1b64      	subs	r4, r4, r5
 800179a:	10a4      	asrs	r4, r4, #2
 800179c:	42a6      	cmp	r6, r4
 800179e:	d109      	bne.n	80017b4 <__libc_init_array+0x24>
 80017a0:	f000 f81a 	bl	80017d8 <_init>
 80017a4:	2600      	movs	r6, #0
 80017a6:	4d0a      	ldr	r5, [pc, #40]	; (80017d0 <__libc_init_array+0x40>)
 80017a8:	4c0a      	ldr	r4, [pc, #40]	; (80017d4 <__libc_init_array+0x44>)
 80017aa:	1b64      	subs	r4, r4, r5
 80017ac:	10a4      	asrs	r4, r4, #2
 80017ae:	42a6      	cmp	r6, r4
 80017b0:	d105      	bne.n	80017be <__libc_init_array+0x2e>
 80017b2:	bd70      	pop	{r4, r5, r6, pc}
 80017b4:	f855 3b04 	ldr.w	r3, [r5], #4
 80017b8:	4798      	blx	r3
 80017ba:	3601      	adds	r6, #1
 80017bc:	e7ee      	b.n	800179c <__libc_init_array+0xc>
 80017be:	f855 3b04 	ldr.w	r3, [r5], #4
 80017c2:	4798      	blx	r3
 80017c4:	3601      	adds	r6, #1
 80017c6:	e7f2      	b.n	80017ae <__libc_init_array+0x1e>
 80017c8:	080017f0 	.word	0x080017f0
 80017cc:	080017f0 	.word	0x080017f0
 80017d0:	080017f0 	.word	0x080017f0
 80017d4:	080017f4 	.word	0x080017f4

080017d8 <_init>:
 80017d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80017da:	bf00      	nop
 80017dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80017de:	bc08      	pop	{r3}
 80017e0:	469e      	mov	lr, r3
 80017e2:	4770      	bx	lr

080017e4 <_fini>:
 80017e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80017e6:	bf00      	nop
 80017e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80017ea:	bc08      	pop	{r3}
 80017ec:	469e      	mov	lr, r3
 80017ee:	4770      	bx	lr
